
Week9-SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098f4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  08009a98  08009a98  00019a98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f48  08009f48  0002034c  2**0
                  CONTENTS
  4 .ARM          00000008  08009f48  08009f48  00019f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f50  08009f50  0002034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f50  08009f50  00019f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f54  08009f54  00019f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  08009f58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  20000350  0800a2a4  00020350  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000618  0800a2a4  00020618  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fafc  00000000  00000000  0002037c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020b4  00000000  00000000  0002fe78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f70  00000000  00000000  00031f30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e68  00000000  00000000  00032ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017732  00000000  00000000  00033d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b2a7  00000000  00000000  0004b43a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094624  00000000  00000000  000566e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ead05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004da4  00000000  00000000  000ead80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000350 	.word	0x20000350
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009a7c 	.word	0x08009a7c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000354 	.word	0x20000354
 80001dc:	08009a7c 	.word	0x08009a7c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_frsub>:
 8000c58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c5c:	e002      	b.n	8000c64 <__addsf3>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_fsub>:
 8000c60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c64 <__addsf3>:
 8000c64:	0042      	lsls	r2, r0, #1
 8000c66:	bf1f      	itttt	ne
 8000c68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c6c:	ea92 0f03 	teqne	r2, r3
 8000c70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c78:	d06a      	beq.n	8000d50 <__addsf3+0xec>
 8000c7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c82:	bfc1      	itttt	gt
 8000c84:	18d2      	addgt	r2, r2, r3
 8000c86:	4041      	eorgt	r1, r0
 8000c88:	4048      	eorgt	r0, r1
 8000c8a:	4041      	eorgt	r1, r0
 8000c8c:	bfb8      	it	lt
 8000c8e:	425b      	neglt	r3, r3
 8000c90:	2b19      	cmp	r3, #25
 8000c92:	bf88      	it	hi
 8000c94:	4770      	bxhi	lr
 8000c96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ca2:	bf18      	it	ne
 8000ca4:	4240      	negne	r0, r0
 8000ca6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000caa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cb2:	bf18      	it	ne
 8000cb4:	4249      	negne	r1, r1
 8000cb6:	ea92 0f03 	teq	r2, r3
 8000cba:	d03f      	beq.n	8000d3c <__addsf3+0xd8>
 8000cbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000cc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cc4:	eb10 000c 	adds.w	r0, r0, ip
 8000cc8:	f1c3 0320 	rsb	r3, r3, #32
 8000ccc:	fa01 f103 	lsl.w	r1, r1, r3
 8000cd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__addsf3+0x78>
 8000cd6:	4249      	negs	r1, r1
 8000cd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cdc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ce0:	d313      	bcc.n	8000d0a <__addsf3+0xa6>
 8000ce2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ce6:	d306      	bcc.n	8000cf6 <__addsf3+0x92>
 8000ce8:	0840      	lsrs	r0, r0, #1
 8000cea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cee:	f102 0201 	add.w	r2, r2, #1
 8000cf2:	2afe      	cmp	r2, #254	; 0xfe
 8000cf4:	d251      	bcs.n	8000d9a <__addsf3+0x136>
 8000cf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cfe:	bf08      	it	eq
 8000d00:	f020 0001 	biceq.w	r0, r0, #1
 8000d04:	ea40 0003 	orr.w	r0, r0, r3
 8000d08:	4770      	bx	lr
 8000d0a:	0049      	lsls	r1, r1, #1
 8000d0c:	eb40 0000 	adc.w	r0, r0, r0
 8000d10:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000d14:	f1a2 0201 	sub.w	r2, r2, #1
 8000d18:	d1ed      	bne.n	8000cf6 <__addsf3+0x92>
 8000d1a:	fab0 fc80 	clz	ip, r0
 8000d1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d22:	ebb2 020c 	subs.w	r2, r2, ip
 8000d26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d2a:	bfaa      	itet	ge
 8000d2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d30:	4252      	neglt	r2, r2
 8000d32:	4318      	orrge	r0, r3
 8000d34:	bfbc      	itt	lt
 8000d36:	40d0      	lsrlt	r0, r2
 8000d38:	4318      	orrlt	r0, r3
 8000d3a:	4770      	bx	lr
 8000d3c:	f092 0f00 	teq	r2, #0
 8000d40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d44:	bf06      	itte	eq
 8000d46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d4a:	3201      	addeq	r2, #1
 8000d4c:	3b01      	subne	r3, #1
 8000d4e:	e7b5      	b.n	8000cbc <__addsf3+0x58>
 8000d50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d58:	bf18      	it	ne
 8000d5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d5e:	d021      	beq.n	8000da4 <__addsf3+0x140>
 8000d60:	ea92 0f03 	teq	r2, r3
 8000d64:	d004      	beq.n	8000d70 <__addsf3+0x10c>
 8000d66:	f092 0f00 	teq	r2, #0
 8000d6a:	bf08      	it	eq
 8000d6c:	4608      	moveq	r0, r1
 8000d6e:	4770      	bx	lr
 8000d70:	ea90 0f01 	teq	r0, r1
 8000d74:	bf1c      	itt	ne
 8000d76:	2000      	movne	r0, #0
 8000d78:	4770      	bxne	lr
 8000d7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d7e:	d104      	bne.n	8000d8a <__addsf3+0x126>
 8000d80:	0040      	lsls	r0, r0, #1
 8000d82:	bf28      	it	cs
 8000d84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d88:	4770      	bx	lr
 8000d8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d8e:	bf3c      	itt	cc
 8000d90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d94:	4770      	bxcc	lr
 8000d96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da2:	4770      	bx	lr
 8000da4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000da8:	bf16      	itet	ne
 8000daa:	4608      	movne	r0, r1
 8000dac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000db0:	4601      	movne	r1, r0
 8000db2:	0242      	lsls	r2, r0, #9
 8000db4:	bf06      	itte	eq
 8000db6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dba:	ea90 0f01 	teqeq	r0, r1
 8000dbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dc2:	4770      	bx	lr

08000dc4 <__aeabi_ui2f>:
 8000dc4:	f04f 0300 	mov.w	r3, #0
 8000dc8:	e004      	b.n	8000dd4 <__aeabi_i2f+0x8>
 8000dca:	bf00      	nop

08000dcc <__aeabi_i2f>:
 8000dcc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dd0:	bf48      	it	mi
 8000dd2:	4240      	negmi	r0, r0
 8000dd4:	ea5f 0c00 	movs.w	ip, r0
 8000dd8:	bf08      	it	eq
 8000dda:	4770      	bxeq	lr
 8000ddc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000de0:	4601      	mov	r1, r0
 8000de2:	f04f 0000 	mov.w	r0, #0
 8000de6:	e01c      	b.n	8000e22 <__aeabi_l2f+0x2a>

08000de8 <__aeabi_ul2f>:
 8000de8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dec:	bf08      	it	eq
 8000dee:	4770      	bxeq	lr
 8000df0:	f04f 0300 	mov.w	r3, #0
 8000df4:	e00a      	b.n	8000e0c <__aeabi_l2f+0x14>
 8000df6:	bf00      	nop

08000df8 <__aeabi_l2f>:
 8000df8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dfc:	bf08      	it	eq
 8000dfe:	4770      	bxeq	lr
 8000e00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e04:	d502      	bpl.n	8000e0c <__aeabi_l2f+0x14>
 8000e06:	4240      	negs	r0, r0
 8000e08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e0c:	ea5f 0c01 	movs.w	ip, r1
 8000e10:	bf02      	ittt	eq
 8000e12:	4684      	moveq	ip, r0
 8000e14:	4601      	moveq	r1, r0
 8000e16:	2000      	moveq	r0, #0
 8000e18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e1c:	bf08      	it	eq
 8000e1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e26:	fabc f28c 	clz	r2, ip
 8000e2a:	3a08      	subs	r2, #8
 8000e2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e30:	db10      	blt.n	8000e54 <__aeabi_l2f+0x5c>
 8000e32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e36:	4463      	add	r3, ip
 8000e38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e3c:	f1c2 0220 	rsb	r2, r2, #32
 8000e40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e44:	fa20 f202 	lsr.w	r2, r0, r2
 8000e48:	eb43 0002 	adc.w	r0, r3, r2
 8000e4c:	bf08      	it	eq
 8000e4e:	f020 0001 	biceq.w	r0, r0, #1
 8000e52:	4770      	bx	lr
 8000e54:	f102 0220 	add.w	r2, r2, #32
 8000e58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e5c:	f1c2 0220 	rsb	r2, r2, #32
 8000e60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e64:	fa21 f202 	lsr.w	r2, r1, r2
 8000e68:	eb43 0002 	adc.w	r0, r3, r2
 8000e6c:	bf08      	it	eq
 8000e6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e72:	4770      	bx	lr

08000e74 <__aeabi_uldivmod>:
 8000e74:	b953      	cbnz	r3, 8000e8c <__aeabi_uldivmod+0x18>
 8000e76:	b94a      	cbnz	r2, 8000e8c <__aeabi_uldivmod+0x18>
 8000e78:	2900      	cmp	r1, #0
 8000e7a:	bf08      	it	eq
 8000e7c:	2800      	cmpeq	r0, #0
 8000e7e:	bf1c      	itt	ne
 8000e80:	f04f 31ff 	movne.w	r1, #4294967295
 8000e84:	f04f 30ff 	movne.w	r0, #4294967295
 8000e88:	f000 b972 	b.w	8001170 <__aeabi_idiv0>
 8000e8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e94:	f000 f806 	bl	8000ea4 <__udivmoddi4>
 8000e98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ea0:	b004      	add	sp, #16
 8000ea2:	4770      	bx	lr

08000ea4 <__udivmoddi4>:
 8000ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ea8:	9e08      	ldr	r6, [sp, #32]
 8000eaa:	4604      	mov	r4, r0
 8000eac:	4688      	mov	r8, r1
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d14b      	bne.n	8000f4a <__udivmoddi4+0xa6>
 8000eb2:	428a      	cmp	r2, r1
 8000eb4:	4615      	mov	r5, r2
 8000eb6:	d967      	bls.n	8000f88 <__udivmoddi4+0xe4>
 8000eb8:	fab2 f282 	clz	r2, r2
 8000ebc:	b14a      	cbz	r2, 8000ed2 <__udivmoddi4+0x2e>
 8000ebe:	f1c2 0720 	rsb	r7, r2, #32
 8000ec2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ec6:	fa20 f707 	lsr.w	r7, r0, r7
 8000eca:	4095      	lsls	r5, r2
 8000ecc:	ea47 0803 	orr.w	r8, r7, r3
 8000ed0:	4094      	lsls	r4, r2
 8000ed2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ed6:	0c23      	lsrs	r3, r4, #16
 8000ed8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000edc:	fa1f fc85 	uxth.w	ip, r5
 8000ee0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ee4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ee8:	fb07 f10c 	mul.w	r1, r7, ip
 8000eec:	4299      	cmp	r1, r3
 8000eee:	d909      	bls.n	8000f04 <__udivmoddi4+0x60>
 8000ef0:	18eb      	adds	r3, r5, r3
 8000ef2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ef6:	f080 811b 	bcs.w	8001130 <__udivmoddi4+0x28c>
 8000efa:	4299      	cmp	r1, r3
 8000efc:	f240 8118 	bls.w	8001130 <__udivmoddi4+0x28c>
 8000f00:	3f02      	subs	r7, #2
 8000f02:	442b      	add	r3, r5
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f0c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb00 fc0c 	mul.w	ip, r0, ip
 8000f18:	45a4      	cmp	ip, r4
 8000f1a:	d909      	bls.n	8000f30 <__udivmoddi4+0x8c>
 8000f1c:	192c      	adds	r4, r5, r4
 8000f1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f22:	f080 8107 	bcs.w	8001134 <__udivmoddi4+0x290>
 8000f26:	45a4      	cmp	ip, r4
 8000f28:	f240 8104 	bls.w	8001134 <__udivmoddi4+0x290>
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	442c      	add	r4, r5
 8000f30:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000f34:	eba4 040c 	sub.w	r4, r4, ip
 8000f38:	2700      	movs	r7, #0
 8000f3a:	b11e      	cbz	r6, 8000f44 <__udivmoddi4+0xa0>
 8000f3c:	40d4      	lsrs	r4, r2
 8000f3e:	2300      	movs	r3, #0
 8000f40:	e9c6 4300 	strd	r4, r3, [r6]
 8000f44:	4639      	mov	r1, r7
 8000f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d909      	bls.n	8000f62 <__udivmoddi4+0xbe>
 8000f4e:	2e00      	cmp	r6, #0
 8000f50:	f000 80eb 	beq.w	800112a <__udivmoddi4+0x286>
 8000f54:	2700      	movs	r7, #0
 8000f56:	e9c6 0100 	strd	r0, r1, [r6]
 8000f5a:	4638      	mov	r0, r7
 8000f5c:	4639      	mov	r1, r7
 8000f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f62:	fab3 f783 	clz	r7, r3
 8000f66:	2f00      	cmp	r7, #0
 8000f68:	d147      	bne.n	8000ffa <__udivmoddi4+0x156>
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	d302      	bcc.n	8000f74 <__udivmoddi4+0xd0>
 8000f6e:	4282      	cmp	r2, r0
 8000f70:	f200 80fa 	bhi.w	8001168 <__udivmoddi4+0x2c4>
 8000f74:	1a84      	subs	r4, r0, r2
 8000f76:	eb61 0303 	sbc.w	r3, r1, r3
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	4698      	mov	r8, r3
 8000f7e:	2e00      	cmp	r6, #0
 8000f80:	d0e0      	beq.n	8000f44 <__udivmoddi4+0xa0>
 8000f82:	e9c6 4800 	strd	r4, r8, [r6]
 8000f86:	e7dd      	b.n	8000f44 <__udivmoddi4+0xa0>
 8000f88:	b902      	cbnz	r2, 8000f8c <__udivmoddi4+0xe8>
 8000f8a:	deff      	udf	#255	; 0xff
 8000f8c:	fab2 f282 	clz	r2, r2
 8000f90:	2a00      	cmp	r2, #0
 8000f92:	f040 808f 	bne.w	80010b4 <__udivmoddi4+0x210>
 8000f96:	1b49      	subs	r1, r1, r5
 8000f98:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f9c:	fa1f f885 	uxth.w	r8, r5
 8000fa0:	2701      	movs	r7, #1
 8000fa2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000fa6:	0c23      	lsrs	r3, r4, #16
 8000fa8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000fac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fb0:	fb08 f10c 	mul.w	r1, r8, ip
 8000fb4:	4299      	cmp	r1, r3
 8000fb6:	d907      	bls.n	8000fc8 <__udivmoddi4+0x124>
 8000fb8:	18eb      	adds	r3, r5, r3
 8000fba:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000fbe:	d202      	bcs.n	8000fc6 <__udivmoddi4+0x122>
 8000fc0:	4299      	cmp	r1, r3
 8000fc2:	f200 80cd 	bhi.w	8001160 <__udivmoddi4+0x2bc>
 8000fc6:	4684      	mov	ip, r0
 8000fc8:	1a59      	subs	r1, r3, r1
 8000fca:	b2a3      	uxth	r3, r4
 8000fcc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fd0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000fd4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000fd8:	fb08 f800 	mul.w	r8, r8, r0
 8000fdc:	45a0      	cmp	r8, r4
 8000fde:	d907      	bls.n	8000ff0 <__udivmoddi4+0x14c>
 8000fe0:	192c      	adds	r4, r5, r4
 8000fe2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000fe6:	d202      	bcs.n	8000fee <__udivmoddi4+0x14a>
 8000fe8:	45a0      	cmp	r8, r4
 8000fea:	f200 80b6 	bhi.w	800115a <__udivmoddi4+0x2b6>
 8000fee:	4618      	mov	r0, r3
 8000ff0:	eba4 0408 	sub.w	r4, r4, r8
 8000ff4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ff8:	e79f      	b.n	8000f3a <__udivmoddi4+0x96>
 8000ffa:	f1c7 0c20 	rsb	ip, r7, #32
 8000ffe:	40bb      	lsls	r3, r7
 8001000:	fa22 fe0c 	lsr.w	lr, r2, ip
 8001004:	ea4e 0e03 	orr.w	lr, lr, r3
 8001008:	fa01 f407 	lsl.w	r4, r1, r7
 800100c:	fa20 f50c 	lsr.w	r5, r0, ip
 8001010:	fa21 f30c 	lsr.w	r3, r1, ip
 8001014:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8001018:	4325      	orrs	r5, r4
 800101a:	fbb3 f9f8 	udiv	r9, r3, r8
 800101e:	0c2c      	lsrs	r4, r5, #16
 8001020:	fb08 3319 	mls	r3, r8, r9, r3
 8001024:	fa1f fa8e 	uxth.w	sl, lr
 8001028:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800102c:	fb09 f40a 	mul.w	r4, r9, sl
 8001030:	429c      	cmp	r4, r3
 8001032:	fa02 f207 	lsl.w	r2, r2, r7
 8001036:	fa00 f107 	lsl.w	r1, r0, r7
 800103a:	d90b      	bls.n	8001054 <__udivmoddi4+0x1b0>
 800103c:	eb1e 0303 	adds.w	r3, lr, r3
 8001040:	f109 30ff 	add.w	r0, r9, #4294967295
 8001044:	f080 8087 	bcs.w	8001156 <__udivmoddi4+0x2b2>
 8001048:	429c      	cmp	r4, r3
 800104a:	f240 8084 	bls.w	8001156 <__udivmoddi4+0x2b2>
 800104e:	f1a9 0902 	sub.w	r9, r9, #2
 8001052:	4473      	add	r3, lr
 8001054:	1b1b      	subs	r3, r3, r4
 8001056:	b2ad      	uxth	r5, r5
 8001058:	fbb3 f0f8 	udiv	r0, r3, r8
 800105c:	fb08 3310 	mls	r3, r8, r0, r3
 8001060:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8001064:	fb00 fa0a 	mul.w	sl, r0, sl
 8001068:	45a2      	cmp	sl, r4
 800106a:	d908      	bls.n	800107e <__udivmoddi4+0x1da>
 800106c:	eb1e 0404 	adds.w	r4, lr, r4
 8001070:	f100 33ff 	add.w	r3, r0, #4294967295
 8001074:	d26b      	bcs.n	800114e <__udivmoddi4+0x2aa>
 8001076:	45a2      	cmp	sl, r4
 8001078:	d969      	bls.n	800114e <__udivmoddi4+0x2aa>
 800107a:	3802      	subs	r0, #2
 800107c:	4474      	add	r4, lr
 800107e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001082:	fba0 8902 	umull	r8, r9, r0, r2
 8001086:	eba4 040a 	sub.w	r4, r4, sl
 800108a:	454c      	cmp	r4, r9
 800108c:	46c2      	mov	sl, r8
 800108e:	464b      	mov	r3, r9
 8001090:	d354      	bcc.n	800113c <__udivmoddi4+0x298>
 8001092:	d051      	beq.n	8001138 <__udivmoddi4+0x294>
 8001094:	2e00      	cmp	r6, #0
 8001096:	d069      	beq.n	800116c <__udivmoddi4+0x2c8>
 8001098:	ebb1 050a 	subs.w	r5, r1, sl
 800109c:	eb64 0403 	sbc.w	r4, r4, r3
 80010a0:	fa04 fc0c 	lsl.w	ip, r4, ip
 80010a4:	40fd      	lsrs	r5, r7
 80010a6:	40fc      	lsrs	r4, r7
 80010a8:	ea4c 0505 	orr.w	r5, ip, r5
 80010ac:	e9c6 5400 	strd	r5, r4, [r6]
 80010b0:	2700      	movs	r7, #0
 80010b2:	e747      	b.n	8000f44 <__udivmoddi4+0xa0>
 80010b4:	f1c2 0320 	rsb	r3, r2, #32
 80010b8:	fa20 f703 	lsr.w	r7, r0, r3
 80010bc:	4095      	lsls	r5, r2
 80010be:	fa01 f002 	lsl.w	r0, r1, r2
 80010c2:	fa21 f303 	lsr.w	r3, r1, r3
 80010c6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80010ca:	4338      	orrs	r0, r7
 80010cc:	0c01      	lsrs	r1, r0, #16
 80010ce:	fbb3 f7fe 	udiv	r7, r3, lr
 80010d2:	fa1f f885 	uxth.w	r8, r5
 80010d6:	fb0e 3317 	mls	r3, lr, r7, r3
 80010da:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80010de:	fb07 f308 	mul.w	r3, r7, r8
 80010e2:	428b      	cmp	r3, r1
 80010e4:	fa04 f402 	lsl.w	r4, r4, r2
 80010e8:	d907      	bls.n	80010fa <__udivmoddi4+0x256>
 80010ea:	1869      	adds	r1, r5, r1
 80010ec:	f107 3cff 	add.w	ip, r7, #4294967295
 80010f0:	d22f      	bcs.n	8001152 <__udivmoddi4+0x2ae>
 80010f2:	428b      	cmp	r3, r1
 80010f4:	d92d      	bls.n	8001152 <__udivmoddi4+0x2ae>
 80010f6:	3f02      	subs	r7, #2
 80010f8:	4429      	add	r1, r5
 80010fa:	1acb      	subs	r3, r1, r3
 80010fc:	b281      	uxth	r1, r0
 80010fe:	fbb3 f0fe 	udiv	r0, r3, lr
 8001102:	fb0e 3310 	mls	r3, lr, r0, r3
 8001106:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800110a:	fb00 f308 	mul.w	r3, r0, r8
 800110e:	428b      	cmp	r3, r1
 8001110:	d907      	bls.n	8001122 <__udivmoddi4+0x27e>
 8001112:	1869      	adds	r1, r5, r1
 8001114:	f100 3cff 	add.w	ip, r0, #4294967295
 8001118:	d217      	bcs.n	800114a <__udivmoddi4+0x2a6>
 800111a:	428b      	cmp	r3, r1
 800111c:	d915      	bls.n	800114a <__udivmoddi4+0x2a6>
 800111e:	3802      	subs	r0, #2
 8001120:	4429      	add	r1, r5
 8001122:	1ac9      	subs	r1, r1, r3
 8001124:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8001128:	e73b      	b.n	8000fa2 <__udivmoddi4+0xfe>
 800112a:	4637      	mov	r7, r6
 800112c:	4630      	mov	r0, r6
 800112e:	e709      	b.n	8000f44 <__udivmoddi4+0xa0>
 8001130:	4607      	mov	r7, r0
 8001132:	e6e7      	b.n	8000f04 <__udivmoddi4+0x60>
 8001134:	4618      	mov	r0, r3
 8001136:	e6fb      	b.n	8000f30 <__udivmoddi4+0x8c>
 8001138:	4541      	cmp	r1, r8
 800113a:	d2ab      	bcs.n	8001094 <__udivmoddi4+0x1f0>
 800113c:	ebb8 0a02 	subs.w	sl, r8, r2
 8001140:	eb69 020e 	sbc.w	r2, r9, lr
 8001144:	3801      	subs	r0, #1
 8001146:	4613      	mov	r3, r2
 8001148:	e7a4      	b.n	8001094 <__udivmoddi4+0x1f0>
 800114a:	4660      	mov	r0, ip
 800114c:	e7e9      	b.n	8001122 <__udivmoddi4+0x27e>
 800114e:	4618      	mov	r0, r3
 8001150:	e795      	b.n	800107e <__udivmoddi4+0x1da>
 8001152:	4667      	mov	r7, ip
 8001154:	e7d1      	b.n	80010fa <__udivmoddi4+0x256>
 8001156:	4681      	mov	r9, r0
 8001158:	e77c      	b.n	8001054 <__udivmoddi4+0x1b0>
 800115a:	3802      	subs	r0, #2
 800115c:	442c      	add	r4, r5
 800115e:	e747      	b.n	8000ff0 <__udivmoddi4+0x14c>
 8001160:	f1ac 0c02 	sub.w	ip, ip, #2
 8001164:	442b      	add	r3, r5
 8001166:	e72f      	b.n	8000fc8 <__udivmoddi4+0x124>
 8001168:	4638      	mov	r0, r7
 800116a:	e708      	b.n	8000f7e <__udivmoddi4+0xda>
 800116c:	4637      	mov	r7, r6
 800116e:	e6e9      	b.n	8000f44 <__udivmoddi4+0xa0>

08001170 <__aeabi_idiv0>:
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	0000      	movs	r0, r0
	...

08001178 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001178:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800117c:	ed2d 8b02 	vpush	{d8}
 8001180:	b083      	sub	sp, #12
 8001182:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001184:	f001 fd04 	bl	8002b90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001188:	f000 ff90 	bl	80020ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800118c:	f001 f962 	bl	8002454 <MX_GPIO_Init>
  MX_DMA_Init();
 8001190:	f001 f940 	bl	8002414 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001194:	f001 f914 	bl	80023c0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001198:	f000 fff0 	bl	800217c <MX_ADC1_Init>
  MX_SPI3_Init();
 800119c:	f001 f840 	bl	8002220 <MX_SPI3_Init>
  MX_TIM3_Init();
 80011a0:	f001 f8c2 	bl	8002328 <MX_TIM3_Init>
  MX_TIM2_Init();
 80011a4:	f001 f874 	bl	8002290 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim3);
 80011a8:	48a1      	ldr	r0, [pc, #644]	; (8001430 <main+0x2b8>)
 80011aa:	f004 f8d8 	bl	800535e <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 80011ae:	48a1      	ldr	r0, [pc, #644]	; (8001434 <main+0x2bc>)
 80011b0:	f004 f8f9 	bl	80053a6 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADCin, 1);
 80011b4:	2201      	movs	r2, #1
 80011b6:	49a0      	ldr	r1, [pc, #640]	; (8001438 <main+0x2c0>)
 80011b8:	48a0      	ldr	r0, [pc, #640]	; (800143c <main+0x2c4>)
 80011ba:	f001 fedf 	bl	8002f7c <HAL_ADC_Start_DMA>

	HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011c4:	489e      	ldr	r0, [pc, #632]	; (8001440 <main+0x2c8>)
 80011c6:	f003 f8cb 	bl	8004360 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_UART_Receive_IT(&huart2, (uint8_t*)RxDataBuffer, 32);
 80011ca:	2220      	movs	r2, #32
 80011cc:	499d      	ldr	r1, [pc, #628]	; (8001444 <main+0x2cc>)
 80011ce:	489e      	ldr	r0, [pc, #632]	; (8001448 <main+0x2d0>)
 80011d0:	f004 fd76 	bl	8005cc0 <HAL_UART_Receive_IT>
		Inputchar = UARTRecieveIT();
 80011d4:	f001 f9de 	bl	8002594 <UARTRecieveIT>
 80011d8:	4603      	mov	r3, r0
 80011da:	461a      	mov	r2, r3
 80011dc:	4b9b      	ldr	r3, [pc, #620]	; (800144c <main+0x2d4>)
 80011de:	801a      	strh	r2, [r3, #0]
		switch(State)
 80011e0:	4b9b      	ldr	r3, [pc, #620]	; (8001450 <main+0x2d8>)
 80011e2:	881b      	ldrh	r3, [r3, #0]
 80011e4:	2b49      	cmp	r3, #73	; 0x49
 80011e6:	f000 81df 	beq.w	80015a8 <main+0x430>
 80011ea:	2b49      	cmp	r3, #73	; 0x49
 80011ec:	dc17      	bgt.n	800121e <main+0xa6>
 80011ee:	2b09      	cmp	r3, #9
 80011f0:	f000 80a9 	beq.w	8001346 <main+0x1ce>
 80011f4:	2b09      	cmp	r3, #9
 80011f6:	dc07      	bgt.n	8001208 <main+0x90>
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d051      	beq.n	80012a0 <main+0x128>
 80011fc:	2b08      	cmp	r3, #8
 80011fe:	d06b      	beq.n	80012d8 <main+0x160>
 8001200:	2b00      	cmp	r3, #0
 8001202:	d03f      	beq.n	8001284 <main+0x10c>
 8001204:	f000 bc3f 	b.w	8001a86 <main+0x90e>
 8001208:	2b41      	cmp	r3, #65	; 0x41
 800120a:	f000 8102 	beq.w	8001412 <main+0x29a>
 800120e:	2b48      	cmp	r3, #72	; 0x48
 8001210:	f000 8345 	beq.w	800189e <main+0x726>
 8001214:	2b40      	cmp	r3, #64	; 0x40
 8001216:	f000 80c4 	beq.w	80013a2 <main+0x22a>
 800121a:	f000 bc34 	b.w	8001a86 <main+0x90e>
 800121e:	f240 32f3 	movw	r2, #1011	; 0x3f3
 8001222:	4293      	cmp	r3, r2
 8001224:	f000 8122 	beq.w	800146c <main+0x2f4>
 8001228:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800122c:	da0e      	bge.n	800124c <main+0xd4>
 800122e:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8001232:	4293      	cmp	r3, r2
 8001234:	f000 80c4 	beq.w	80013c0 <main+0x248>
 8001238:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800123c:	4293      	cmp	r3, r2
 800123e:	d05a      	beq.n	80012f6 <main+0x17e>
 8001240:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001244:	f000 808e 	beq.w	8001364 <main+0x1ec>
 8001248:	f000 bc1d 	b.w	8001a86 <main+0x90e>
 800124c:	f240 424d 	movw	r2, #1101	; 0x44d
 8001250:	4293      	cmp	r3, r2
 8001252:	f000 8333 	beq.w	80018bc <main+0x744>
 8001256:	f240 424d 	movw	r2, #1101	; 0x44d
 800125a:	4293      	cmp	r3, r2
 800125c:	dc06      	bgt.n	800126c <main+0xf4>
 800125e:	f240 424c 	movw	r2, #1100	; 0x44c
 8001262:	4293      	cmp	r3, r2
 8001264:	f000 837d 	beq.w	8001962 <main+0x7ea>
 8001268:	f000 bc0d 	b.w	8001a86 <main+0x90e>
 800126c:	f240 4256 	movw	r2, #1110	; 0x456
 8001270:	4293      	cmp	r3, r2
 8001272:	f000 8367 	beq.w	8001944 <main+0x7cc>
 8001276:	f240 4257 	movw	r2, #1111	; 0x457
 800127a:	4293      	cmp	r3, r2
 800127c:	f000 81a3 	beq.w	80015c6 <main+0x44e>
 8001280:	f000 bc01 	b.w	8001a86 <main+0x90e>
		{
			case State_Start: //Start state
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu_Start, strlen(Menu_Start), 10);
 8001284:	4873      	ldr	r0, [pc, #460]	; (8001454 <main+0x2dc>)
 8001286:	f7fe ffab 	bl	80001e0 <strlen>
 800128a:	4603      	mov	r3, r0
 800128c:	b29a      	uxth	r2, r3
 800128e:	230a      	movs	r3, #10
 8001290:	4970      	ldr	r1, [pc, #448]	; (8001454 <main+0x2dc>)
 8001292:	486d      	ldr	r0, [pc, #436]	; (8001448 <main+0x2d0>)
 8001294:	f004 fc7b 	bl	8005b8e <HAL_UART_Transmit>
				State = State_Menu;
 8001298:	4b6d      	ldr	r3, [pc, #436]	; (8001450 <main+0x2d8>)
 800129a:	2201      	movs	r2, #1
 800129c:	801a      	strh	r2, [r3, #0]
				break;
 800129e:	e3f2      	b.n	8001a86 <main+0x90e>
			case State_Menu: //Choose menu
				if(Inputchar == '1')
 80012a0:	4b6a      	ldr	r3, [pc, #424]	; (800144c <main+0x2d4>)
 80012a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012a6:	2b31      	cmp	r3, #49	; 0x31
 80012a8:	d103      	bne.n	80012b2 <main+0x13a>
				{
					State = State_Sawtooth;
 80012aa:	4b69      	ldr	r3, [pc, #420]	; (8001450 <main+0x2d8>)
 80012ac:	2208      	movs	r2, #8
 80012ae:	801a      	strh	r2, [r3, #0]
				}
				else if(Inputchar == '3')
				{
					State = State_Square;
				}
				break;
 80012b0:	e3da      	b.n	8001a68 <main+0x8f0>
				else if(Inputchar == '2')
 80012b2:	4b66      	ldr	r3, [pc, #408]	; (800144c <main+0x2d4>)
 80012b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012b8:	2b32      	cmp	r3, #50	; 0x32
 80012ba:	d103      	bne.n	80012c4 <main+0x14c>
					State = State_Sine;
 80012bc:	4b64      	ldr	r3, [pc, #400]	; (8001450 <main+0x2d8>)
 80012be:	2209      	movs	r2, #9
 80012c0:	801a      	strh	r2, [r3, #0]
				break;
 80012c2:	e3d1      	b.n	8001a68 <main+0x8f0>
				else if(Inputchar == '3')
 80012c4:	4b61      	ldr	r3, [pc, #388]	; (800144c <main+0x2d4>)
 80012c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ca:	2b33      	cmp	r3, #51	; 0x33
 80012cc:	f040 83cc 	bne.w	8001a68 <main+0x8f0>
					State = State_Square;
 80012d0:	4b5f      	ldr	r3, [pc, #380]	; (8001450 <main+0x2d8>)
 80012d2:	2240      	movs	r2, #64	; 0x40
 80012d4:	801a      	strh	r2, [r3, #0]
				break;
 80012d6:	e3c7      	b.n	8001a68 <main+0x8f0>
			case State_Sawtooth: //Sawtooth menu
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu_Sawtooth, strlen(Menu_Sawtooth), 10);
 80012d8:	485f      	ldr	r0, [pc, #380]	; (8001458 <main+0x2e0>)
 80012da:	f7fe ff81 	bl	80001e0 <strlen>
 80012de:	4603      	mov	r3, r0
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	230a      	movs	r3, #10
 80012e4:	495c      	ldr	r1, [pc, #368]	; (8001458 <main+0x2e0>)
 80012e6:	4858      	ldr	r0, [pc, #352]	; (8001448 <main+0x2d0>)
 80012e8:	f004 fc51 	bl	8005b8e <HAL_UART_Transmit>
				State = State_Sawtooth_Menu;
 80012ec:	4b58      	ldr	r3, [pc, #352]	; (8001450 <main+0x2d8>)
 80012ee:	f240 32f2 	movw	r2, #1010	; 0x3f2
 80012f2:	801a      	strh	r2, [r3, #0]
				break;
 80012f4:	e3c7      	b.n	8001a86 <main+0x90e>
			case State_Sawtooth_Menu: //Sawtooth control
				Waveform = 1;
 80012f6:	4b59      	ldr	r3, [pc, #356]	; (800145c <main+0x2e4>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	601a      	str	r2, [r3, #0]
				if(Inputchar == 'a')
 80012fc:	4b53      	ldr	r3, [pc, #332]	; (800144c <main+0x2d4>)
 80012fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001302:	2b61      	cmp	r3, #97	; 0x61
 8001304:	d103      	bne.n	800130e <main+0x196>
				{
					State = State_Freq;
 8001306:	4b52      	ldr	r3, [pc, #328]	; (8001450 <main+0x2d8>)
 8001308:	2241      	movs	r2, #65	; 0x41
 800130a:	801a      	strh	r2, [r3, #0]
				}
				else if(Inputchar == 'x')
				{
					State = State_Start;
				}
				break;
 800130c:	e3ae      	b.n	8001a6c <main+0x8f4>
				else if(Inputchar == 's')
 800130e:	4b4f      	ldr	r3, [pc, #316]	; (800144c <main+0x2d4>)
 8001310:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001314:	2b73      	cmp	r3, #115	; 0x73
 8001316:	d103      	bne.n	8001320 <main+0x1a8>
					State = State_Volt;
 8001318:	4b4d      	ldr	r3, [pc, #308]	; (8001450 <main+0x2d8>)
 800131a:	2249      	movs	r2, #73	; 0x49
 800131c:	801a      	strh	r2, [r3, #0]
				break;
 800131e:	e3a5      	b.n	8001a6c <main+0x8f4>
				else if(Inputchar == 'd')
 8001320:	4b4a      	ldr	r3, [pc, #296]	; (800144c <main+0x2d4>)
 8001322:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001326:	2b64      	cmp	r3, #100	; 0x64
 8001328:	d103      	bne.n	8001332 <main+0x1ba>
					State = State_Slope;
 800132a:	4b49      	ldr	r3, [pc, #292]	; (8001450 <main+0x2d8>)
 800132c:	2248      	movs	r2, #72	; 0x48
 800132e:	801a      	strh	r2, [r3, #0]
				break;
 8001330:	e39c      	b.n	8001a6c <main+0x8f4>
				else if(Inputchar == 'x')
 8001332:	4b46      	ldr	r3, [pc, #280]	; (800144c <main+0x2d4>)
 8001334:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001338:	2b78      	cmp	r3, #120	; 0x78
 800133a:	f040 8397 	bne.w	8001a6c <main+0x8f4>
					State = State_Start;
 800133e:	4b44      	ldr	r3, [pc, #272]	; (8001450 <main+0x2d8>)
 8001340:	2200      	movs	r2, #0
 8001342:	801a      	strh	r2, [r3, #0]
				break;
 8001344:	e392      	b.n	8001a6c <main+0x8f4>
			case State_Sine: // Button menu
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu_Sine, strlen(Menu_Sine), 10);
 8001346:	4846      	ldr	r0, [pc, #280]	; (8001460 <main+0x2e8>)
 8001348:	f7fe ff4a 	bl	80001e0 <strlen>
 800134c:	4603      	mov	r3, r0
 800134e:	b29a      	uxth	r2, r3
 8001350:	230a      	movs	r3, #10
 8001352:	4943      	ldr	r1, [pc, #268]	; (8001460 <main+0x2e8>)
 8001354:	483c      	ldr	r0, [pc, #240]	; (8001448 <main+0x2d0>)
 8001356:	f004 fc1a 	bl	8005b8e <HAL_UART_Transmit>
				State = State_Sine_Menu;
 800135a:	4b3d      	ldr	r3, [pc, #244]	; (8001450 <main+0x2d8>)
 800135c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001360:	801a      	strh	r2, [r3, #0]
				break;
 8001362:	e390      	b.n	8001a86 <main+0x90e>
			case State_Sine_Menu: //Button status
				Waveform = 2;
 8001364:	4b3d      	ldr	r3, [pc, #244]	; (800145c <main+0x2e4>)
 8001366:	2202      	movs	r2, #2
 8001368:	601a      	str	r2, [r3, #0]
				if(Inputchar == 'a')
 800136a:	4b38      	ldr	r3, [pc, #224]	; (800144c <main+0x2d4>)
 800136c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001370:	2b61      	cmp	r3, #97	; 0x61
 8001372:	d103      	bne.n	800137c <main+0x204>
				{
					State = State_Freq;
 8001374:	4b36      	ldr	r3, [pc, #216]	; (8001450 <main+0x2d8>)
 8001376:	2241      	movs	r2, #65	; 0x41
 8001378:	801a      	strh	r2, [r3, #0]
				}
				else if(Inputchar == 'x')
				{
					State = State_Start;
				}
				break;
 800137a:	e379      	b.n	8001a70 <main+0x8f8>
				else if(Inputchar == 's')
 800137c:	4b33      	ldr	r3, [pc, #204]	; (800144c <main+0x2d4>)
 800137e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001382:	2b73      	cmp	r3, #115	; 0x73
 8001384:	d103      	bne.n	800138e <main+0x216>
					State = State_Volt;
 8001386:	4b32      	ldr	r3, [pc, #200]	; (8001450 <main+0x2d8>)
 8001388:	2249      	movs	r2, #73	; 0x49
 800138a:	801a      	strh	r2, [r3, #0]
				break;
 800138c:	e370      	b.n	8001a70 <main+0x8f8>
				else if(Inputchar == 'x')
 800138e:	4b2f      	ldr	r3, [pc, #188]	; (800144c <main+0x2d4>)
 8001390:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001394:	2b78      	cmp	r3, #120	; 0x78
 8001396:	f040 836b 	bne.w	8001a70 <main+0x8f8>
					State = State_Start;
 800139a:	4b2d      	ldr	r3, [pc, #180]	; (8001450 <main+0x2d8>)
 800139c:	2200      	movs	r2, #0
 800139e:	801a      	strh	r2, [r3, #0]
				break;
 80013a0:	e366      	b.n	8001a70 <main+0x8f8>
			case State_Square:
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu_Square, strlen(Menu_Square), 10);
 80013a2:	4830      	ldr	r0, [pc, #192]	; (8001464 <main+0x2ec>)
 80013a4:	f7fe ff1c 	bl	80001e0 <strlen>
 80013a8:	4603      	mov	r3, r0
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	230a      	movs	r3, #10
 80013ae:	492d      	ldr	r1, [pc, #180]	; (8001464 <main+0x2ec>)
 80013b0:	4825      	ldr	r0, [pc, #148]	; (8001448 <main+0x2d0>)
 80013b2:	f004 fbec 	bl	8005b8e <HAL_UART_Transmit>
				State = State_Square_Menu;
 80013b6:	4b26      	ldr	r3, [pc, #152]	; (8001450 <main+0x2d8>)
 80013b8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80013bc:	801a      	strh	r2, [r3, #0]
				break;
 80013be:	e362      	b.n	8001a86 <main+0x90e>
			case State_Square_Menu: //Button status
				Waveform = 3;
 80013c0:	4b26      	ldr	r3, [pc, #152]	; (800145c <main+0x2e4>)
 80013c2:	2203      	movs	r2, #3
 80013c4:	601a      	str	r2, [r3, #0]
				if(Inputchar == 'a')
 80013c6:	4b21      	ldr	r3, [pc, #132]	; (800144c <main+0x2d4>)
 80013c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013cc:	2b61      	cmp	r3, #97	; 0x61
 80013ce:	d103      	bne.n	80013d8 <main+0x260>
				{
					State = State_Freq;
 80013d0:	4b1f      	ldr	r3, [pc, #124]	; (8001450 <main+0x2d8>)
 80013d2:	2241      	movs	r2, #65	; 0x41
 80013d4:	801a      	strh	r2, [r3, #0]
				}
				else if(Inputchar == 'x')
				{
				State = State_Start;
				}
				break;
 80013d6:	e34d      	b.n	8001a74 <main+0x8fc>
				else if(Inputchar == 's')
 80013d8:	4b1c      	ldr	r3, [pc, #112]	; (800144c <main+0x2d4>)
 80013da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013de:	2b73      	cmp	r3, #115	; 0x73
 80013e0:	d103      	bne.n	80013ea <main+0x272>
					State = State_Volt;
 80013e2:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <main+0x2d8>)
 80013e4:	2249      	movs	r2, #73	; 0x49
 80013e6:	801a      	strh	r2, [r3, #0]
				break;
 80013e8:	e344      	b.n	8001a74 <main+0x8fc>
				else if(Inputchar == 'd')
 80013ea:	4b18      	ldr	r3, [pc, #96]	; (800144c <main+0x2d4>)
 80013ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f0:	2b64      	cmp	r3, #100	; 0x64
 80013f2:	d104      	bne.n	80013fe <main+0x286>
					State = State_Duty;
 80013f4:	4b16      	ldr	r3, [pc, #88]	; (8001450 <main+0x2d8>)
 80013f6:	f240 4256 	movw	r2, #1110	; 0x456
 80013fa:	801a      	strh	r2, [r3, #0]
				break;
 80013fc:	e33a      	b.n	8001a74 <main+0x8fc>
				else if(Inputchar == 'x')
 80013fe:	4b13      	ldr	r3, [pc, #76]	; (800144c <main+0x2d4>)
 8001400:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001404:	2b78      	cmp	r3, #120	; 0x78
 8001406:	f040 8335 	bne.w	8001a74 <main+0x8fc>
				State = State_Start;
 800140a:	4b11      	ldr	r3, [pc, #68]	; (8001450 <main+0x2d8>)
 800140c:	2200      	movs	r2, #0
 800140e:	801a      	strh	r2, [r3, #0]
				break;
 8001410:	e330      	b.n	8001a74 <main+0x8fc>
			case State_Freq:
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu_Freq, strlen(Menu_Freq), 10);
 8001412:	4815      	ldr	r0, [pc, #84]	; (8001468 <main+0x2f0>)
 8001414:	f7fe fee4 	bl	80001e0 <strlen>
 8001418:	4603      	mov	r3, r0
 800141a:	b29a      	uxth	r2, r3
 800141c:	230a      	movs	r3, #10
 800141e:	4912      	ldr	r1, [pc, #72]	; (8001468 <main+0x2f0>)
 8001420:	4809      	ldr	r0, [pc, #36]	; (8001448 <main+0x2d0>)
 8001422:	f004 fbb4 	bl	8005b8e <HAL_UART_Transmit>
				State = State_Freq_Menu;
 8001426:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <main+0x2d8>)
 8001428:	f240 32f3 	movw	r2, #1011	; 0x3f3
 800142c:	801a      	strh	r2, [r3, #0]
				break;
 800142e:	e32a      	b.n	8001a86 <main+0x90e>
 8001430:	20000450 	.word	0x20000450
 8001434:	20000590 	.word	0x20000590
 8001438:	200003b2 	.word	0x200003b2
 800143c:	200004e8 	.word	0x200004e8
 8001440:	40020000 	.word	0x40020000
 8001444:	2000036c 	.word	0x2000036c
 8001448:	200005d0 	.word	0x200005d0
 800144c:	2000038c 	.word	0x2000038c
 8001450:	200003b0 	.word	0x200003b0
 8001454:	20000010 	.word	0x20000010
 8001458:	20000044 	.word	0x20000044
 800145c:	20000390 	.word	0x20000390
 8001460:	20000070 	.word	0x20000070
 8001464:	20000090 	.word	0x20000090
 8001468:	200000bc 	.word	0x200000bc
			case State_Freq_Menu:
				if(Inputchar == 'a')
 800146c:	4ba4      	ldr	r3, [pc, #656]	; (8001700 <main+0x588>)
 800146e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001472:	2b61      	cmp	r3, #97	; 0x61
 8001474:	d13a      	bne.n	80014ec <main+0x374>
				{
					Wavefreq += 0.1;
 8001476:	4ba3      	ldr	r3, [pc, #652]	; (8001704 <main+0x58c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff f86c 	bl	8000558 <__aeabi_f2d>
 8001480:	a39b      	add	r3, pc, #620	; (adr r3, 80016f0 <main+0x578>)
 8001482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001486:	f7fe ff09 	bl	800029c <__adddf3>
 800148a:	4603      	mov	r3, r0
 800148c:	460c      	mov	r4, r1
 800148e:	4618      	mov	r0, r3
 8001490:	4621      	mov	r1, r4
 8001492:	f7ff fb91 	bl	8000bb8 <__aeabi_d2f>
 8001496:	4602      	mov	r2, r0
 8001498:	4b9a      	ldr	r3, [pc, #616]	; (8001704 <main+0x58c>)
 800149a:	601a      	str	r2, [r3, #0]
					if(Wavefreq > 10)
 800149c:	4b99      	ldr	r3, [pc, #612]	; (8001704 <main+0x58c>)
 800149e:	edd3 7a00 	vldr	s15, [r3]
 80014a2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80014a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ae:	dd02      	ble.n	80014b6 <main+0x33e>
					{
						Wavefreq = 10;
 80014b0:	4b94      	ldr	r3, [pc, #592]	; (8001704 <main+0x58c>)
 80014b2:	4a95      	ldr	r2, [pc, #596]	; (8001708 <main+0x590>)
 80014b4:	601a      	str	r2, [r3, #0]
					}
					sprintf(Wave_Freq,"Frequency: %f\r\n",Wavefreq);
 80014b6:	4b93      	ldr	r3, [pc, #588]	; (8001704 <main+0x58c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff f84c 	bl	8000558 <__aeabi_f2d>
 80014c0:	4603      	mov	r3, r0
 80014c2:	460c      	mov	r4, r1
 80014c4:	461a      	mov	r2, r3
 80014c6:	4623      	mov	r3, r4
 80014c8:	4990      	ldr	r1, [pc, #576]	; (800170c <main+0x594>)
 80014ca:	4891      	ldr	r0, [pc, #580]	; (8001710 <main+0x598>)
 80014cc:	f005 fee2 	bl	8007294 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Wave_Freq, strlen(Wave_Freq), 10);
 80014d0:	488f      	ldr	r0, [pc, #572]	; (8001710 <main+0x598>)
 80014d2:	f7fe fe85 	bl	80001e0 <strlen>
 80014d6:	4603      	mov	r3, r0
 80014d8:	b29a      	uxth	r2, r3
 80014da:	230a      	movs	r3, #10
 80014dc:	498c      	ldr	r1, [pc, #560]	; (8001710 <main+0x598>)
 80014de:	488d      	ldr	r0, [pc, #564]	; (8001714 <main+0x59c>)
 80014e0:	f004 fb55 	bl	8005b8e <HAL_UART_Transmit>
					State = State_Freq;
 80014e4:	4b8c      	ldr	r3, [pc, #560]	; (8001718 <main+0x5a0>)
 80014e6:	2241      	movs	r2, #65	; 0x41
 80014e8:	801a      	strh	r2, [r3, #0]
					else if(Waveform == 3)
					{
						State = State_Square;
					}
				}
				break;
 80014ea:	e2c5      	b.n	8001a78 <main+0x900>
				else if(Inputchar == 's')
 80014ec:	4b84      	ldr	r3, [pc, #528]	; (8001700 <main+0x588>)
 80014ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f2:	2b73      	cmp	r3, #115	; 0x73
 80014f4:	d139      	bne.n	800156a <main+0x3f2>
					Wavefreq -= 0.1;
 80014f6:	4b83      	ldr	r3, [pc, #524]	; (8001704 <main+0x58c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff f82c 	bl	8000558 <__aeabi_f2d>
 8001500:	a37b      	add	r3, pc, #492	; (adr r3, 80016f0 <main+0x578>)
 8001502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001506:	f7fe fec7 	bl	8000298 <__aeabi_dsub>
 800150a:	4603      	mov	r3, r0
 800150c:	460c      	mov	r4, r1
 800150e:	4618      	mov	r0, r3
 8001510:	4621      	mov	r1, r4
 8001512:	f7ff fb51 	bl	8000bb8 <__aeabi_d2f>
 8001516:	4602      	mov	r2, r0
 8001518:	4b7a      	ldr	r3, [pc, #488]	; (8001704 <main+0x58c>)
 800151a:	601a      	str	r2, [r3, #0]
					if(Wavefreq <= 0)
 800151c:	4b79      	ldr	r3, [pc, #484]	; (8001704 <main+0x58c>)
 800151e:	edd3 7a00 	vldr	s15, [r3]
 8001522:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152a:	d803      	bhi.n	8001534 <main+0x3bc>
						Wavefreq = 0;
 800152c:	4b75      	ldr	r3, [pc, #468]	; (8001704 <main+0x58c>)
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
					sprintf(Wave_Freq,"Frequency: %f\r\n",Wavefreq);
 8001534:	4b73      	ldr	r3, [pc, #460]	; (8001704 <main+0x58c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff f80d 	bl	8000558 <__aeabi_f2d>
 800153e:	4603      	mov	r3, r0
 8001540:	460c      	mov	r4, r1
 8001542:	461a      	mov	r2, r3
 8001544:	4623      	mov	r3, r4
 8001546:	4971      	ldr	r1, [pc, #452]	; (800170c <main+0x594>)
 8001548:	4871      	ldr	r0, [pc, #452]	; (8001710 <main+0x598>)
 800154a:	f005 fea3 	bl	8007294 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Wave_Freq, strlen(Wave_Freq), 10);
 800154e:	4870      	ldr	r0, [pc, #448]	; (8001710 <main+0x598>)
 8001550:	f7fe fe46 	bl	80001e0 <strlen>
 8001554:	4603      	mov	r3, r0
 8001556:	b29a      	uxth	r2, r3
 8001558:	230a      	movs	r3, #10
 800155a:	496d      	ldr	r1, [pc, #436]	; (8001710 <main+0x598>)
 800155c:	486d      	ldr	r0, [pc, #436]	; (8001714 <main+0x59c>)
 800155e:	f004 fb16 	bl	8005b8e <HAL_UART_Transmit>
					State = State_Freq;
 8001562:	4b6d      	ldr	r3, [pc, #436]	; (8001718 <main+0x5a0>)
 8001564:	2241      	movs	r2, #65	; 0x41
 8001566:	801a      	strh	r2, [r3, #0]
				break;
 8001568:	e286      	b.n	8001a78 <main+0x900>
				else if(Inputchar == 'x')
 800156a:	4b65      	ldr	r3, [pc, #404]	; (8001700 <main+0x588>)
 800156c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001570:	2b78      	cmp	r3, #120	; 0x78
 8001572:	f040 8281 	bne.w	8001a78 <main+0x900>
					if(Waveform == 1)
 8001576:	4b69      	ldr	r3, [pc, #420]	; (800171c <main+0x5a4>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d103      	bne.n	8001586 <main+0x40e>
						State = State_Sawtooth;
 800157e:	4b66      	ldr	r3, [pc, #408]	; (8001718 <main+0x5a0>)
 8001580:	2208      	movs	r2, #8
 8001582:	801a      	strh	r2, [r3, #0]
				break;
 8001584:	e278      	b.n	8001a78 <main+0x900>
					else if(Waveform == 2)
 8001586:	4b65      	ldr	r3, [pc, #404]	; (800171c <main+0x5a4>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2b02      	cmp	r3, #2
 800158c:	d103      	bne.n	8001596 <main+0x41e>
						State = State_Sine;
 800158e:	4b62      	ldr	r3, [pc, #392]	; (8001718 <main+0x5a0>)
 8001590:	2209      	movs	r2, #9
 8001592:	801a      	strh	r2, [r3, #0]
				break;
 8001594:	e270      	b.n	8001a78 <main+0x900>
					else if(Waveform == 3)
 8001596:	4b61      	ldr	r3, [pc, #388]	; (800171c <main+0x5a4>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b03      	cmp	r3, #3
 800159c:	f040 826c 	bne.w	8001a78 <main+0x900>
						State = State_Square;
 80015a0:	4b5d      	ldr	r3, [pc, #372]	; (8001718 <main+0x5a0>)
 80015a2:	2240      	movs	r2, #64	; 0x40
 80015a4:	801a      	strh	r2, [r3, #0]
				break;
 80015a6:	e267      	b.n	8001a78 <main+0x900>
			case State_Volt:
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu_Volt, strlen(Menu_Volt), 10);
 80015a8:	485d      	ldr	r0, [pc, #372]	; (8001720 <main+0x5a8>)
 80015aa:	f7fe fe19 	bl	80001e0 <strlen>
 80015ae:	4603      	mov	r3, r0
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	230a      	movs	r3, #10
 80015b4:	495a      	ldr	r1, [pc, #360]	; (8001720 <main+0x5a8>)
 80015b6:	4857      	ldr	r0, [pc, #348]	; (8001714 <main+0x59c>)
 80015b8:	f004 fae9 	bl	8005b8e <HAL_UART_Transmit>
				State = State_Volt_Menu;
 80015bc:	4b56      	ldr	r3, [pc, #344]	; (8001718 <main+0x5a0>)
 80015be:	f240 4257 	movw	r2, #1111	; 0x457
 80015c2:	801a      	strh	r2, [r3, #0]
				break;
 80015c4:	e25f      	b.n	8001a86 <main+0x90e>
			case State_Volt_Menu:
				if(Inputchar == 'a')
 80015c6:	4b4e      	ldr	r3, [pc, #312]	; (8001700 <main+0x588>)
 80015c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015cc:	2b61      	cmp	r3, #97	; 0x61
 80015ce:	d146      	bne.n	800165e <main+0x4e6>
				{
					Wavehighvolt += 0.1;
 80015d0:	4b54      	ldr	r3, [pc, #336]	; (8001724 <main+0x5ac>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe ffbf 	bl	8000558 <__aeabi_f2d>
 80015da:	a345      	add	r3, pc, #276	; (adr r3, 80016f0 <main+0x578>)
 80015dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e0:	f7fe fe5c 	bl	800029c <__adddf3>
 80015e4:	4603      	mov	r3, r0
 80015e6:	460c      	mov	r4, r1
 80015e8:	4618      	mov	r0, r3
 80015ea:	4621      	mov	r1, r4
 80015ec:	f7ff fae4 	bl	8000bb8 <__aeabi_d2f>
 80015f0:	4602      	mov	r2, r0
 80015f2:	4b4c      	ldr	r3, [pc, #304]	; (8001724 <main+0x5ac>)
 80015f4:	601a      	str	r2, [r3, #0]
					if(Wavehighvolt > 3.3)
 80015f6:	4b4b      	ldr	r3, [pc, #300]	; (8001724 <main+0x5ac>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe ffac 	bl	8000558 <__aeabi_f2d>
 8001600:	a33d      	add	r3, pc, #244	; (adr r3, 80016f8 <main+0x580>)
 8001602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001606:	f7ff fa8f 	bl	8000b28 <__aeabi_dcmpgt>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d002      	beq.n	8001616 <main+0x49e>
					{
						Wavehighvolt = 3.3;
 8001610:	4b44      	ldr	r3, [pc, #272]	; (8001724 <main+0x5ac>)
 8001612:	4a45      	ldr	r2, [pc, #276]	; (8001728 <main+0x5b0>)
 8001614:	601a      	str	r2, [r3, #0]
					}
					sprintf(Wave_Volt,"Hvolt:%fV | Lvolt:%fV\r\n",Wavehighvolt,Wavelowvolt);
 8001616:	4b43      	ldr	r3, [pc, #268]	; (8001724 <main+0x5ac>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe ff9c 	bl	8000558 <__aeabi_f2d>
 8001620:	4605      	mov	r5, r0
 8001622:	460e      	mov	r6, r1
 8001624:	4b41      	ldr	r3, [pc, #260]	; (800172c <main+0x5b4>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f7fe ff95 	bl	8000558 <__aeabi_f2d>
 800162e:	4603      	mov	r3, r0
 8001630:	460c      	mov	r4, r1
 8001632:	e9cd 3400 	strd	r3, r4, [sp]
 8001636:	462a      	mov	r2, r5
 8001638:	4633      	mov	r3, r6
 800163a:	493d      	ldr	r1, [pc, #244]	; (8001730 <main+0x5b8>)
 800163c:	483d      	ldr	r0, [pc, #244]	; (8001734 <main+0x5bc>)
 800163e:	f005 fe29 	bl	8007294 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Wave_Volt, strlen(Wave_Volt), 10);
 8001642:	483c      	ldr	r0, [pc, #240]	; (8001734 <main+0x5bc>)
 8001644:	f7fe fdcc 	bl	80001e0 <strlen>
 8001648:	4603      	mov	r3, r0
 800164a:	b29a      	uxth	r2, r3
 800164c:	230a      	movs	r3, #10
 800164e:	4939      	ldr	r1, [pc, #228]	; (8001734 <main+0x5bc>)
 8001650:	4830      	ldr	r0, [pc, #192]	; (8001714 <main+0x59c>)
 8001652:	f004 fa9c 	bl	8005b8e <HAL_UART_Transmit>
					State = State_Volt;
 8001656:	4b30      	ldr	r3, [pc, #192]	; (8001718 <main+0x5a0>)
 8001658:	2249      	movs	r2, #73	; 0x49
 800165a:	801a      	strh	r2, [r3, #0]
					else if(Waveform == 3)
					{
						State = State_Square;
					}
				}
				break;
 800165c:	e20e      	b.n	8001a7c <main+0x904>
				else if(Inputchar == 's')
 800165e:	4b28      	ldr	r3, [pc, #160]	; (8001700 <main+0x588>)
 8001660:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001664:	2b73      	cmp	r3, #115	; 0x73
 8001666:	d167      	bne.n	8001738 <main+0x5c0>
					Wavehighvolt -= 0.1;
 8001668:	4b2e      	ldr	r3, [pc, #184]	; (8001724 <main+0x5ac>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f7fe ff73 	bl	8000558 <__aeabi_f2d>
 8001672:	a31f      	add	r3, pc, #124	; (adr r3, 80016f0 <main+0x578>)
 8001674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001678:	f7fe fe0e 	bl	8000298 <__aeabi_dsub>
 800167c:	4603      	mov	r3, r0
 800167e:	460c      	mov	r4, r1
 8001680:	4618      	mov	r0, r3
 8001682:	4621      	mov	r1, r4
 8001684:	f7ff fa98 	bl	8000bb8 <__aeabi_d2f>
 8001688:	4602      	mov	r2, r0
 800168a:	4b26      	ldr	r3, [pc, #152]	; (8001724 <main+0x5ac>)
 800168c:	601a      	str	r2, [r3, #0]
					if(Wavehighvolt <= 0)
 800168e:	4b25      	ldr	r3, [pc, #148]	; (8001724 <main+0x5ac>)
 8001690:	edd3 7a00 	vldr	s15, [r3]
 8001694:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800169c:	d803      	bhi.n	80016a6 <main+0x52e>
						Wavehighvolt = 0;
 800169e:	4b21      	ldr	r3, [pc, #132]	; (8001724 <main+0x5ac>)
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
					sprintf(Wave_Volt,"Hvolt:%fV | Lvolt:%fV\r\n",Wavehighvolt,Wavelowvolt);
 80016a6:	4b1f      	ldr	r3, [pc, #124]	; (8001724 <main+0x5ac>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe ff54 	bl	8000558 <__aeabi_f2d>
 80016b0:	4605      	mov	r5, r0
 80016b2:	460e      	mov	r6, r1
 80016b4:	4b1d      	ldr	r3, [pc, #116]	; (800172c <main+0x5b4>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe ff4d 	bl	8000558 <__aeabi_f2d>
 80016be:	4603      	mov	r3, r0
 80016c0:	460c      	mov	r4, r1
 80016c2:	e9cd 3400 	strd	r3, r4, [sp]
 80016c6:	462a      	mov	r2, r5
 80016c8:	4633      	mov	r3, r6
 80016ca:	4919      	ldr	r1, [pc, #100]	; (8001730 <main+0x5b8>)
 80016cc:	4819      	ldr	r0, [pc, #100]	; (8001734 <main+0x5bc>)
 80016ce:	f005 fde1 	bl	8007294 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Wave_Volt, strlen(Wave_Volt), 10);
 80016d2:	4818      	ldr	r0, [pc, #96]	; (8001734 <main+0x5bc>)
 80016d4:	f7fe fd84 	bl	80001e0 <strlen>
 80016d8:	4603      	mov	r3, r0
 80016da:	b29a      	uxth	r2, r3
 80016dc:	230a      	movs	r3, #10
 80016de:	4915      	ldr	r1, [pc, #84]	; (8001734 <main+0x5bc>)
 80016e0:	480c      	ldr	r0, [pc, #48]	; (8001714 <main+0x59c>)
 80016e2:	f004 fa54 	bl	8005b8e <HAL_UART_Transmit>
					State = State_Volt;
 80016e6:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <main+0x5a0>)
 80016e8:	2249      	movs	r2, #73	; 0x49
 80016ea:	801a      	strh	r2, [r3, #0]
				break;
 80016ec:	e1c6      	b.n	8001a7c <main+0x904>
 80016ee:	bf00      	nop
 80016f0:	9999999a 	.word	0x9999999a
 80016f4:	3fb99999 	.word	0x3fb99999
 80016f8:	66666666 	.word	0x66666666
 80016fc:	400a6666 	.word	0x400a6666
 8001700:	2000038c 	.word	0x2000038c
 8001704:	20000000 	.word	0x20000000
 8001708:	41200000 	.word	0x41200000
 800170c:	08009a98 	.word	0x08009a98
 8001710:	200003c4 	.word	0x200003c4
 8001714:	200005d0 	.word	0x200005d0
 8001718:	200003b0 	.word	0x200003b0
 800171c:	20000390 	.word	0x20000390
 8001720:	200000dc 	.word	0x200000dc
 8001724:	20000004 	.word	0x20000004
 8001728:	40533333 	.word	0x40533333
 800172c:	20000394 	.word	0x20000394
 8001730:	08009aa8 	.word	0x08009aa8
 8001734:	200003d8 	.word	0x200003d8
				else if(Inputchar == 'd')
 8001738:	4ba1      	ldr	r3, [pc, #644]	; (80019c0 <main+0x848>)
 800173a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800173e:	2b64      	cmp	r3, #100	; 0x64
 8001740:	d146      	bne.n	80017d0 <main+0x658>
					Wavelowvolt += 0.1;
 8001742:	4ba0      	ldr	r3, [pc, #640]	; (80019c4 <main+0x84c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe ff06 	bl	8000558 <__aeabi_f2d>
 800174c:	a398      	add	r3, pc, #608	; (adr r3, 80019b0 <main+0x838>)
 800174e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001752:	f7fe fda3 	bl	800029c <__adddf3>
 8001756:	4603      	mov	r3, r0
 8001758:	460c      	mov	r4, r1
 800175a:	4618      	mov	r0, r3
 800175c:	4621      	mov	r1, r4
 800175e:	f7ff fa2b 	bl	8000bb8 <__aeabi_d2f>
 8001762:	4602      	mov	r2, r0
 8001764:	4b97      	ldr	r3, [pc, #604]	; (80019c4 <main+0x84c>)
 8001766:	601a      	str	r2, [r3, #0]
					if(Wavelowvolt > 3.3)
 8001768:	4b96      	ldr	r3, [pc, #600]	; (80019c4 <main+0x84c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f7fe fef3 	bl	8000558 <__aeabi_f2d>
 8001772:	a391      	add	r3, pc, #580	; (adr r3, 80019b8 <main+0x840>)
 8001774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001778:	f7ff f9d6 	bl	8000b28 <__aeabi_dcmpgt>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d002      	beq.n	8001788 <main+0x610>
						Wavelowvolt = 3.3;
 8001782:	4b90      	ldr	r3, [pc, #576]	; (80019c4 <main+0x84c>)
 8001784:	4a90      	ldr	r2, [pc, #576]	; (80019c8 <main+0x850>)
 8001786:	601a      	str	r2, [r3, #0]
					sprintf(Wave_Volt,"Hvolt:%fV | Lvolt:%fV\r\n",Wavehighvolt,Wavelowvolt);
 8001788:	4b90      	ldr	r3, [pc, #576]	; (80019cc <main+0x854>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe fee3 	bl	8000558 <__aeabi_f2d>
 8001792:	4605      	mov	r5, r0
 8001794:	460e      	mov	r6, r1
 8001796:	4b8b      	ldr	r3, [pc, #556]	; (80019c4 <main+0x84c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f7fe fedc 	bl	8000558 <__aeabi_f2d>
 80017a0:	4603      	mov	r3, r0
 80017a2:	460c      	mov	r4, r1
 80017a4:	e9cd 3400 	strd	r3, r4, [sp]
 80017a8:	462a      	mov	r2, r5
 80017aa:	4633      	mov	r3, r6
 80017ac:	4988      	ldr	r1, [pc, #544]	; (80019d0 <main+0x858>)
 80017ae:	4889      	ldr	r0, [pc, #548]	; (80019d4 <main+0x85c>)
 80017b0:	f005 fd70 	bl	8007294 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Wave_Volt, strlen(Wave_Volt), 10);
 80017b4:	4887      	ldr	r0, [pc, #540]	; (80019d4 <main+0x85c>)
 80017b6:	f7fe fd13 	bl	80001e0 <strlen>
 80017ba:	4603      	mov	r3, r0
 80017bc:	b29a      	uxth	r2, r3
 80017be:	230a      	movs	r3, #10
 80017c0:	4984      	ldr	r1, [pc, #528]	; (80019d4 <main+0x85c>)
 80017c2:	4885      	ldr	r0, [pc, #532]	; (80019d8 <main+0x860>)
 80017c4:	f004 f9e3 	bl	8005b8e <HAL_UART_Transmit>
					State = State_Volt;
 80017c8:	4b84      	ldr	r3, [pc, #528]	; (80019dc <main+0x864>)
 80017ca:	2249      	movs	r2, #73	; 0x49
 80017cc:	801a      	strh	r2, [r3, #0]
				break;
 80017ce:	e155      	b.n	8001a7c <main+0x904>
				else if(Inputchar == 'f')
 80017d0:	4b7b      	ldr	r3, [pc, #492]	; (80019c0 <main+0x848>)
 80017d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017d6:	2b66      	cmp	r3, #102	; 0x66
 80017d8:	d142      	bne.n	8001860 <main+0x6e8>
					Wavelowvolt -= 0.1;
 80017da:	4b7a      	ldr	r3, [pc, #488]	; (80019c4 <main+0x84c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7fe feba 	bl	8000558 <__aeabi_f2d>
 80017e4:	a372      	add	r3, pc, #456	; (adr r3, 80019b0 <main+0x838>)
 80017e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ea:	f7fe fd55 	bl	8000298 <__aeabi_dsub>
 80017ee:	4603      	mov	r3, r0
 80017f0:	460c      	mov	r4, r1
 80017f2:	4618      	mov	r0, r3
 80017f4:	4621      	mov	r1, r4
 80017f6:	f7ff f9df 	bl	8000bb8 <__aeabi_d2f>
 80017fa:	4602      	mov	r2, r0
 80017fc:	4b71      	ldr	r3, [pc, #452]	; (80019c4 <main+0x84c>)
 80017fe:	601a      	str	r2, [r3, #0]
					if(Wavelowvolt <= 0)
 8001800:	4b70      	ldr	r3, [pc, #448]	; (80019c4 <main+0x84c>)
 8001802:	edd3 7a00 	vldr	s15, [r3]
 8001806:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800180a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180e:	d803      	bhi.n	8001818 <main+0x6a0>
						Wavelowvolt = 0;
 8001810:	4b6c      	ldr	r3, [pc, #432]	; (80019c4 <main+0x84c>)
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
					sprintf(Wave_Volt,"Hvolt:%fV | Lvolt:%fV\r\n",Wavehighvolt,Wavelowvolt);
 8001818:	4b6c      	ldr	r3, [pc, #432]	; (80019cc <main+0x854>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe fe9b 	bl	8000558 <__aeabi_f2d>
 8001822:	4605      	mov	r5, r0
 8001824:	460e      	mov	r6, r1
 8001826:	4b67      	ldr	r3, [pc, #412]	; (80019c4 <main+0x84c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f7fe fe94 	bl	8000558 <__aeabi_f2d>
 8001830:	4603      	mov	r3, r0
 8001832:	460c      	mov	r4, r1
 8001834:	e9cd 3400 	strd	r3, r4, [sp]
 8001838:	462a      	mov	r2, r5
 800183a:	4633      	mov	r3, r6
 800183c:	4964      	ldr	r1, [pc, #400]	; (80019d0 <main+0x858>)
 800183e:	4865      	ldr	r0, [pc, #404]	; (80019d4 <main+0x85c>)
 8001840:	f005 fd28 	bl	8007294 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Wave_Volt, strlen(Wave_Volt), 10);
 8001844:	4863      	ldr	r0, [pc, #396]	; (80019d4 <main+0x85c>)
 8001846:	f7fe fccb 	bl	80001e0 <strlen>
 800184a:	4603      	mov	r3, r0
 800184c:	b29a      	uxth	r2, r3
 800184e:	230a      	movs	r3, #10
 8001850:	4960      	ldr	r1, [pc, #384]	; (80019d4 <main+0x85c>)
 8001852:	4861      	ldr	r0, [pc, #388]	; (80019d8 <main+0x860>)
 8001854:	f004 f99b 	bl	8005b8e <HAL_UART_Transmit>
					State = State_Volt;
 8001858:	4b60      	ldr	r3, [pc, #384]	; (80019dc <main+0x864>)
 800185a:	2249      	movs	r2, #73	; 0x49
 800185c:	801a      	strh	r2, [r3, #0]
				break;
 800185e:	e10d      	b.n	8001a7c <main+0x904>
				else if(Inputchar == 'x')
 8001860:	4b57      	ldr	r3, [pc, #348]	; (80019c0 <main+0x848>)
 8001862:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001866:	2b78      	cmp	r3, #120	; 0x78
 8001868:	f040 8108 	bne.w	8001a7c <main+0x904>
					if(Waveform == 1)
 800186c:	4b5c      	ldr	r3, [pc, #368]	; (80019e0 <main+0x868>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d103      	bne.n	800187c <main+0x704>
						State = State_Sawtooth;
 8001874:	4b59      	ldr	r3, [pc, #356]	; (80019dc <main+0x864>)
 8001876:	2208      	movs	r2, #8
 8001878:	801a      	strh	r2, [r3, #0]
				break;
 800187a:	e0ff      	b.n	8001a7c <main+0x904>
					else if(Waveform == 2)
 800187c:	4b58      	ldr	r3, [pc, #352]	; (80019e0 <main+0x868>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b02      	cmp	r3, #2
 8001882:	d103      	bne.n	800188c <main+0x714>
						State = State_Sine;
 8001884:	4b55      	ldr	r3, [pc, #340]	; (80019dc <main+0x864>)
 8001886:	2209      	movs	r2, #9
 8001888:	801a      	strh	r2, [r3, #0]
				break;
 800188a:	e0f7      	b.n	8001a7c <main+0x904>
					else if(Waveform == 3)
 800188c:	4b54      	ldr	r3, [pc, #336]	; (80019e0 <main+0x868>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b03      	cmp	r3, #3
 8001892:	f040 80f3 	bne.w	8001a7c <main+0x904>
						State = State_Square;
 8001896:	4b51      	ldr	r3, [pc, #324]	; (80019dc <main+0x864>)
 8001898:	2240      	movs	r2, #64	; 0x40
 800189a:	801a      	strh	r2, [r3, #0]
				break;
 800189c:	e0ee      	b.n	8001a7c <main+0x904>
			case State_Slope:
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu_Slope, strlen(Menu_Slope), 10);
 800189e:	4851      	ldr	r0, [pc, #324]	; (80019e4 <main+0x86c>)
 80018a0:	f7fe fc9e 	bl	80001e0 <strlen>
 80018a4:	4603      	mov	r3, r0
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	230a      	movs	r3, #10
 80018aa:	494e      	ldr	r1, [pc, #312]	; (80019e4 <main+0x86c>)
 80018ac:	484a      	ldr	r0, [pc, #296]	; (80019d8 <main+0x860>)
 80018ae:	f004 f96e 	bl	8005b8e <HAL_UART_Transmit>
				State = State_Slope_Menu;
 80018b2:	4b4a      	ldr	r3, [pc, #296]	; (80019dc <main+0x864>)
 80018b4:	f240 424d 	movw	r2, #1101	; 0x44d
 80018b8:	801a      	strh	r2, [r3, #0]
				break;
 80018ba:	e0e4      	b.n	8001a86 <main+0x90e>
			case State_Slope_Menu:
				if(Inputchar == 'a')
 80018bc:	4b40      	ldr	r3, [pc, #256]	; (80019c0 <main+0x848>)
 80018be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018c2:	2b61      	cmp	r3, #97	; 0x61
 80018c4:	d118      	bne.n	80018f8 <main+0x780>
				{
					slope = 0;
 80018c6:	4b48      	ldr	r3, [pc, #288]	; (80019e8 <main+0x870>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
					sprintf(Wave_Slope,"Slope Up\r\n");
 80018cc:	4b47      	ldr	r3, [pc, #284]	; (80019ec <main+0x874>)
 80018ce:	4a48      	ldr	r2, [pc, #288]	; (80019f0 <main+0x878>)
 80018d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80018d2:	c303      	stmia	r3!, {r0, r1}
 80018d4:	801a      	strh	r2, [r3, #0]
 80018d6:	3302      	adds	r3, #2
 80018d8:	0c12      	lsrs	r2, r2, #16
 80018da:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)Wave_Slope, strlen(Wave_Slope), 10);
 80018dc:	4843      	ldr	r0, [pc, #268]	; (80019ec <main+0x874>)
 80018de:	f7fe fc7f 	bl	80001e0 <strlen>
 80018e2:	4603      	mov	r3, r0
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	230a      	movs	r3, #10
 80018e8:	4940      	ldr	r1, [pc, #256]	; (80019ec <main+0x874>)
 80018ea:	483b      	ldr	r0, [pc, #236]	; (80019d8 <main+0x860>)
 80018ec:	f004 f94f 	bl	8005b8e <HAL_UART_Transmit>
					State = State_Slope;
 80018f0:	4b3a      	ldr	r3, [pc, #232]	; (80019dc <main+0x864>)
 80018f2:	2248      	movs	r2, #72	; 0x48
 80018f4:	801a      	strh	r2, [r3, #0]
				}
				else if(Inputchar == 'x')
				{
					State = State_Sawtooth;
				}
				break;
 80018f6:	e0c3      	b.n	8001a80 <main+0x908>
				else if(Inputchar == 's')
 80018f8:	4b31      	ldr	r3, [pc, #196]	; (80019c0 <main+0x848>)
 80018fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018fe:	2b73      	cmp	r3, #115	; 0x73
 8001900:	d116      	bne.n	8001930 <main+0x7b8>
					slope = 1;
 8001902:	4b39      	ldr	r3, [pc, #228]	; (80019e8 <main+0x870>)
 8001904:	2201      	movs	r2, #1
 8001906:	601a      	str	r2, [r3, #0]
					sprintf(Wave_Slope,"Slope Down\r\n");
 8001908:	4a38      	ldr	r2, [pc, #224]	; (80019ec <main+0x874>)
 800190a:	4b3a      	ldr	r3, [pc, #232]	; (80019f4 <main+0x87c>)
 800190c:	4614      	mov	r4, r2
 800190e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001910:	c407      	stmia	r4!, {r0, r1, r2}
 8001912:	7023      	strb	r3, [r4, #0]
					HAL_UART_Transmit(&huart2, (uint8_t*)Wave_Slope, strlen(Wave_Slope), 10);
 8001914:	4835      	ldr	r0, [pc, #212]	; (80019ec <main+0x874>)
 8001916:	f7fe fc63 	bl	80001e0 <strlen>
 800191a:	4603      	mov	r3, r0
 800191c:	b29a      	uxth	r2, r3
 800191e:	230a      	movs	r3, #10
 8001920:	4932      	ldr	r1, [pc, #200]	; (80019ec <main+0x874>)
 8001922:	482d      	ldr	r0, [pc, #180]	; (80019d8 <main+0x860>)
 8001924:	f004 f933 	bl	8005b8e <HAL_UART_Transmit>
					State = State_Slope;
 8001928:	4b2c      	ldr	r3, [pc, #176]	; (80019dc <main+0x864>)
 800192a:	2248      	movs	r2, #72	; 0x48
 800192c:	801a      	strh	r2, [r3, #0]
				break;
 800192e:	e0a7      	b.n	8001a80 <main+0x908>
				else if(Inputchar == 'x')
 8001930:	4b23      	ldr	r3, [pc, #140]	; (80019c0 <main+0x848>)
 8001932:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001936:	2b78      	cmp	r3, #120	; 0x78
 8001938:	f040 80a2 	bne.w	8001a80 <main+0x908>
					State = State_Sawtooth;
 800193c:	4b27      	ldr	r3, [pc, #156]	; (80019dc <main+0x864>)
 800193e:	2208      	movs	r2, #8
 8001940:	801a      	strh	r2, [r3, #0]
				break;
 8001942:	e09d      	b.n	8001a80 <main+0x908>
			case State_Duty:
				HAL_UART_Transmit(&huart2, (uint8_t*)Menu_Duty, strlen(Menu_Duty), 10);
 8001944:	482c      	ldr	r0, [pc, #176]	; (80019f8 <main+0x880>)
 8001946:	f7fe fc4b 	bl	80001e0 <strlen>
 800194a:	4603      	mov	r3, r0
 800194c:	b29a      	uxth	r2, r3
 800194e:	230a      	movs	r3, #10
 8001950:	4929      	ldr	r1, [pc, #164]	; (80019f8 <main+0x880>)
 8001952:	4821      	ldr	r0, [pc, #132]	; (80019d8 <main+0x860>)
 8001954:	f004 f91b 	bl	8005b8e <HAL_UART_Transmit>
				State = State_Duty_Menu;
 8001958:	4b20      	ldr	r3, [pc, #128]	; (80019dc <main+0x864>)
 800195a:	f240 424c 	movw	r2, #1100	; 0x44c
 800195e:	801a      	strh	r2, [r3, #0]
				break;
 8001960:	e091      	b.n	8001a86 <main+0x90e>
			case State_Duty_Menu:
				if(Inputchar == 'a')
 8001962:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <main+0x848>)
 8001964:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001968:	2b61      	cmp	r3, #97	; 0x61
 800196a:	d14d      	bne.n	8001a08 <main+0x890>
				{
					Waveduty += 10;
 800196c:	4b23      	ldr	r3, [pc, #140]	; (80019fc <main+0x884>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	330a      	adds	r3, #10
 8001972:	4a22      	ldr	r2, [pc, #136]	; (80019fc <main+0x884>)
 8001974:	6013      	str	r3, [r2, #0]
					if(Waveduty > 100)
 8001976:	4b21      	ldr	r3, [pc, #132]	; (80019fc <main+0x884>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2b64      	cmp	r3, #100	; 0x64
 800197c:	dd02      	ble.n	8001984 <main+0x80c>
					{
						Waveduty = 100;
 800197e:	4b1f      	ldr	r3, [pc, #124]	; (80019fc <main+0x884>)
 8001980:	2264      	movs	r2, #100	; 0x64
 8001982:	601a      	str	r2, [r3, #0]
					}
					sprintf(Wave_Duty,"Duty Cycle:%d % \r\n",Waveduty);
 8001984:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <main+0x884>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	491d      	ldr	r1, [pc, #116]	; (8001a00 <main+0x888>)
 800198c:	481d      	ldr	r0, [pc, #116]	; (8001a04 <main+0x88c>)
 800198e:	f005 fc81 	bl	8007294 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Wave_Duty, strlen(Wave_Duty), 10);
 8001992:	481c      	ldr	r0, [pc, #112]	; (8001a04 <main+0x88c>)
 8001994:	f7fe fc24 	bl	80001e0 <strlen>
 8001998:	4603      	mov	r3, r0
 800199a:	b29a      	uxth	r2, r3
 800199c:	230a      	movs	r3, #10
 800199e:	4919      	ldr	r1, [pc, #100]	; (8001a04 <main+0x88c>)
 80019a0:	480d      	ldr	r0, [pc, #52]	; (80019d8 <main+0x860>)
 80019a2:	f004 f8f4 	bl	8005b8e <HAL_UART_Transmit>
					State = State_Duty;
 80019a6:	4b0d      	ldr	r3, [pc, #52]	; (80019dc <main+0x864>)
 80019a8:	f240 4256 	movw	r2, #1110	; 0x456
 80019ac:	801a      	strh	r2, [r3, #0]
					}
				else if(Inputchar == 'x')
				{
					State = State_Square;
				}
				break;
 80019ae:	e069      	b.n	8001a84 <main+0x90c>
 80019b0:	9999999a 	.word	0x9999999a
 80019b4:	3fb99999 	.word	0x3fb99999
 80019b8:	66666666 	.word	0x66666666
 80019bc:	400a6666 	.word	0x400a6666
 80019c0:	2000038c 	.word	0x2000038c
 80019c4:	20000394 	.word	0x20000394
 80019c8:	40533333 	.word	0x40533333
 80019cc:	20000004 	.word	0x20000004
 80019d0:	08009aa8 	.word	0x08009aa8
 80019d4:	200003d8 	.word	0x200003d8
 80019d8:	200005d0 	.word	0x200005d0
 80019dc:	200003b0 	.word	0x200003b0
 80019e0:	20000390 	.word	0x20000390
 80019e4:	2000011c 	.word	0x2000011c
 80019e8:	20000398 	.word	0x20000398
 80019ec:	20000418 	.word	0x20000418
 80019f0:	08009ac0 	.word	0x08009ac0
 80019f4:	08009acc 	.word	0x08009acc
 80019f8:	20000140 	.word	0x20000140
 80019fc:	20000008 	.word	0x20000008
 8001a00:	08009adc 	.word	0x08009adc
 8001a04:	200003f8 	.word	0x200003f8
				else if(Inputchar == 's')
 8001a08:	4ba1      	ldr	r3, [pc, #644]	; (8001c90 <main+0xb18>)
 8001a0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a0e:	2b73      	cmp	r3, #115	; 0x73
 8001a10:	d121      	bne.n	8001a56 <main+0x8de>
					Waveduty -= 10;
 8001a12:	4ba0      	ldr	r3, [pc, #640]	; (8001c94 <main+0xb1c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	3b0a      	subs	r3, #10
 8001a18:	4a9e      	ldr	r2, [pc, #632]	; (8001c94 <main+0xb1c>)
 8001a1a:	6013      	str	r3, [r2, #0]
					if(Waveduty <= 0)
 8001a1c:	4b9d      	ldr	r3, [pc, #628]	; (8001c94 <main+0xb1c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	dc02      	bgt.n	8001a2a <main+0x8b2>
						Waveduty = 0;
 8001a24:	4b9b      	ldr	r3, [pc, #620]	; (8001c94 <main+0xb1c>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
					sprintf(Wave_Duty,"Duty Cycle:%d % \r\n",Waveduty);
 8001a2a:	4b9a      	ldr	r3, [pc, #616]	; (8001c94 <main+0xb1c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	4999      	ldr	r1, [pc, #612]	; (8001c98 <main+0xb20>)
 8001a32:	489a      	ldr	r0, [pc, #616]	; (8001c9c <main+0xb24>)
 8001a34:	f005 fc2e 	bl	8007294 <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)Wave_Duty, strlen(Wave_Duty), 10);
 8001a38:	4898      	ldr	r0, [pc, #608]	; (8001c9c <main+0xb24>)
 8001a3a:	f7fe fbd1 	bl	80001e0 <strlen>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	230a      	movs	r3, #10
 8001a44:	4995      	ldr	r1, [pc, #596]	; (8001c9c <main+0xb24>)
 8001a46:	4896      	ldr	r0, [pc, #600]	; (8001ca0 <main+0xb28>)
 8001a48:	f004 f8a1 	bl	8005b8e <HAL_UART_Transmit>
					State = State_Duty;
 8001a4c:	4b95      	ldr	r3, [pc, #596]	; (8001ca4 <main+0xb2c>)
 8001a4e:	f240 4256 	movw	r2, #1110	; 0x456
 8001a52:	801a      	strh	r2, [r3, #0]
				break;
 8001a54:	e016      	b.n	8001a84 <main+0x90c>
				else if(Inputchar == 'x')
 8001a56:	4b8e      	ldr	r3, [pc, #568]	; (8001c90 <main+0xb18>)
 8001a58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a5c:	2b78      	cmp	r3, #120	; 0x78
 8001a5e:	d111      	bne.n	8001a84 <main+0x90c>
					State = State_Square;
 8001a60:	4b90      	ldr	r3, [pc, #576]	; (8001ca4 <main+0xb2c>)
 8001a62:	2240      	movs	r2, #64	; 0x40
 8001a64:	801a      	strh	r2, [r3, #0]
				break;
 8001a66:	e00d      	b.n	8001a84 <main+0x90c>
				break;
 8001a68:	bf00      	nop
 8001a6a:	e00c      	b.n	8001a86 <main+0x90e>
				break;
 8001a6c:	bf00      	nop
 8001a6e:	e00a      	b.n	8001a86 <main+0x90e>
				break;
 8001a70:	bf00      	nop
 8001a72:	e008      	b.n	8001a86 <main+0x90e>
				break;
 8001a74:	bf00      	nop
 8001a76:	e006      	b.n	8001a86 <main+0x90e>
				break;
 8001a78:	bf00      	nop
 8001a7a:	e004      	b.n	8001a86 <main+0x90e>
				break;
 8001a7c:	bf00      	nop
 8001a7e:	e002      	b.n	8001a86 <main+0x90e>
				break;
 8001a80:	bf00      	nop
 8001a82:	e000      	b.n	8001a86 <main+0x90e>
				break;
 8001a84:	bf00      	nop
		}

		static uint64_t timestamp = 0;
		static uint64_t timestamp_wave = 0;

		if(micros() - timestamp > 100)
 8001a86:	f000 fe0f 	bl	80026a8 <micros>
 8001a8a:	460a      	mov	r2, r1
 8001a8c:	4601      	mov	r1, r0
 8001a8e:	4b86      	ldr	r3, [pc, #536]	; (8001ca8 <main+0xb30>)
 8001a90:	e9d3 5600 	ldrd	r5, r6, [r3]
 8001a94:	460b      	mov	r3, r1
 8001a96:	4614      	mov	r4, r2
 8001a98:	1b5b      	subs	r3, r3, r5
 8001a9a:	eb64 0406 	sbc.w	r4, r4, r6
 8001a9e:	2c00      	cmp	r4, #0
 8001aa0:	bf08      	it	eq
 8001aa2:	2b65      	cmpeq	r3, #101	; 0x65
 8001aa4:	f0c0 82c6 	bcc.w	8002034 <main+0xebc>
		{
			if(Waveform == 1)
 8001aa8:	4b80      	ldr	r3, [pc, #512]	; (8001cac <main+0xb34>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	f040 810d 	bne.w	8001ccc <main+0xb54>
			{
				if(slope == 0) //up
 8001ab2:	4b7f      	ldr	r3, [pc, #508]	; (8001cb0 <main+0xb38>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d172      	bne.n	8001ba0 <main+0xa28>
				{
					if(micros() - timestamp_wave <= (1000000/Wavefreq))
 8001aba:	f000 fdf5 	bl	80026a8 <micros>
 8001abe:	460a      	mov	r2, r1
 8001ac0:	4601      	mov	r1, r0
 8001ac2:	4b7c      	ldr	r3, [pc, #496]	; (8001cb4 <main+0xb3c>)
 8001ac4:	e9d3 5600 	ldrd	r5, r6, [r3]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	4614      	mov	r4, r2
 8001acc:	1b5b      	subs	r3, r3, r5
 8001ace:	eb64 0406 	sbc.w	r4, r4, r6
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	4621      	mov	r1, r4
 8001ad6:	f7ff f987 	bl	8000de8 <__aeabi_ul2f>
 8001ada:	ee06 0a10 	vmov	s12, r0
 8001ade:	4b76      	ldr	r3, [pc, #472]	; (8001cb8 <main+0xb40>)
 8001ae0:	ed93 7a00 	vldr	s14, [r3]
 8001ae4:	eddf 6a75 	vldr	s13, [pc, #468]	; 8001cbc <main+0xb44>
 8001ae8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aec:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8001af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af4:	d82d      	bhi.n	8001b52 <main+0x9da>
					{
						VoltageOut = Wavelowvolt + ((Wavehighvolt - Wavelowvolt)*((micros()-timestamp_wave)/(1000000/Wavefreq)));
 8001af6:	4b72      	ldr	r3, [pc, #456]	; (8001cc0 <main+0xb48>)
 8001af8:	ed93 7a00 	vldr	s14, [r3]
 8001afc:	4b71      	ldr	r3, [pc, #452]	; (8001cc4 <main+0xb4c>)
 8001afe:	edd3 7a00 	vldr	s15, [r3]
 8001b02:	ee37 8a67 	vsub.f32	s16, s14, s15
 8001b06:	f000 fdcf 	bl	80026a8 <micros>
 8001b0a:	460a      	mov	r2, r1
 8001b0c:	4601      	mov	r1, r0
 8001b0e:	4b69      	ldr	r3, [pc, #420]	; (8001cb4 <main+0xb3c>)
 8001b10:	e9d3 5600 	ldrd	r5, r6, [r3]
 8001b14:	460b      	mov	r3, r1
 8001b16:	4614      	mov	r4, r2
 8001b18:	1b5b      	subs	r3, r3, r5
 8001b1a:	eb64 0406 	sbc.w	r4, r4, r6
 8001b1e:	4618      	mov	r0, r3
 8001b20:	4621      	mov	r1, r4
 8001b22:	f7ff f961 	bl	8000de8 <__aeabi_ul2f>
 8001b26:	ee06 0a10 	vmov	s12, r0
 8001b2a:	4b63      	ldr	r3, [pc, #396]	; (8001cb8 <main+0xb40>)
 8001b2c:	edd3 7a00 	vldr	s15, [r3]
 8001b30:	eddf 6a62 	vldr	s13, [pc, #392]	; 8001cbc <main+0xb44>
 8001b34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b38:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8001b3c:	ee28 7a27 	vmul.f32	s14, s16, s15
 8001b40:	4b60      	ldr	r3, [pc, #384]	; (8001cc4 <main+0xb4c>)
 8001b42:	edd3 7a00 	vldr	s15, [r3]
 8001b46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b4a:	4b5f      	ldr	r3, [pc, #380]	; (8001cc8 <main+0xb50>)
 8001b4c:	edc3 7a00 	vstr	s15, [r3]
 8001b50:	e239      	b.n	8001fc6 <main+0xe4e>
					}
					else if(micros() - timestamp_wave > (1000000/Wavefreq))
 8001b52:	f000 fda9 	bl	80026a8 <micros>
 8001b56:	460a      	mov	r2, r1
 8001b58:	4601      	mov	r1, r0
 8001b5a:	4b56      	ldr	r3, [pc, #344]	; (8001cb4 <main+0xb3c>)
 8001b5c:	e9d3 5600 	ldrd	r5, r6, [r3]
 8001b60:	460b      	mov	r3, r1
 8001b62:	4614      	mov	r4, r2
 8001b64:	1b5b      	subs	r3, r3, r5
 8001b66:	eb64 0406 	sbc.w	r4, r4, r6
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	4621      	mov	r1, r4
 8001b6e:	f7ff f93b 	bl	8000de8 <__aeabi_ul2f>
 8001b72:	ee06 0a10 	vmov	s12, r0
 8001b76:	4b50      	ldr	r3, [pc, #320]	; (8001cb8 <main+0xb40>)
 8001b78:	ed93 7a00 	vldr	s14, [r3]
 8001b7c:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8001cbc <main+0xb44>
 8001b80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b84:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8001b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8c:	f340 821b 	ble.w	8001fc6 <main+0xe4e>
					{
						timestamp_wave = micros();
 8001b90:	f000 fd8a 	bl	80026a8 <micros>
 8001b94:	4603      	mov	r3, r0
 8001b96:	460c      	mov	r4, r1
 8001b98:	4a46      	ldr	r2, [pc, #280]	; (8001cb4 <main+0xb3c>)
 8001b9a:	e9c2 3400 	strd	r3, r4, [r2]
 8001b9e:	e212      	b.n	8001fc6 <main+0xe4e>
					}
				}
				else if(slope == 1) //down
 8001ba0:	4b43      	ldr	r3, [pc, #268]	; (8001cb0 <main+0xb38>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	f040 820e 	bne.w	8001fc6 <main+0xe4e>
				{
					if(micros() - timestamp_wave <= (1000000/Wavefreq))
 8001baa:	f000 fd7d 	bl	80026a8 <micros>
 8001bae:	460a      	mov	r2, r1
 8001bb0:	4601      	mov	r1, r0
 8001bb2:	4b40      	ldr	r3, [pc, #256]	; (8001cb4 <main+0xb3c>)
 8001bb4:	e9d3 5600 	ldrd	r5, r6, [r3]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4614      	mov	r4, r2
 8001bbc:	1b5b      	subs	r3, r3, r5
 8001bbe:	eb64 0406 	sbc.w	r4, r4, r6
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	4621      	mov	r1, r4
 8001bc6:	f7ff f90f 	bl	8000de8 <__aeabi_ul2f>
 8001bca:	ee06 0a10 	vmov	s12, r0
 8001bce:	4b3a      	ldr	r3, [pc, #232]	; (8001cb8 <main+0xb40>)
 8001bd0:	ed93 7a00 	vldr	s14, [r3]
 8001bd4:	eddf 6a39 	vldr	s13, [pc, #228]	; 8001cbc <main+0xb44>
 8001bd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bdc:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8001be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be4:	d82d      	bhi.n	8001c42 <main+0xaca>
					{
						VoltageOut = Wavehighvolt - ((Wavehighvolt - Wavelowvolt)*((micros()-timestamp_wave)/(1000000/Wavefreq)));
 8001be6:	4b36      	ldr	r3, [pc, #216]	; (8001cc0 <main+0xb48>)
 8001be8:	ed93 8a00 	vldr	s16, [r3]
 8001bec:	4b34      	ldr	r3, [pc, #208]	; (8001cc0 <main+0xb48>)
 8001bee:	ed93 7a00 	vldr	s14, [r3]
 8001bf2:	4b34      	ldr	r3, [pc, #208]	; (8001cc4 <main+0xb4c>)
 8001bf4:	edd3 7a00 	vldr	s15, [r3]
 8001bf8:	ee77 8a67 	vsub.f32	s17, s14, s15
 8001bfc:	f000 fd54 	bl	80026a8 <micros>
 8001c00:	460a      	mov	r2, r1
 8001c02:	4601      	mov	r1, r0
 8001c04:	4b2b      	ldr	r3, [pc, #172]	; (8001cb4 <main+0xb3c>)
 8001c06:	e9d3 5600 	ldrd	r5, r6, [r3]
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4614      	mov	r4, r2
 8001c0e:	1b5b      	subs	r3, r3, r5
 8001c10:	eb64 0406 	sbc.w	r4, r4, r6
 8001c14:	4618      	mov	r0, r3
 8001c16:	4621      	mov	r1, r4
 8001c18:	f7ff f8e6 	bl	8000de8 <__aeabi_ul2f>
 8001c1c:	ee06 0a10 	vmov	s12, r0
 8001c20:	4b25      	ldr	r3, [pc, #148]	; (8001cb8 <main+0xb40>)
 8001c22:	edd3 7a00 	vldr	s15, [r3]
 8001c26:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001cbc <main+0xb44>
 8001c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c2e:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8001c32:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001c36:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001c3a:	4b23      	ldr	r3, [pc, #140]	; (8001cc8 <main+0xb50>)
 8001c3c:	edc3 7a00 	vstr	s15, [r3]
 8001c40:	e1c1      	b.n	8001fc6 <main+0xe4e>
					}
					else if(micros() - timestamp_wave > (1000000/Wavefreq))
 8001c42:	f000 fd31 	bl	80026a8 <micros>
 8001c46:	460a      	mov	r2, r1
 8001c48:	4601      	mov	r1, r0
 8001c4a:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <main+0xb3c>)
 8001c4c:	e9d3 5600 	ldrd	r5, r6, [r3]
 8001c50:	460b      	mov	r3, r1
 8001c52:	4614      	mov	r4, r2
 8001c54:	1b5b      	subs	r3, r3, r5
 8001c56:	eb64 0406 	sbc.w	r4, r4, r6
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	4621      	mov	r1, r4
 8001c5e:	f7ff f8c3 	bl	8000de8 <__aeabi_ul2f>
 8001c62:	ee06 0a10 	vmov	s12, r0
 8001c66:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <main+0xb40>)
 8001c68:	ed93 7a00 	vldr	s14, [r3]
 8001c6c:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001cbc <main+0xb44>
 8001c70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c74:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8001c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c7c:	f340 81a3 	ble.w	8001fc6 <main+0xe4e>
					{
						timestamp_wave = micros();
 8001c80:	f000 fd12 	bl	80026a8 <micros>
 8001c84:	4603      	mov	r3, r0
 8001c86:	460c      	mov	r4, r1
 8001c88:	4a0a      	ldr	r2, [pc, #40]	; (8001cb4 <main+0xb3c>)
 8001c8a:	e9c2 3400 	strd	r3, r4, [r2]
 8001c8e:	e19a      	b.n	8001fc6 <main+0xe4e>
 8001c90:	2000038c 	.word	0x2000038c
 8001c94:	20000008 	.word	0x20000008
 8001c98:	08009adc 	.word	0x08009adc
 8001c9c:	200003f8 	.word	0x200003f8
 8001ca0:	200005d0 	.word	0x200005d0
 8001ca4:	200003b0 	.word	0x200003b0
 8001ca8:	20000430 	.word	0x20000430
 8001cac:	20000390 	.word	0x20000390
 8001cb0:	20000398 	.word	0x20000398
 8001cb4:	20000438 	.word	0x20000438
 8001cb8:	20000000 	.word	0x20000000
 8001cbc:	49742400 	.word	0x49742400
 8001cc0:	20000004 	.word	0x20000004
 8001cc4:	20000394 	.word	0x20000394
 8001cc8:	2000039c 	.word	0x2000039c
					}
				}
			}
			else if(Waveform == 2)
 8001ccc:	4ba0      	ldr	r3, [pc, #640]	; (8001f50 <main+0xdd8>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	f040 80b7 	bne.w	8001e44 <main+0xccc>
			{
				if(micros() - timestamp_wave <= (1000000/Wavefreq))
 8001cd6:	f000 fce7 	bl	80026a8 <micros>
 8001cda:	460a      	mov	r2, r1
 8001cdc:	4601      	mov	r1, r0
 8001cde:	4b9d      	ldr	r3, [pc, #628]	; (8001f54 <main+0xddc>)
 8001ce0:	e9d3 5600 	ldrd	r5, r6, [r3]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4614      	mov	r4, r2
 8001ce8:	1b5b      	subs	r3, r3, r5
 8001cea:	eb64 0406 	sbc.w	r4, r4, r6
 8001cee:	4618      	mov	r0, r3
 8001cf0:	4621      	mov	r1, r4
 8001cf2:	f7ff f879 	bl	8000de8 <__aeabi_ul2f>
 8001cf6:	ee06 0a10 	vmov	s12, r0
 8001cfa:	4b97      	ldr	r3, [pc, #604]	; (8001f58 <main+0xde0>)
 8001cfc:	ed93 7a00 	vldr	s14, [r3]
 8001d00:	eddf 6a96 	vldr	s13, [pc, #600]	; 8001f5c <main+0xde4>
 8001d04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d08:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8001d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d10:	d871      	bhi.n	8001df6 <main+0xc7e>
				{
					Sineangle = ((micros() - timestamp_wave)/(1000000/Wavefreq))*2*3.14;
 8001d12:	f000 fcc9 	bl	80026a8 <micros>
 8001d16:	460a      	mov	r2, r1
 8001d18:	4601      	mov	r1, r0
 8001d1a:	4b8e      	ldr	r3, [pc, #568]	; (8001f54 <main+0xddc>)
 8001d1c:	e9d3 5600 	ldrd	r5, r6, [r3]
 8001d20:	460b      	mov	r3, r1
 8001d22:	4614      	mov	r4, r2
 8001d24:	1b5b      	subs	r3, r3, r5
 8001d26:	eb64 0406 	sbc.w	r4, r4, r6
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	4621      	mov	r1, r4
 8001d2e:	f7ff f85b 	bl	8000de8 <__aeabi_ul2f>
 8001d32:	ee06 0a10 	vmov	s12, r0
 8001d36:	4b88      	ldr	r3, [pc, #544]	; (8001f58 <main+0xde0>)
 8001d38:	edd3 7a00 	vldr	s15, [r3]
 8001d3c:	eddf 6a87 	vldr	s13, [pc, #540]	; 8001f5c <main+0xde4>
 8001d40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d44:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8001d48:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d4c:	ee17 0a90 	vmov	r0, s15
 8001d50:	f7fe fc02 	bl	8000558 <__aeabi_f2d>
 8001d54:	a37c      	add	r3, pc, #496	; (adr r3, 8001f48 <main+0xdd0>)
 8001d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5a:	f7fe fc55 	bl	8000608 <__aeabi_dmul>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	460c      	mov	r4, r1
 8001d62:	4a7f      	ldr	r2, [pc, #508]	; (8001f60 <main+0xde8>)
 8001d64:	e9c2 3400 	strd	r3, r4, [r2]
					VoltageOut = Wavelowvolt + ((sin(Sineangle)+1)*(Wavehighvolt-Wavelowvolt)/2);
 8001d68:	4b7e      	ldr	r3, [pc, #504]	; (8001f64 <main+0xdec>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe fbf3 	bl	8000558 <__aeabi_f2d>
 8001d72:	4604      	mov	r4, r0
 8001d74:	460d      	mov	r5, r1
 8001d76:	4b7a      	ldr	r3, [pc, #488]	; (8001f60 <main+0xde8>)
 8001d78:	ed93 7b00 	vldr	d7, [r3]
 8001d7c:	eeb0 0a47 	vmov.f32	s0, s14
 8001d80:	eef0 0a67 	vmov.f32	s1, s15
 8001d84:	f006 fe68 	bl	8008a58 <sin>
 8001d88:	ec51 0b10 	vmov	r0, r1, d0
 8001d8c:	f04f 0200 	mov.w	r2, #0
 8001d90:	4b75      	ldr	r3, [pc, #468]	; (8001f68 <main+0xdf0>)
 8001d92:	f7fe fa83 	bl	800029c <__adddf3>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	4690      	mov	r8, r2
 8001d9c:	4699      	mov	r9, r3
 8001d9e:	4b73      	ldr	r3, [pc, #460]	; (8001f6c <main+0xdf4>)
 8001da0:	ed93 7a00 	vldr	s14, [r3]
 8001da4:	4b6f      	ldr	r3, [pc, #444]	; (8001f64 <main+0xdec>)
 8001da6:	edd3 7a00 	vldr	s15, [r3]
 8001daa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dae:	ee17 0a90 	vmov	r0, s15
 8001db2:	f7fe fbd1 	bl	8000558 <__aeabi_f2d>
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	4640      	mov	r0, r8
 8001dbc:	4649      	mov	r1, r9
 8001dbe:	f7fe fc23 	bl	8000608 <__aeabi_dmul>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001dd2:	f7fe fd43 	bl	800085c <__aeabi_ddiv>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	4620      	mov	r0, r4
 8001ddc:	4629      	mov	r1, r5
 8001dde:	f7fe fa5d 	bl	800029c <__adddf3>
 8001de2:	4603      	mov	r3, r0
 8001de4:	460c      	mov	r4, r1
 8001de6:	4618      	mov	r0, r3
 8001de8:	4621      	mov	r1, r4
 8001dea:	f7fe fee5 	bl	8000bb8 <__aeabi_d2f>
 8001dee:	4602      	mov	r2, r0
 8001df0:	4b5f      	ldr	r3, [pc, #380]	; (8001f70 <main+0xdf8>)
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	e0e7      	b.n	8001fc6 <main+0xe4e>
				}
				else if(micros() - timestamp_wave > (1000000/Wavefreq))
 8001df6:	f000 fc57 	bl	80026a8 <micros>
 8001dfa:	460a      	mov	r2, r1
 8001dfc:	4601      	mov	r1, r0
 8001dfe:	4b55      	ldr	r3, [pc, #340]	; (8001f54 <main+0xddc>)
 8001e00:	e9d3 5600 	ldrd	r5, r6, [r3]
 8001e04:	460b      	mov	r3, r1
 8001e06:	4614      	mov	r4, r2
 8001e08:	1b5b      	subs	r3, r3, r5
 8001e0a:	eb64 0406 	sbc.w	r4, r4, r6
 8001e0e:	4618      	mov	r0, r3
 8001e10:	4621      	mov	r1, r4
 8001e12:	f7fe ffe9 	bl	8000de8 <__aeabi_ul2f>
 8001e16:	ee06 0a10 	vmov	s12, r0
 8001e1a:	4b4f      	ldr	r3, [pc, #316]	; (8001f58 <main+0xde0>)
 8001e1c:	ed93 7a00 	vldr	s14, [r3]
 8001e20:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8001f5c <main+0xde4>
 8001e24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e28:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8001e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e30:	f340 80c9 	ble.w	8001fc6 <main+0xe4e>
				{
					timestamp_wave = micros();
 8001e34:	f000 fc38 	bl	80026a8 <micros>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	460c      	mov	r4, r1
 8001e3c:	4a45      	ldr	r2, [pc, #276]	; (8001f54 <main+0xddc>)
 8001e3e:	e9c2 3400 	strd	r3, r4, [r2]
 8001e42:	e0c0      	b.n	8001fc6 <main+0xe4e>
				}
			}
			else if(Waveform == 3)
 8001e44:	4b42      	ldr	r3, [pc, #264]	; (8001f50 <main+0xdd8>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b03      	cmp	r3, #3
 8001e4a:	f040 80bc 	bne.w	8001fc6 <main+0xe4e>
			{

				if(micros() - timestamp_wave <= (1000000/Wavefreq))
 8001e4e:	f000 fc2b 	bl	80026a8 <micros>
 8001e52:	460a      	mov	r2, r1
 8001e54:	4601      	mov	r1, r0
 8001e56:	4b3f      	ldr	r3, [pc, #252]	; (8001f54 <main+0xddc>)
 8001e58:	e9d3 5600 	ldrd	r5, r6, [r3]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4614      	mov	r4, r2
 8001e60:	1b5b      	subs	r3, r3, r5
 8001e62:	eb64 0406 	sbc.w	r4, r4, r6
 8001e66:	4618      	mov	r0, r3
 8001e68:	4621      	mov	r1, r4
 8001e6a:	f7fe ffbd 	bl	8000de8 <__aeabi_ul2f>
 8001e6e:	ee06 0a10 	vmov	s12, r0
 8001e72:	4b39      	ldr	r3, [pc, #228]	; (8001f58 <main+0xde0>)
 8001e74:	ed93 7a00 	vldr	s14, [r3]
 8001e78:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001f5c <main+0xde4>
 8001e7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e80:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8001e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e88:	d878      	bhi.n	8001f7c <main+0xe04>
				{
					if(micros() - timestamp_wave <= (1000000/Wavefreq)*Waveduty/100)
 8001e8a:	f000 fc0d 	bl	80026a8 <micros>
 8001e8e:	460a      	mov	r2, r1
 8001e90:	4601      	mov	r1, r0
 8001e92:	4b30      	ldr	r3, [pc, #192]	; (8001f54 <main+0xddc>)
 8001e94:	e9d3 5600 	ldrd	r5, r6, [r3]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	4614      	mov	r4, r2
 8001e9c:	1b5b      	subs	r3, r3, r5
 8001e9e:	eb64 0406 	sbc.w	r4, r4, r6
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	4621      	mov	r1, r4
 8001ea6:	f7fe ff9f 	bl	8000de8 <__aeabi_ul2f>
 8001eaa:	ee06 0a10 	vmov	s12, r0
 8001eae:	4b2a      	ldr	r3, [pc, #168]	; (8001f58 <main+0xde0>)
 8001eb0:	edd3 7a00 	vldr	s15, [r3]
 8001eb4:	eddf 6a29 	vldr	s13, [pc, #164]	; 8001f5c <main+0xde4>
 8001eb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ebc:	4b2d      	ldr	r3, [pc, #180]	; (8001f74 <main+0xdfc>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	ee07 3a90 	vmov	s15, r3
 8001ec4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ec8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ecc:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8001f78 <main+0xe00>
 8001ed0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ed4:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8001ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001edc:	d804      	bhi.n	8001ee8 <main+0xd70>
					{
						VoltageOut = Wavehighvolt;
 8001ede:	4b23      	ldr	r3, [pc, #140]	; (8001f6c <main+0xdf4>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a23      	ldr	r2, [pc, #140]	; (8001f70 <main+0xdf8>)
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	e06e      	b.n	8001fc6 <main+0xe4e>
					}
					else if(micros() - timestamp_wave > (1000000/Wavefreq)*Waveduty/100)
 8001ee8:	f000 fbde 	bl	80026a8 <micros>
 8001eec:	460a      	mov	r2, r1
 8001eee:	4601      	mov	r1, r0
 8001ef0:	4b18      	ldr	r3, [pc, #96]	; (8001f54 <main+0xddc>)
 8001ef2:	e9d3 5600 	ldrd	r5, r6, [r3]
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4614      	mov	r4, r2
 8001efa:	1b5b      	subs	r3, r3, r5
 8001efc:	eb64 0406 	sbc.w	r4, r4, r6
 8001f00:	4618      	mov	r0, r3
 8001f02:	4621      	mov	r1, r4
 8001f04:	f7fe ff70 	bl	8000de8 <__aeabi_ul2f>
 8001f08:	ee06 0a10 	vmov	s12, r0
 8001f0c:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <main+0xde0>)
 8001f0e:	edd3 7a00 	vldr	s15, [r3]
 8001f12:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001f5c <main+0xde4>
 8001f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f1a:	4b16      	ldr	r3, [pc, #88]	; (8001f74 <main+0xdfc>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	ee07 3a90 	vmov	s15, r3
 8001f22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f2a:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001f78 <main+0xe00>
 8001f2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f32:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8001f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f3a:	dd44      	ble.n	8001fc6 <main+0xe4e>
					{
						VoltageOut = Wavelowvolt;
 8001f3c:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <main+0xdec>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a0b      	ldr	r2, [pc, #44]	; (8001f70 <main+0xdf8>)
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	e03f      	b.n	8001fc6 <main+0xe4e>
 8001f46:	bf00      	nop
 8001f48:	51eb851f 	.word	0x51eb851f
 8001f4c:	40091eb8 	.word	0x40091eb8
 8001f50:	20000390 	.word	0x20000390
 8001f54:	20000438 	.word	0x20000438
 8001f58:	20000000 	.word	0x20000000
 8001f5c:	49742400 	.word	0x49742400
 8001f60:	200003a8 	.word	0x200003a8
 8001f64:	20000394 	.word	0x20000394
 8001f68:	3ff00000 	.word	0x3ff00000
 8001f6c:	20000004 	.word	0x20000004
 8001f70:	2000039c 	.word	0x2000039c
 8001f74:	20000008 	.word	0x20000008
 8001f78:	42c80000 	.word	0x42c80000
					}
				}
				else if(micros() - timestamp_wave > (1000000/Wavefreq))
 8001f7c:	f000 fb94 	bl	80026a8 <micros>
 8001f80:	460a      	mov	r2, r1
 8001f82:	4601      	mov	r1, r0
 8001f84:	4b3c      	ldr	r3, [pc, #240]	; (8002078 <main+0xf00>)
 8001f86:	e9d3 5600 	ldrd	r5, r6, [r3]
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	4614      	mov	r4, r2
 8001f8e:	1b5b      	subs	r3, r3, r5
 8001f90:	eb64 0406 	sbc.w	r4, r4, r6
 8001f94:	4618      	mov	r0, r3
 8001f96:	4621      	mov	r1, r4
 8001f98:	f7fe ff26 	bl	8000de8 <__aeabi_ul2f>
 8001f9c:	ee06 0a10 	vmov	s12, r0
 8001fa0:	4b36      	ldr	r3, [pc, #216]	; (800207c <main+0xf04>)
 8001fa2:	ed93 7a00 	vldr	s14, [r3]
 8001fa6:	eddf 6a36 	vldr	s13, [pc, #216]	; 8002080 <main+0xf08>
 8001faa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fae:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8001fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb6:	dd06      	ble.n	8001fc6 <main+0xe4e>
				{
					timestamp_wave = micros();
 8001fb8:	f000 fb76 	bl	80026a8 <micros>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	460c      	mov	r4, r1
 8001fc0:	4a2d      	ldr	r2, [pc, #180]	; (8002078 <main+0xf00>)
 8001fc2:	e9c2 3400 	strd	r3, r4, [r2]
				}
			}
			dataOut = (int)(VoltageOut*4096/3.3);
 8001fc6:	4b2f      	ldr	r3, [pc, #188]	; (8002084 <main+0xf0c>)
 8001fc8:	edd3 7a00 	vldr	s15, [r3]
 8001fcc:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8002088 <main+0xf10>
 8001fd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fd4:	ee17 0a90 	vmov	r0, s15
 8001fd8:	f7fe fabe 	bl	8000558 <__aeabi_f2d>
 8001fdc:	a324      	add	r3, pc, #144	; (adr r3, 8002070 <main+0xef8>)
 8001fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe2:	f7fe fc3b 	bl	800085c <__aeabi_ddiv>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	460c      	mov	r4, r1
 8001fea:	4618      	mov	r0, r3
 8001fec:	4621      	mov	r1, r4
 8001fee:	f7fe fdbb 	bl	8000b68 <__aeabi_d2iz>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	4b25      	ldr	r3, [pc, #148]	; (800208c <main+0xf14>)
 8001ff8:	801a      	strh	r2, [r3, #0]
			timestamp = micros();
 8001ffa:	f000 fb55 	bl	80026a8 <micros>
 8001ffe:	4603      	mov	r3, r0
 8002000:	460c      	mov	r4, r1
 8002002:	4a23      	ldr	r2, [pc, #140]	; (8002090 <main+0xf18>)
 8002004:	e9c2 3400 	strd	r3, r4, [r2]
			if (hspi3.State == HAL_SPI_STATE_READY && HAL_GPIO_ReadPin(SPI_SS_GPIO_Port, SPI_SS_Pin)== GPIO_PIN_SET)
 8002008:	4b22      	ldr	r3, [pc, #136]	; (8002094 <main+0xf1c>)
 800200a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b01      	cmp	r3, #1
 8002012:	d10f      	bne.n	8002034 <main+0xebc>
 8002014:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002018:	481f      	ldr	r0, [pc, #124]	; (8002098 <main+0xf20>)
 800201a:	f002 f989 	bl	8004330 <HAL_GPIO_ReadPin>
 800201e:	4603      	mov	r3, r0
 8002020:	2b01      	cmp	r3, #1
 8002022:	d107      	bne.n	8002034 <main+0xebc>
			{
				MCP4922SetOutput(DACConfig, dataOut);
 8002024:	4b1d      	ldr	r3, [pc, #116]	; (800209c <main+0xf24>)
 8002026:	781a      	ldrb	r2, [r3, #0]
 8002028:	4b18      	ldr	r3, [pc, #96]	; (800208c <main+0xf14>)
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	4619      	mov	r1, r3
 800202e:	4610      	mov	r0, r2
 8002030:	f000 fae2 	bl	80025f8 <MCP4922SetOutput>
			}
		}


		VoltageIn = ADCin * 3.3 / 4096;
 8002034:	4b1a      	ldr	r3, [pc, #104]	; (80020a0 <main+0xf28>)
 8002036:	881b      	ldrh	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f7fe fa7b 	bl	8000534 <__aeabi_i2d>
 800203e:	a30c      	add	r3, pc, #48	; (adr r3, 8002070 <main+0xef8>)
 8002040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002044:	f7fe fae0 	bl	8000608 <__aeabi_dmul>
 8002048:	4603      	mov	r3, r0
 800204a:	460c      	mov	r4, r1
 800204c:	4618      	mov	r0, r3
 800204e:	4621      	mov	r1, r4
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <main+0xf2c>)
 8002056:	f7fe fc01 	bl	800085c <__aeabi_ddiv>
 800205a:	4603      	mov	r3, r0
 800205c:	460c      	mov	r4, r1
 800205e:	4618      	mov	r0, r3
 8002060:	4621      	mov	r1, r4
 8002062:	f7fe fda9 	bl	8000bb8 <__aeabi_d2f>
 8002066:	4602      	mov	r2, r0
 8002068:	4b0f      	ldr	r3, [pc, #60]	; (80020a8 <main+0xf30>)
 800206a:	601a      	str	r2, [r3, #0]
	{
 800206c:	f7ff b8ad 	b.w	80011ca <main+0x52>
 8002070:	66666666 	.word	0x66666666
 8002074:	400a6666 	.word	0x400a6666
 8002078:	20000438 	.word	0x20000438
 800207c:	20000000 	.word	0x20000000
 8002080:	49742400 	.word	0x49742400
 8002084:	2000039c 	.word	0x2000039c
 8002088:	45800000 	.word	0x45800000
 800208c:	200003c0 	.word	0x200003c0
 8002090:	20000430 	.word	0x20000430
 8002094:	20000490 	.word	0x20000490
 8002098:	40020400 	.word	0x40020400
 800209c:	2000000c 	.word	0x2000000c
 80020a0:	200003b2 	.word	0x200003b2
 80020a4:	40b00000 	.word	0x40b00000
 80020a8:	200003a0 	.word	0x200003a0

080020ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b094      	sub	sp, #80	; 0x50
 80020b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020b2:	f107 0320 	add.w	r3, r7, #32
 80020b6:	2230      	movs	r2, #48	; 0x30
 80020b8:	2100      	movs	r1, #0
 80020ba:	4618      	mov	r0, r3
 80020bc:	f004 fc86 	bl	80069cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020c0:	f107 030c 	add.w	r3, r7, #12
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	60da      	str	r2, [r3, #12]
 80020ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020d0:	2300      	movs	r3, #0
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	4b27      	ldr	r3, [pc, #156]	; (8002174 <SystemClock_Config+0xc8>)
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	4a26      	ldr	r2, [pc, #152]	; (8002174 <SystemClock_Config+0xc8>)
 80020da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020de:	6413      	str	r3, [r2, #64]	; 0x40
 80020e0:	4b24      	ldr	r3, [pc, #144]	; (8002174 <SystemClock_Config+0xc8>)
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020ec:	2300      	movs	r3, #0
 80020ee:	607b      	str	r3, [r7, #4]
 80020f0:	4b21      	ldr	r3, [pc, #132]	; (8002178 <SystemClock_Config+0xcc>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a20      	ldr	r2, [pc, #128]	; (8002178 <SystemClock_Config+0xcc>)
 80020f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020fa:	6013      	str	r3, [r2, #0]
 80020fc:	4b1e      	ldr	r3, [pc, #120]	; (8002178 <SystemClock_Config+0xcc>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002104:	607b      	str	r3, [r7, #4]
 8002106:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002108:	2302      	movs	r3, #2
 800210a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800210c:	2301      	movs	r3, #1
 800210e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002110:	2310      	movs	r3, #16
 8002112:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002114:	2302      	movs	r3, #2
 8002116:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002118:	2300      	movs	r3, #0
 800211a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800211c:	2308      	movs	r3, #8
 800211e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002120:	2364      	movs	r3, #100	; 0x64
 8002122:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002124:	2302      	movs	r3, #2
 8002126:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002128:	2304      	movs	r3, #4
 800212a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800212c:	f107 0320 	add.w	r3, r7, #32
 8002130:	4618      	mov	r0, r3
 8002132:	f002 f92f 	bl	8004394 <HAL_RCC_OscConfig>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800213c:	f000 face 	bl	80026dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002140:	230f      	movs	r3, #15
 8002142:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002144:	2302      	movs	r3, #2
 8002146:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800214c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002150:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002152:	2300      	movs	r3, #0
 8002154:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002156:	f107 030c 	add.w	r3, r7, #12
 800215a:	2103      	movs	r1, #3
 800215c:	4618      	mov	r0, r3
 800215e:	f002 fb89 	bl	8004874 <HAL_RCC_ClockConfig>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002168:	f000 fab8 	bl	80026dc <Error_Handler>
  }
}
 800216c:	bf00      	nop
 800216e:	3750      	adds	r7, #80	; 0x50
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40023800 	.word	0x40023800
 8002178:	40007000 	.word	0x40007000

0800217c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002182:	463b      	mov	r3, r7
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800218e:	4b22      	ldr	r3, [pc, #136]	; (8002218 <MX_ADC1_Init+0x9c>)
 8002190:	4a22      	ldr	r2, [pc, #136]	; (800221c <MX_ADC1_Init+0xa0>)
 8002192:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002194:	4b20      	ldr	r3, [pc, #128]	; (8002218 <MX_ADC1_Init+0x9c>)
 8002196:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800219a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800219c:	4b1e      	ldr	r3, [pc, #120]	; (8002218 <MX_ADC1_Init+0x9c>)
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80021a2:	4b1d      	ldr	r3, [pc, #116]	; (8002218 <MX_ADC1_Init+0x9c>)
 80021a4:	2201      	movs	r2, #1
 80021a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80021a8:	4b1b      	ldr	r3, [pc, #108]	; (8002218 <MX_ADC1_Init+0x9c>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80021ae:	4b1a      	ldr	r3, [pc, #104]	; (8002218 <MX_ADC1_Init+0x9c>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80021b6:	4b18      	ldr	r3, [pc, #96]	; (8002218 <MX_ADC1_Init+0x9c>)
 80021b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80021be:	4b16      	ldr	r3, [pc, #88]	; (8002218 <MX_ADC1_Init+0x9c>)
 80021c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80021c6:	4b14      	ldr	r3, [pc, #80]	; (8002218 <MX_ADC1_Init+0x9c>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80021cc:	4b12      	ldr	r3, [pc, #72]	; (8002218 <MX_ADC1_Init+0x9c>)
 80021ce:	2201      	movs	r2, #1
 80021d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80021d2:	4b11      	ldr	r3, [pc, #68]	; (8002218 <MX_ADC1_Init+0x9c>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80021da:	4b0f      	ldr	r3, [pc, #60]	; (8002218 <MX_ADC1_Init+0x9c>)
 80021dc:	2201      	movs	r2, #1
 80021de:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80021e0:	480d      	ldr	r0, [pc, #52]	; (8002218 <MX_ADC1_Init+0x9c>)
 80021e2:	f000 fd47 	bl	8002c74 <HAL_ADC_Init>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80021ec:	f000 fa76 	bl	80026dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80021f4:	2301      	movs	r3, #1
 80021f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80021f8:	2300      	movs	r3, #0
 80021fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021fc:	463b      	mov	r3, r7
 80021fe:	4619      	mov	r1, r3
 8002200:	4805      	ldr	r0, [pc, #20]	; (8002218 <MX_ADC1_Init+0x9c>)
 8002202:	f000 ffb7 	bl	8003174 <HAL_ADC_ConfigChannel>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800220c:	f000 fa66 	bl	80026dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002210:	bf00      	nop
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	200004e8 	.word	0x200004e8
 800221c:	40012000 	.word	0x40012000

08002220 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002224:	4b18      	ldr	r3, [pc, #96]	; (8002288 <MX_SPI3_Init+0x68>)
 8002226:	4a19      	ldr	r2, [pc, #100]	; (800228c <MX_SPI3_Init+0x6c>)
 8002228:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800222a:	4b17      	ldr	r3, [pc, #92]	; (8002288 <MX_SPI3_Init+0x68>)
 800222c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002230:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002232:	4b15      	ldr	r3, [pc, #84]	; (8002288 <MX_SPI3_Init+0x68>)
 8002234:	2200      	movs	r2, #0
 8002236:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8002238:	4b13      	ldr	r3, [pc, #76]	; (8002288 <MX_SPI3_Init+0x68>)
 800223a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800223e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002240:	4b11      	ldr	r3, [pc, #68]	; (8002288 <MX_SPI3_Init+0x68>)
 8002242:	2200      	movs	r2, #0
 8002244:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002246:	4b10      	ldr	r3, [pc, #64]	; (8002288 <MX_SPI3_Init+0x68>)
 8002248:	2200      	movs	r2, #0
 800224a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800224c:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <MX_SPI3_Init+0x68>)
 800224e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002252:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002254:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <MX_SPI3_Init+0x68>)
 8002256:	2208      	movs	r2, #8
 8002258:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800225a:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <MX_SPI3_Init+0x68>)
 800225c:	2200      	movs	r2, #0
 800225e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002260:	4b09      	ldr	r3, [pc, #36]	; (8002288 <MX_SPI3_Init+0x68>)
 8002262:	2200      	movs	r2, #0
 8002264:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002266:	4b08      	ldr	r3, [pc, #32]	; (8002288 <MX_SPI3_Init+0x68>)
 8002268:	2200      	movs	r2, #0
 800226a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800226c:	4b06      	ldr	r3, [pc, #24]	; (8002288 <MX_SPI3_Init+0x68>)
 800226e:	220a      	movs	r2, #10
 8002270:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002272:	4805      	ldr	r0, [pc, #20]	; (8002288 <MX_SPI3_Init+0x68>)
 8002274:	f002 fcf0 	bl	8004c58 <HAL_SPI_Init>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 800227e:	f000 fa2d 	bl	80026dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20000490 	.word	0x20000490
 800228c:	40003c00 	.word	0x40003c00

08002290 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002296:	f107 0308 	add.w	r3, r7, #8
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	605a      	str	r2, [r3, #4]
 80022a0:	609a      	str	r2, [r3, #8]
 80022a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022a4:	463b      	mov	r3, r7
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022ac:	4b1d      	ldr	r3, [pc, #116]	; (8002324 <MX_TIM2_Init+0x94>)
 80022ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 80022b4:	4b1b      	ldr	r3, [pc, #108]	; (8002324 <MX_TIM2_Init+0x94>)
 80022b6:	2263      	movs	r2, #99	; 0x63
 80022b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ba:	4b1a      	ldr	r3, [pc, #104]	; (8002324 <MX_TIM2_Init+0x94>)
 80022bc:	2200      	movs	r2, #0
 80022be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80022c0:	4b18      	ldr	r3, [pc, #96]	; (8002324 <MX_TIM2_Init+0x94>)
 80022c2:	f04f 32ff 	mov.w	r2, #4294967295
 80022c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022c8:	4b16      	ldr	r3, [pc, #88]	; (8002324 <MX_TIM2_Init+0x94>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ce:	4b15      	ldr	r3, [pc, #84]	; (8002324 <MX_TIM2_Init+0x94>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022d4:	4813      	ldr	r0, [pc, #76]	; (8002324 <MX_TIM2_Init+0x94>)
 80022d6:	f003 f817 	bl	8005308 <HAL_TIM_Base_Init>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80022e0:	f000 f9fc 	bl	80026dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022ea:	f107 0308 	add.w	r3, r7, #8
 80022ee:	4619      	mov	r1, r3
 80022f0:	480c      	ldr	r0, [pc, #48]	; (8002324 <MX_TIM2_Init+0x94>)
 80022f2:	f003 f984 	bl	80055fe <HAL_TIM_ConfigClockSource>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80022fc:	f000 f9ee 	bl	80026dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002300:	2300      	movs	r3, #0
 8002302:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002304:	2300      	movs	r3, #0
 8002306:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002308:	463b      	mov	r3, r7
 800230a:	4619      	mov	r1, r3
 800230c:	4805      	ldr	r0, [pc, #20]	; (8002324 <MX_TIM2_Init+0x94>)
 800230e:	f003 fb6f 	bl	80059f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002318:	f000 f9e0 	bl	80026dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800231c:	bf00      	nop
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	20000590 	.word	0x20000590

08002328 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800232e:	f107 0308 	add.w	r3, r7, #8
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	605a      	str	r2, [r3, #4]
 8002338:	609a      	str	r2, [r3, #8]
 800233a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800233c:	463b      	mov	r3, r7
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002344:	4b1c      	ldr	r3, [pc, #112]	; (80023b8 <MX_TIM3_Init+0x90>)
 8002346:	4a1d      	ldr	r2, [pc, #116]	; (80023bc <MX_TIM3_Init+0x94>)
 8002348:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 800234a:	4b1b      	ldr	r3, [pc, #108]	; (80023b8 <MX_TIM3_Init+0x90>)
 800234c:	2263      	movs	r2, #99	; 0x63
 800234e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002350:	4b19      	ldr	r3, [pc, #100]	; (80023b8 <MX_TIM3_Init+0x90>)
 8002352:	2200      	movs	r2, #0
 8002354:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8002356:	4b18      	ldr	r3, [pc, #96]	; (80023b8 <MX_TIM3_Init+0x90>)
 8002358:	2264      	movs	r2, #100	; 0x64
 800235a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800235c:	4b16      	ldr	r3, [pc, #88]	; (80023b8 <MX_TIM3_Init+0x90>)
 800235e:	2200      	movs	r2, #0
 8002360:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002362:	4b15      	ldr	r3, [pc, #84]	; (80023b8 <MX_TIM3_Init+0x90>)
 8002364:	2200      	movs	r2, #0
 8002366:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002368:	4813      	ldr	r0, [pc, #76]	; (80023b8 <MX_TIM3_Init+0x90>)
 800236a:	f002 ffcd 	bl	8005308 <HAL_TIM_Base_Init>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8002374:	f000 f9b2 	bl	80026dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800237c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800237e:	f107 0308 	add.w	r3, r7, #8
 8002382:	4619      	mov	r1, r3
 8002384:	480c      	ldr	r0, [pc, #48]	; (80023b8 <MX_TIM3_Init+0x90>)
 8002386:	f003 f93a 	bl	80055fe <HAL_TIM_ConfigClockSource>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8002390:	f000 f9a4 	bl	80026dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002394:	2320      	movs	r3, #32
 8002396:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002398:	2300      	movs	r3, #0
 800239a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800239c:	463b      	mov	r3, r7
 800239e:	4619      	mov	r1, r3
 80023a0:	4805      	ldr	r0, [pc, #20]	; (80023b8 <MX_TIM3_Init+0x90>)
 80023a2:	f003 fb25 	bl	80059f0 <HAL_TIMEx_MasterConfigSynchronization>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80023ac:	f000 f996 	bl	80026dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80023b0:	bf00      	nop
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	20000450 	.word	0x20000450
 80023bc:	40000400 	.word	0x40000400

080023c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023c4:	4b11      	ldr	r3, [pc, #68]	; (800240c <MX_USART2_UART_Init+0x4c>)
 80023c6:	4a12      	ldr	r2, [pc, #72]	; (8002410 <MX_USART2_UART_Init+0x50>)
 80023c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80023ca:	4b10      	ldr	r3, [pc, #64]	; (800240c <MX_USART2_UART_Init+0x4c>)
 80023cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023d2:	4b0e      	ldr	r3, [pc, #56]	; (800240c <MX_USART2_UART_Init+0x4c>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023d8:	4b0c      	ldr	r3, [pc, #48]	; (800240c <MX_USART2_UART_Init+0x4c>)
 80023da:	2200      	movs	r2, #0
 80023dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023de:	4b0b      	ldr	r3, [pc, #44]	; (800240c <MX_USART2_UART_Init+0x4c>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023e4:	4b09      	ldr	r3, [pc, #36]	; (800240c <MX_USART2_UART_Init+0x4c>)
 80023e6:	220c      	movs	r2, #12
 80023e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ea:	4b08      	ldr	r3, [pc, #32]	; (800240c <MX_USART2_UART_Init+0x4c>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023f0:	4b06      	ldr	r3, [pc, #24]	; (800240c <MX_USART2_UART_Init+0x4c>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023f6:	4805      	ldr	r0, [pc, #20]	; (800240c <MX_USART2_UART_Init+0x4c>)
 80023f8:	f003 fb7c 	bl	8005af4 <HAL_UART_Init>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002402:	f000 f96b 	bl	80026dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	200005d0 	.word	0x200005d0
 8002410:	40004400 	.word	0x40004400

08002414 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	607b      	str	r3, [r7, #4]
 800241e:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <MX_DMA_Init+0x3c>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	4a0b      	ldr	r2, [pc, #44]	; (8002450 <MX_DMA_Init+0x3c>)
 8002424:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002428:	6313      	str	r3, [r2, #48]	; 0x30
 800242a:	4b09      	ldr	r3, [pc, #36]	; (8002450 <MX_DMA_Init+0x3c>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002432:	607b      	str	r3, [r7, #4]
 8002434:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002436:	2200      	movs	r2, #0
 8002438:	2100      	movs	r1, #0
 800243a:	2038      	movs	r0, #56	; 0x38
 800243c:	f001 fa2f 	bl	800389e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002440:	2038      	movs	r0, #56	; 0x38
 8002442:	f001 fa48 	bl	80038d6 <HAL_NVIC_EnableIRQ>

}
 8002446:	bf00      	nop
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40023800 	.word	0x40023800

08002454 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08a      	sub	sp, #40	; 0x28
 8002458:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800245a:	f107 0314 	add.w	r3, r7, #20
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	605a      	str	r2, [r3, #4]
 8002464:	609a      	str	r2, [r3, #8]
 8002466:	60da      	str	r2, [r3, #12]
 8002468:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	613b      	str	r3, [r7, #16]
 800246e:	4b44      	ldr	r3, [pc, #272]	; (8002580 <MX_GPIO_Init+0x12c>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	4a43      	ldr	r2, [pc, #268]	; (8002580 <MX_GPIO_Init+0x12c>)
 8002474:	f043 0304 	orr.w	r3, r3, #4
 8002478:	6313      	str	r3, [r2, #48]	; 0x30
 800247a:	4b41      	ldr	r3, [pc, #260]	; (8002580 <MX_GPIO_Init+0x12c>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	f003 0304 	and.w	r3, r3, #4
 8002482:	613b      	str	r3, [r7, #16]
 8002484:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	4b3d      	ldr	r3, [pc, #244]	; (8002580 <MX_GPIO_Init+0x12c>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	4a3c      	ldr	r2, [pc, #240]	; (8002580 <MX_GPIO_Init+0x12c>)
 8002490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002494:	6313      	str	r3, [r2, #48]	; 0x30
 8002496:	4b3a      	ldr	r3, [pc, #232]	; (8002580 <MX_GPIO_Init+0x12c>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a2:	2300      	movs	r3, #0
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	4b36      	ldr	r3, [pc, #216]	; (8002580 <MX_GPIO_Init+0x12c>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	4a35      	ldr	r2, [pc, #212]	; (8002580 <MX_GPIO_Init+0x12c>)
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	6313      	str	r3, [r2, #48]	; 0x30
 80024b2:	4b33      	ldr	r3, [pc, #204]	; (8002580 <MX_GPIO_Init+0x12c>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	60bb      	str	r3, [r7, #8]
 80024bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	607b      	str	r3, [r7, #4]
 80024c2:	4b2f      	ldr	r3, [pc, #188]	; (8002580 <MX_GPIO_Init+0x12c>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	4a2e      	ldr	r2, [pc, #184]	; (8002580 <MX_GPIO_Init+0x12c>)
 80024c8:	f043 0302 	orr.w	r3, r3, #2
 80024cc:	6313      	str	r3, [r2, #48]	; 0x30
 80024ce:	4b2c      	ldr	r3, [pc, #176]	; (8002580 <MX_GPIO_Init+0x12c>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	607b      	str	r3, [r7, #4]
 80024d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80024da:	2200      	movs	r2, #0
 80024dc:	2120      	movs	r1, #32
 80024de:	4829      	ldr	r0, [pc, #164]	; (8002584 <MX_GPIO_Init+0x130>)
 80024e0:	f001 ff3e 	bl	8004360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 80024e4:	2201      	movs	r2, #1
 80024e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024ea:	4827      	ldr	r0, [pc, #156]	; (8002588 <MX_GPIO_Init+0x134>)
 80024ec:	f001 ff38 	bl	8004360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SHDN_GPIO_Port, SHDN_Pin, GPIO_PIN_SET);
 80024f0:	2201      	movs	r2, #1
 80024f2:	2180      	movs	r1, #128	; 0x80
 80024f4:	4825      	ldr	r0, [pc, #148]	; (800258c <MX_GPIO_Init+0x138>)
 80024f6:	f001 ff33 	bl	8004360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOAD_GPIO_Port, LOAD_Pin, GPIO_PIN_SET);
 80024fa:	2201      	movs	r2, #1
 80024fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002500:	4820      	ldr	r0, [pc, #128]	; (8002584 <MX_GPIO_Init+0x130>)
 8002502:	f001 ff2d 	bl	8004360 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002506:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800250a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800250c:	4b20      	ldr	r3, [pc, #128]	; (8002590 <MX_GPIO_Init+0x13c>)
 800250e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002510:	2300      	movs	r3, #0
 8002512:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002514:	f107 0314 	add.w	r3, r7, #20
 8002518:	4619      	mov	r1, r3
 800251a:	481c      	ldr	r0, [pc, #112]	; (800258c <MX_GPIO_Init+0x138>)
 800251c:	f001 fd86 	bl	800402c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LOAD_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LOAD_Pin;
 8002520:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002526:	2301      	movs	r3, #1
 8002528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252e:	2300      	movs	r3, #0
 8002530:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002532:	f107 0314 	add.w	r3, r7, #20
 8002536:	4619      	mov	r1, r3
 8002538:	4812      	ldr	r0, [pc, #72]	; (8002584 <MX_GPIO_Init+0x130>)
 800253a:	f001 fd77 	bl	800402c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_SS_Pin */
  GPIO_InitStruct.Pin = SPI_SS_Pin;
 800253e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002544:	2301      	movs	r3, #1
 8002546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002548:	2300      	movs	r3, #0
 800254a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800254c:	2300      	movs	r3, #0
 800254e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SS_GPIO_Port, &GPIO_InitStruct);
 8002550:	f107 0314 	add.w	r3, r7, #20
 8002554:	4619      	mov	r1, r3
 8002556:	480c      	ldr	r0, [pc, #48]	; (8002588 <MX_GPIO_Init+0x134>)
 8002558:	f001 fd68 	bl	800402c <HAL_GPIO_Init>

  /*Configure GPIO pin : SHDN_Pin */
  GPIO_InitStruct.Pin = SHDN_Pin;
 800255c:	2380      	movs	r3, #128	; 0x80
 800255e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002560:	2301      	movs	r3, #1
 8002562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002564:	2300      	movs	r3, #0
 8002566:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002568:	2300      	movs	r3, #0
 800256a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SHDN_GPIO_Port, &GPIO_InitStruct);
 800256c:	f107 0314 	add.w	r3, r7, #20
 8002570:	4619      	mov	r1, r3
 8002572:	4806      	ldr	r0, [pc, #24]	; (800258c <MX_GPIO_Init+0x138>)
 8002574:	f001 fd5a 	bl	800402c <HAL_GPIO_Init>

}
 8002578:	bf00      	nop
 800257a:	3728      	adds	r7, #40	; 0x28
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40023800 	.word	0x40023800
 8002584:	40020000 	.word	0x40020000
 8002588:	40020400 	.word	0x40020400
 800258c:	40020800 	.word	0x40020800
 8002590:	10210000 	.word	0x10210000

08002594 <UARTRecieveIT>:

/* USER CODE BEGIN 4 */
int16_t UARTRecieveIT()
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
	static uint32_t dataPos =0;
	int16_t data=-1;
 800259a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800259e:	80fb      	strh	r3, [r7, #6]
	if(huart2.RxXferSize - huart2.RxXferCount!=dataPos)
 80025a0:	4b12      	ldr	r3, [pc, #72]	; (80025ec <UARTRecieveIT+0x58>)
 80025a2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80025a4:	461a      	mov	r2, r3
 80025a6:	4b11      	ldr	r3, [pc, #68]	; (80025ec <UARTRecieveIT+0x58>)
 80025a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	461a      	mov	r2, r3
 80025b0:	4b0f      	ldr	r3, [pc, #60]	; (80025f0 <UARTRecieveIT+0x5c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d010      	beq.n	80025da <UARTRecieveIT+0x46>
	{
		data=RxDataBuffer[dataPos];
 80025b8:	4b0d      	ldr	r3, [pc, #52]	; (80025f0 <UARTRecieveIT+0x5c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a0d      	ldr	r2, [pc, #52]	; (80025f4 <UARTRecieveIT+0x60>)
 80025be:	5cd3      	ldrb	r3, [r2, r3]
 80025c0:	80fb      	strh	r3, [r7, #6]
		dataPos= (dataPos+1)%huart2.RxXferSize;
 80025c2:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <UARTRecieveIT+0x5c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	3301      	adds	r3, #1
 80025c8:	4a08      	ldr	r2, [pc, #32]	; (80025ec <UARTRecieveIT+0x58>)
 80025ca:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80025cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80025d0:	fb02 f201 	mul.w	r2, r2, r1
 80025d4:	1a9b      	subs	r3, r3, r2
 80025d6:	4a06      	ldr	r2, [pc, #24]	; (80025f0 <UARTRecieveIT+0x5c>)
 80025d8:	6013      	str	r3, [r2, #0]
	}
	return data;
 80025da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	200005d0 	.word	0x200005d0
 80025f0:	20000440 	.word	0x20000440
 80025f4:	2000036c 	.word	0x2000036c

080025f8 <MCP4922SetOutput>:

void MCP4922SetOutput(uint8_t Config, uint16_t DACOutput)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	460a      	mov	r2, r1
 8002602:	71fb      	strb	r3, [r7, #7]
 8002604:	4613      	mov	r3, r2
 8002606:	80bb      	strh	r3, [r7, #4]
	uint32_t OutputPacket = (DACOutput & 0x0fff) | ((Config & 0xf) << 12);
 8002608:	88bb      	ldrh	r3, [r7, #4]
 800260a:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800260e:	79fb      	ldrb	r3, [r7, #7]
 8002610:	031b      	lsls	r3, r3, #12
 8002612:	b29b      	uxth	r3, r3
 8002614:	4313      	orrs	r3, r2
 8002616:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_RESET);
 8002618:	2200      	movs	r2, #0
 800261a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800261e:	4807      	ldr	r0, [pc, #28]	; (800263c <MCP4922SetOutput+0x44>)
 8002620:	f001 fe9e 	bl	8004360 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi3, &OutputPacket, 1);
 8002624:	f107 030c 	add.w	r3, r7, #12
 8002628:	2201      	movs	r2, #1
 800262a:	4619      	mov	r1, r3
 800262c:	4804      	ldr	r0, [pc, #16]	; (8002640 <MCP4922SetOutput+0x48>)
 800262e:	f002 fb77 	bl	8004d20 <HAL_SPI_Transmit_IT>
}
 8002632:	bf00      	nop
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40020400 	.word	0x40020400
 8002640:	20000490 	.word	0x20000490

08002644 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi3)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a06      	ldr	r2, [pc, #24]	; (8002668 <HAL_SPI_TxCpltCallback+0x24>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d105      	bne.n	8002660 <HAL_SPI_TxCpltCallback+0x1c>
	{
		HAL_GPIO_WritePin(SPI_SS_GPIO_Port, SPI_SS_Pin, GPIO_PIN_SET);
 8002654:	2201      	movs	r2, #1
 8002656:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800265a:	4804      	ldr	r0, [pc, #16]	; (800266c <HAL_SPI_TxCpltCallback+0x28>)
 800265c:	f001 fe80 	bl	8004360 <HAL_GPIO_WritePin>
	}
}
 8002660:	bf00      	nop
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	20000490 	.word	0x20000490
 800266c:	40020400 	.word	0x40020400

08002670 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002670:	b490      	push	{r4, r7}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a09      	ldr	r2, [pc, #36]	; (80026a0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d109      	bne.n	8002694 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micro += 4294967295;
 8002680:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002682:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002686:	f111 33ff 	adds.w	r3, r1, #4294967295
 800268a:	f142 0400 	adc.w	r4, r2, #0
 800268e:	4a05      	ldr	r2, [pc, #20]	; (80026a4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002690:	e9c2 3400 	strd	r3, r4, [r2]
	}
}
 8002694:	bf00      	nop
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bc90      	pop	{r4, r7}
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	20000590 	.word	0x20000590
 80026a4:	200003b8 	.word	0x200003b8

080026a8 <micros>:

inline uint64_t micros()
{
 80026a8:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 80026ac:	af00      	add	r7, sp, #0
	return htim2.Instance->CNT + _micro;
 80026ae:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <micros+0x2c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	4619      	mov	r1, r3
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	4b07      	ldr	r3, [pc, #28]	; (80026d8 <micros+0x30>)
 80026bc:	e9d3 bc00 	ldrd	fp, ip, [r3]
 80026c0:	eb1b 0301 	adds.w	r3, fp, r1
 80026c4:	eb4c 0402 	adc.w	r4, ip, r2
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	4621      	mov	r1, r4
 80026cc:	46bd      	mov	sp, r7
 80026ce:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 80026d2:	4770      	bx	lr
 80026d4:	20000590 	.word	0x20000590
 80026d8:	200003b8 	.word	0x200003b8

080026dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026e0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80026e2:	e7fe      	b.n	80026e2 <Error_Handler+0x6>

080026e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	607b      	str	r3, [r7, #4]
 80026ee:	4b10      	ldr	r3, [pc, #64]	; (8002730 <HAL_MspInit+0x4c>)
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	4a0f      	ldr	r2, [pc, #60]	; (8002730 <HAL_MspInit+0x4c>)
 80026f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026f8:	6453      	str	r3, [r2, #68]	; 0x44
 80026fa:	4b0d      	ldr	r3, [pc, #52]	; (8002730 <HAL_MspInit+0x4c>)
 80026fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002702:	607b      	str	r3, [r7, #4]
 8002704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	603b      	str	r3, [r7, #0]
 800270a:	4b09      	ldr	r3, [pc, #36]	; (8002730 <HAL_MspInit+0x4c>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	4a08      	ldr	r2, [pc, #32]	; (8002730 <HAL_MspInit+0x4c>)
 8002710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002714:	6413      	str	r3, [r2, #64]	; 0x40
 8002716:	4b06      	ldr	r3, [pc, #24]	; (8002730 <HAL_MspInit+0x4c>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271e:	603b      	str	r3, [r7, #0]
 8002720:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002722:	2007      	movs	r0, #7
 8002724:	f001 f8b0 	bl	8003888 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002728:	bf00      	nop
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40023800 	.word	0x40023800

08002734 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08a      	sub	sp, #40	; 0x28
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273c:	f107 0314 	add.w	r3, r7, #20
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	60da      	str	r2, [r3, #12]
 800274a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a33      	ldr	r2, [pc, #204]	; (8002820 <HAL_ADC_MspInit+0xec>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d15f      	bne.n	8002816 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	4b32      	ldr	r3, [pc, #200]	; (8002824 <HAL_ADC_MspInit+0xf0>)
 800275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275e:	4a31      	ldr	r2, [pc, #196]	; (8002824 <HAL_ADC_MspInit+0xf0>)
 8002760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002764:	6453      	str	r3, [r2, #68]	; 0x44
 8002766:	4b2f      	ldr	r3, [pc, #188]	; (8002824 <HAL_ADC_MspInit+0xf0>)
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276e:	613b      	str	r3, [r7, #16]
 8002770:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002772:	2300      	movs	r3, #0
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	4b2b      	ldr	r3, [pc, #172]	; (8002824 <HAL_ADC_MspInit+0xf0>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	4a2a      	ldr	r2, [pc, #168]	; (8002824 <HAL_ADC_MspInit+0xf0>)
 800277c:	f043 0301 	orr.w	r3, r3, #1
 8002780:	6313      	str	r3, [r2, #48]	; 0x30
 8002782:	4b28      	ldr	r3, [pc, #160]	; (8002824 <HAL_ADC_MspInit+0xf0>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800278e:	2301      	movs	r3, #1
 8002790:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002792:	2303      	movs	r3, #3
 8002794:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002796:	2300      	movs	r3, #0
 8002798:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800279a:	f107 0314 	add.w	r3, r7, #20
 800279e:	4619      	mov	r1, r3
 80027a0:	4821      	ldr	r0, [pc, #132]	; (8002828 <HAL_ADC_MspInit+0xf4>)
 80027a2:	f001 fc43 	bl	800402c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80027a6:	4b21      	ldr	r3, [pc, #132]	; (800282c <HAL_ADC_MspInit+0xf8>)
 80027a8:	4a21      	ldr	r2, [pc, #132]	; (8002830 <HAL_ADC_MspInit+0xfc>)
 80027aa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80027ac:	4b1f      	ldr	r3, [pc, #124]	; (800282c <HAL_ADC_MspInit+0xf8>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027b2:	4b1e      	ldr	r3, [pc, #120]	; (800282c <HAL_ADC_MspInit+0xf8>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80027b8:	4b1c      	ldr	r3, [pc, #112]	; (800282c <HAL_ADC_MspInit+0xf8>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80027be:	4b1b      	ldr	r3, [pc, #108]	; (800282c <HAL_ADC_MspInit+0xf8>)
 80027c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027c4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027c6:	4b19      	ldr	r3, [pc, #100]	; (800282c <HAL_ADC_MspInit+0xf8>)
 80027c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027cc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027ce:	4b17      	ldr	r3, [pc, #92]	; (800282c <HAL_ADC_MspInit+0xf8>)
 80027d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80027d6:	4b15      	ldr	r3, [pc, #84]	; (800282c <HAL_ADC_MspInit+0xf8>)
 80027d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027dc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80027de:	4b13      	ldr	r3, [pc, #76]	; (800282c <HAL_ADC_MspInit+0xf8>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027e4:	4b11      	ldr	r3, [pc, #68]	; (800282c <HAL_ADC_MspInit+0xf8>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80027ea:	4810      	ldr	r0, [pc, #64]	; (800282c <HAL_ADC_MspInit+0xf8>)
 80027ec:	f001 f88e 	bl	800390c <HAL_DMA_Init>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80027f6:	f7ff ff71 	bl	80026dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a0b      	ldr	r2, [pc, #44]	; (800282c <HAL_ADC_MspInit+0xf8>)
 80027fe:	639a      	str	r2, [r3, #56]	; 0x38
 8002800:	4a0a      	ldr	r2, [pc, #40]	; (800282c <HAL_ADC_MspInit+0xf8>)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002806:	2200      	movs	r2, #0
 8002808:	2100      	movs	r1, #0
 800280a:	2012      	movs	r0, #18
 800280c:	f001 f847 	bl	800389e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002810:	2012      	movs	r0, #18
 8002812:	f001 f860 	bl	80038d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002816:	bf00      	nop
 8002818:	3728      	adds	r7, #40	; 0x28
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40012000 	.word	0x40012000
 8002824:	40023800 	.word	0x40023800
 8002828:	40020000 	.word	0x40020000
 800282c:	20000530 	.word	0x20000530
 8002830:	40026410 	.word	0x40026410

08002834 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08a      	sub	sp, #40	; 0x28
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283c:	f107 0314 	add.w	r3, r7, #20
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	60da      	str	r2, [r3, #12]
 800284a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a1d      	ldr	r2, [pc, #116]	; (80028c8 <HAL_SPI_MspInit+0x94>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d133      	bne.n	80028be <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	613b      	str	r3, [r7, #16]
 800285a:	4b1c      	ldr	r3, [pc, #112]	; (80028cc <HAL_SPI_MspInit+0x98>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	4a1b      	ldr	r2, [pc, #108]	; (80028cc <HAL_SPI_MspInit+0x98>)
 8002860:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002864:	6413      	str	r3, [r2, #64]	; 0x40
 8002866:	4b19      	ldr	r3, [pc, #100]	; (80028cc <HAL_SPI_MspInit+0x98>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	4b15      	ldr	r3, [pc, #84]	; (80028cc <HAL_SPI_MspInit+0x98>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	4a14      	ldr	r2, [pc, #80]	; (80028cc <HAL_SPI_MspInit+0x98>)
 800287c:	f043 0302 	orr.w	r3, r3, #2
 8002880:	6313      	str	r3, [r2, #48]	; 0x30
 8002882:	4b12      	ldr	r3, [pc, #72]	; (80028cc <HAL_SPI_MspInit+0x98>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800288e:	2338      	movs	r3, #56	; 0x38
 8002890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002892:	2302      	movs	r3, #2
 8002894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002896:	2300      	movs	r3, #0
 8002898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800289a:	2303      	movs	r3, #3
 800289c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800289e:	2306      	movs	r3, #6
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a2:	f107 0314 	add.w	r3, r7, #20
 80028a6:	4619      	mov	r1, r3
 80028a8:	4809      	ldr	r0, [pc, #36]	; (80028d0 <HAL_SPI_MspInit+0x9c>)
 80028aa:	f001 fbbf 	bl	800402c <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80028ae:	2200      	movs	r2, #0
 80028b0:	2100      	movs	r1, #0
 80028b2:	2033      	movs	r0, #51	; 0x33
 80028b4:	f000 fff3 	bl	800389e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80028b8:	2033      	movs	r0, #51	; 0x33
 80028ba:	f001 f80c 	bl	80038d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80028be:	bf00      	nop
 80028c0:	3728      	adds	r7, #40	; 0x28
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40003c00 	.word	0x40003c00
 80028cc:	40023800 	.word	0x40023800
 80028d0:	40020400 	.word	0x40020400

080028d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e4:	d116      	bne.n	8002914 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	4b16      	ldr	r3, [pc, #88]	; (8002944 <HAL_TIM_Base_MspInit+0x70>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	4a15      	ldr	r2, [pc, #84]	; (8002944 <HAL_TIM_Base_MspInit+0x70>)
 80028f0:	f043 0301 	orr.w	r3, r3, #1
 80028f4:	6413      	str	r3, [r2, #64]	; 0x40
 80028f6:	4b13      	ldr	r3, [pc, #76]	; (8002944 <HAL_TIM_Base_MspInit+0x70>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002902:	2200      	movs	r2, #0
 8002904:	2100      	movs	r1, #0
 8002906:	201c      	movs	r0, #28
 8002908:	f000 ffc9 	bl	800389e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800290c:	201c      	movs	r0, #28
 800290e:	f000 ffe2 	bl	80038d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002912:	e012      	b.n	800293a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a0b      	ldr	r2, [pc, #44]	; (8002948 <HAL_TIM_Base_MspInit+0x74>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d10d      	bne.n	800293a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	60bb      	str	r3, [r7, #8]
 8002922:	4b08      	ldr	r3, [pc, #32]	; (8002944 <HAL_TIM_Base_MspInit+0x70>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	4a07      	ldr	r2, [pc, #28]	; (8002944 <HAL_TIM_Base_MspInit+0x70>)
 8002928:	f043 0302 	orr.w	r3, r3, #2
 800292c:	6413      	str	r3, [r2, #64]	; 0x40
 800292e:	4b05      	ldr	r3, [pc, #20]	; (8002944 <HAL_TIM_Base_MspInit+0x70>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	60bb      	str	r3, [r7, #8]
 8002938:	68bb      	ldr	r3, [r7, #8]
}
 800293a:	bf00      	nop
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40023800 	.word	0x40023800
 8002948:	40000400 	.word	0x40000400

0800294c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b08a      	sub	sp, #40	; 0x28
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002954:	f107 0314 	add.w	r3, r7, #20
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	605a      	str	r2, [r3, #4]
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	60da      	str	r2, [r3, #12]
 8002962:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a1d      	ldr	r2, [pc, #116]	; (80029e0 <HAL_UART_MspInit+0x94>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d133      	bne.n	80029d6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800296e:	2300      	movs	r3, #0
 8002970:	613b      	str	r3, [r7, #16]
 8002972:	4b1c      	ldr	r3, [pc, #112]	; (80029e4 <HAL_UART_MspInit+0x98>)
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	4a1b      	ldr	r2, [pc, #108]	; (80029e4 <HAL_UART_MspInit+0x98>)
 8002978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800297c:	6413      	str	r3, [r2, #64]	; 0x40
 800297e:	4b19      	ldr	r3, [pc, #100]	; (80029e4 <HAL_UART_MspInit+0x98>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002986:	613b      	str	r3, [r7, #16]
 8002988:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	4b15      	ldr	r3, [pc, #84]	; (80029e4 <HAL_UART_MspInit+0x98>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	4a14      	ldr	r2, [pc, #80]	; (80029e4 <HAL_UART_MspInit+0x98>)
 8002994:	f043 0301 	orr.w	r3, r3, #1
 8002998:	6313      	str	r3, [r2, #48]	; 0x30
 800299a:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <HAL_UART_MspInit+0x98>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80029a6:	230c      	movs	r3, #12
 80029a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029aa:	2302      	movs	r3, #2
 80029ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b2:	2303      	movs	r3, #3
 80029b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029b6:	2307      	movs	r3, #7
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ba:	f107 0314 	add.w	r3, r7, #20
 80029be:	4619      	mov	r1, r3
 80029c0:	4809      	ldr	r0, [pc, #36]	; (80029e8 <HAL_UART_MspInit+0x9c>)
 80029c2:	f001 fb33 	bl	800402c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80029c6:	2200      	movs	r2, #0
 80029c8:	2100      	movs	r1, #0
 80029ca:	2026      	movs	r0, #38	; 0x26
 80029cc:	f000 ff67 	bl	800389e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80029d0:	2026      	movs	r0, #38	; 0x26
 80029d2:	f000 ff80 	bl	80038d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80029d6:	bf00      	nop
 80029d8:	3728      	adds	r7, #40	; 0x28
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40004400 	.word	0x40004400
 80029e4:	40023800 	.word	0x40023800
 80029e8:	40020000 	.word	0x40020000

080029ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029f0:	e7fe      	b.n	80029f0 <NMI_Handler+0x4>

080029f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029f2:	b480      	push	{r7}
 80029f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029f6:	e7fe      	b.n	80029f6 <HardFault_Handler+0x4>

080029f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029fc:	e7fe      	b.n	80029fc <MemManage_Handler+0x4>

080029fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029fe:	b480      	push	{r7}
 8002a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a02:	e7fe      	b.n	8002a02 <BusFault_Handler+0x4>

08002a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a08:	e7fe      	b.n	8002a08 <UsageFault_Handler+0x4>

08002a0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a0e:	bf00      	nop
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a1c:	bf00      	nop
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a26:	b480      	push	{r7}
 8002a28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a2a:	bf00      	nop
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a38:	f000 f8fc 	bl	8002c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a3c:	bf00      	nop
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002a44:	4802      	ldr	r0, [pc, #8]	; (8002a50 <ADC_IRQHandler+0x10>)
 8002a46:	f000 f958 	bl	8002cfa <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	200004e8 	.word	0x200004e8

08002a54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a58:	4802      	ldr	r0, [pc, #8]	; (8002a64 <TIM2_IRQHandler+0x10>)
 8002a5a:	f002 fcc8 	bl	80053ee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a5e:	bf00      	nop
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	20000590 	.word	0x20000590

08002a68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a6c:	4802      	ldr	r0, [pc, #8]	; (8002a78 <USART2_IRQHandler+0x10>)
 8002a6e:	f003 f97d 	bl	8005d6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a72:	bf00      	nop
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	200005d0 	.word	0x200005d0

08002a7c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002a80:	4802      	ldr	r0, [pc, #8]	; (8002a8c <SPI3_IRQHandler+0x10>)
 8002a82:	f002 f9cf 	bl	8004e24 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002a86:	bf00      	nop
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20000490 	.word	0x20000490

08002a90 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a94:	4802      	ldr	r0, [pc, #8]	; (8002aa0 <DMA2_Stream0_IRQHandler+0x10>)
 8002a96:	f001 f861 	bl	8003b5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002a9a:	bf00      	nop
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20000530 	.word	0x20000530

08002aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002aac:	4a14      	ldr	r2, [pc, #80]	; (8002b00 <_sbrk+0x5c>)
 8002aae:	4b15      	ldr	r3, [pc, #84]	; (8002b04 <_sbrk+0x60>)
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ab8:	4b13      	ldr	r3, [pc, #76]	; (8002b08 <_sbrk+0x64>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d102      	bne.n	8002ac6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ac0:	4b11      	ldr	r3, [pc, #68]	; (8002b08 <_sbrk+0x64>)
 8002ac2:	4a12      	ldr	r2, [pc, #72]	; (8002b0c <_sbrk+0x68>)
 8002ac4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ac6:	4b10      	ldr	r3, [pc, #64]	; (8002b08 <_sbrk+0x64>)
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4413      	add	r3, r2
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d207      	bcs.n	8002ae4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ad4:	f003 ff50 	bl	8006978 <__errno>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	230c      	movs	r3, #12
 8002adc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002ade:	f04f 33ff 	mov.w	r3, #4294967295
 8002ae2:	e009      	b.n	8002af8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ae4:	4b08      	ldr	r3, [pc, #32]	; (8002b08 <_sbrk+0x64>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002aea:	4b07      	ldr	r3, [pc, #28]	; (8002b08 <_sbrk+0x64>)
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4413      	add	r3, r2
 8002af2:	4a05      	ldr	r2, [pc, #20]	; (8002b08 <_sbrk+0x64>)
 8002af4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002af6:	68fb      	ldr	r3, [r7, #12]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3718      	adds	r7, #24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	20020000 	.word	0x20020000
 8002b04:	00000400 	.word	0x00000400
 8002b08:	20000444 	.word	0x20000444
 8002b0c:	20000618 	.word	0x20000618

08002b10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b14:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <SystemInit+0x28>)
 8002b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1a:	4a07      	ldr	r2, [pc, #28]	; (8002b38 <SystemInit+0x28>)
 8002b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b24:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <SystemInit+0x28>)
 8002b26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b2a:	609a      	str	r2, [r3, #8]
#endif
}
 8002b2c:	bf00      	nop
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	e000ed00 	.word	0xe000ed00

08002b3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b74 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b40:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b42:	e003      	b.n	8002b4c <LoopCopyDataInit>

08002b44 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b44:	4b0c      	ldr	r3, [pc, #48]	; (8002b78 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b46:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b48:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b4a:	3104      	adds	r1, #4

08002b4c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b4c:	480b      	ldr	r0, [pc, #44]	; (8002b7c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b4e:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b50:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b52:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b54:	d3f6      	bcc.n	8002b44 <CopyDataInit>
  ldr  r2, =_sbss
 8002b56:	4a0b      	ldr	r2, [pc, #44]	; (8002b84 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b58:	e002      	b.n	8002b60 <LoopFillZerobss>

08002b5a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b5a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002b5c:	f842 3b04 	str.w	r3, [r2], #4

08002b60 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b60:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002b62:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002b64:	d3f9      	bcc.n	8002b5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b66:	f7ff ffd3 	bl	8002b10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b6a:	f003 ff0b 	bl	8006984 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b6e:	f7fe fb03 	bl	8001178 <main>
  bx  lr    
 8002b72:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b74:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002b78:	08009f58 	.word	0x08009f58
  ldr  r0, =_sdata
 8002b7c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b80:	2000034c 	.word	0x2000034c
  ldr  r2, =_sbss
 8002b84:	20000350 	.word	0x20000350
  ldr  r3, = _ebss
 8002b88:	20000618 	.word	0x20000618

08002b8c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b8c:	e7fe      	b.n	8002b8c <DMA1_Stream0_IRQHandler>
	...

08002b90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b94:	4b0e      	ldr	r3, [pc, #56]	; (8002bd0 <HAL_Init+0x40>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a0d      	ldr	r2, [pc, #52]	; (8002bd0 <HAL_Init+0x40>)
 8002b9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ba0:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <HAL_Init+0x40>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a0a      	ldr	r2, [pc, #40]	; (8002bd0 <HAL_Init+0x40>)
 8002ba6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002baa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bac:	4b08      	ldr	r3, [pc, #32]	; (8002bd0 <HAL_Init+0x40>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a07      	ldr	r2, [pc, #28]	; (8002bd0 <HAL_Init+0x40>)
 8002bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bb8:	2003      	movs	r0, #3
 8002bba:	f000 fe65 	bl	8003888 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	f000 f808 	bl	8002bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bc4:	f7ff fd8e 	bl	80026e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40023c00 	.word	0x40023c00

08002bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bdc:	4b12      	ldr	r3, [pc, #72]	; (8002c28 <HAL_InitTick+0x54>)
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	4b12      	ldr	r3, [pc, #72]	; (8002c2c <HAL_InitTick+0x58>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	4619      	mov	r1, r3
 8002be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 fe7d 	bl	80038f2 <HAL_SYSTICK_Config>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e00e      	b.n	8002c20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b0f      	cmp	r3, #15
 8002c06:	d80a      	bhi.n	8002c1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c08:	2200      	movs	r2, #0
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c10:	f000 fe45 	bl	800389e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c14:	4a06      	ldr	r2, [pc, #24]	; (8002c30 <HAL_InitTick+0x5c>)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	e000      	b.n	8002c20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	20000170 	.word	0x20000170
 8002c2c:	20000178 	.word	0x20000178
 8002c30:	20000174 	.word	0x20000174

08002c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c38:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <HAL_IncTick+0x20>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <HAL_IncTick+0x24>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4413      	add	r3, r2
 8002c44:	4a04      	ldr	r2, [pc, #16]	; (8002c58 <HAL_IncTick+0x24>)
 8002c46:	6013      	str	r3, [r2, #0]
}
 8002c48:	bf00      	nop
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	20000178 	.word	0x20000178
 8002c58:	20000610 	.word	0x20000610

08002c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c60:	4b03      	ldr	r3, [pc, #12]	; (8002c70 <HAL_GetTick+0x14>)
 8002c62:	681b      	ldr	r3, [r3, #0]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	20000610 	.word	0x20000610

08002c74 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e033      	b.n	8002cf2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d109      	bne.n	8002ca6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7ff fd4e 	bl	8002734 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f003 0310 	and.w	r3, r3, #16
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d118      	bne.n	8002ce4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002cba:	f023 0302 	bic.w	r3, r3, #2
 8002cbe:	f043 0202 	orr.w	r2, r3, #2
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 fb86 	bl	80033d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	f023 0303 	bic.w	r3, r3, #3
 8002cda:	f043 0201 	orr.w	r2, r3, #1
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	641a      	str	r2, [r3, #64]	; 0x40
 8002ce2:	e001      	b.n	8002ce8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b084      	sub	sp, #16
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	2300      	movs	r3, #0
 8002d08:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	bf0c      	ite	eq
 8002d18:	2301      	moveq	r3, #1
 8002d1a:	2300      	movne	r3, #0
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f003 0320 	and.w	r3, r3, #32
 8002d2a:	2b20      	cmp	r3, #32
 8002d2c:	bf0c      	ite	eq
 8002d2e:	2301      	moveq	r3, #1
 8002d30:	2300      	movne	r3, #0
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d049      	beq.n	8002dd0 <HAL_ADC_IRQHandler+0xd6>
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d046      	beq.n	8002dd0 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f003 0310 	and.w	r3, r3, #16
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d105      	bne.n	8002d5a <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d12b      	bne.n	8002dc0 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d127      	bne.n	8002dc0 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d76:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d006      	beq.n	8002d8c <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d119      	bne.n	8002dc0 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 0220 	bic.w	r2, r2, #32
 8002d9a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d105      	bne.n	8002dc0 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db8:	f043 0201 	orr.w	r2, r3, #1
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 f9af 	bl	8003124 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f06f 0212 	mvn.w	r2, #18
 8002dce:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0304 	and.w	r3, r3, #4
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	bf0c      	ite	eq
 8002dde:	2301      	moveq	r3, #1
 8002de0:	2300      	movne	r3, #0
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df0:	2b80      	cmp	r3, #128	; 0x80
 8002df2:	bf0c      	ite	eq
 8002df4:	2301      	moveq	r3, #1
 8002df6:	2300      	movne	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d057      	beq.n	8002eb2 <HAL_ADC_IRQHandler+0x1b8>
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d054      	beq.n	8002eb2 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	f003 0310 	and.w	r3, r3, #16
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d105      	bne.n	8002e20 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d139      	bne.n	8002ea2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e34:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d006      	beq.n	8002e4a <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d12b      	bne.n	8002ea2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d124      	bne.n	8002ea2 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d11d      	bne.n	8002ea2 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d119      	bne.n	8002ea2 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e7c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d105      	bne.n	8002ea2 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	f043 0201 	orr.w	r2, r3, #1
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 fc16 	bl	80036d4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f06f 020c 	mvn.w	r2, #12
 8002eb0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	bf0c      	ite	eq
 8002ec0:	2301      	moveq	r3, #1
 8002ec2:	2300      	movne	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed2:	2b40      	cmp	r3, #64	; 0x40
 8002ed4:	bf0c      	ite	eq
 8002ed6:	2301      	moveq	r3, #1
 8002ed8:	2300      	movne	r3, #0
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d017      	beq.n	8002f14 <HAL_ADC_IRQHandler+0x21a>
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d014      	beq.n	8002f14 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d10d      	bne.n	8002f14 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f921 	bl	800314c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f06f 0201 	mvn.w	r2, #1
 8002f12:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0320 	and.w	r3, r3, #32
 8002f1e:	2b20      	cmp	r3, #32
 8002f20:	bf0c      	ite	eq
 8002f22:	2301      	moveq	r3, #1
 8002f24:	2300      	movne	r3, #0
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f38:	bf0c      	ite	eq
 8002f3a:	2301      	moveq	r3, #1
 8002f3c:	2300      	movne	r3, #0
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d015      	beq.n	8002f74 <HAL_ADC_IRQHandler+0x27a>
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d012      	beq.n	8002f74 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f52:	f043 0202 	orr.w	r2, r3, #2
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f06f 0220 	mvn.w	r2, #32
 8002f62:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 f8fb 	bl	8003160 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f06f 0220 	mvn.w	r2, #32
 8002f72:	601a      	str	r2, [r3, #0]
  }
}
 8002f74:	bf00      	nop
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d101      	bne.n	8002f9a <HAL_ADC_Start_DMA+0x1e>
 8002f96:	2302      	movs	r3, #2
 8002f98:	e0b1      	b.n	80030fe <HAL_ADC_Start_DMA+0x182>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d018      	beq.n	8002fe2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0201 	orr.w	r2, r2, #1
 8002fbe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002fc0:	4b51      	ldr	r3, [pc, #324]	; (8003108 <HAL_ADC_Start_DMA+0x18c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a51      	ldr	r2, [pc, #324]	; (800310c <HAL_ADC_Start_DMA+0x190>)
 8002fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fca:	0c9a      	lsrs	r2, r3, #18
 8002fcc:	4613      	mov	r3, r2
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	4413      	add	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002fd4:	e002      	b.n	8002fdc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1f9      	bne.n	8002fd6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	f040 8085 	bne.w	80030fc <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002ffa:	f023 0301 	bic.w	r3, r3, #1
 8002ffe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003010:	2b00      	cmp	r3, #0
 8003012:	d007      	beq.n	8003024 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003018:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800301c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800302c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003030:	d106      	bne.n	8003040 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003036:	f023 0206 	bic.w	r2, r3, #6
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	645a      	str	r2, [r3, #68]	; 0x44
 800303e:	e002      	b.n	8003046 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800304e:	4b30      	ldr	r3, [pc, #192]	; (8003110 <HAL_ADC_Start_DMA+0x194>)
 8003050:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003056:	4a2f      	ldr	r2, [pc, #188]	; (8003114 <HAL_ADC_Start_DMA+0x198>)
 8003058:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305e:	4a2e      	ldr	r2, [pc, #184]	; (8003118 <HAL_ADC_Start_DMA+0x19c>)
 8003060:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003066:	4a2d      	ldr	r2, [pc, #180]	; (800311c <HAL_ADC_Start_DMA+0x1a0>)
 8003068:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003072:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003082:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003092:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	334c      	adds	r3, #76	; 0x4c
 800309e:	4619      	mov	r1, r3
 80030a0:	68ba      	ldr	r2, [r7, #8]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f000 fce0 	bl	8003a68 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f003 031f 	and.w	r3, r3, #31
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10f      	bne.n	80030d4 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d11c      	bne.n	80030fc <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030d0:	609a      	str	r2, [r3, #8]
 80030d2:	e013      	b.n	80030fc <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a11      	ldr	r2, [pc, #68]	; (8003120 <HAL_ADC_Start_DMA+0x1a4>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d10e      	bne.n	80030fc <HAL_ADC_Start_DMA+0x180>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d107      	bne.n	80030fc <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	689a      	ldr	r2, [r3, #8]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030fa:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3718      	adds	r7, #24
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	20000170 	.word	0x20000170
 800310c:	431bde83 	.word	0x431bde83
 8003110:	40012300 	.word	0x40012300
 8003114:	080035d1 	.word	0x080035d1
 8003118:	0800368b 	.word	0x0800368b
 800311c:	080036a7 	.word	0x080036a7
 8003120:	40012000 	.word	0x40012000

08003124 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800317e:	2300      	movs	r3, #0
 8003180:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003188:	2b01      	cmp	r3, #1
 800318a:	d101      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x1c>
 800318c:	2302      	movs	r3, #2
 800318e:	e113      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x244>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b09      	cmp	r3, #9
 800319e:	d925      	bls.n	80031ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68d9      	ldr	r1, [r3, #12]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	461a      	mov	r2, r3
 80031ae:	4613      	mov	r3, r2
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	4413      	add	r3, r2
 80031b4:	3b1e      	subs	r3, #30
 80031b6:	2207      	movs	r2, #7
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	43da      	mvns	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	400a      	ands	r2, r1
 80031c4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68d9      	ldr	r1, [r3, #12]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	4618      	mov	r0, r3
 80031d8:	4603      	mov	r3, r0
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	4403      	add	r3, r0
 80031de:	3b1e      	subs	r3, #30
 80031e0:	409a      	lsls	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	60da      	str	r2, [r3, #12]
 80031ea:	e022      	b.n	8003232 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6919      	ldr	r1, [r3, #16]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	461a      	mov	r2, r3
 80031fa:	4613      	mov	r3, r2
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	4413      	add	r3, r2
 8003200:	2207      	movs	r2, #7
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	43da      	mvns	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	400a      	ands	r2, r1
 800320e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6919      	ldr	r1, [r3, #16]
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	b29b      	uxth	r3, r3
 8003220:	4618      	mov	r0, r3
 8003222:	4603      	mov	r3, r0
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	4403      	add	r3, r0
 8003228:	409a      	lsls	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b06      	cmp	r3, #6
 8003238:	d824      	bhi.n	8003284 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	4613      	mov	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	3b05      	subs	r3, #5
 800324c:	221f      	movs	r2, #31
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	43da      	mvns	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	400a      	ands	r2, r1
 800325a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	b29b      	uxth	r3, r3
 8003268:	4618      	mov	r0, r3
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	4613      	mov	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	3b05      	subs	r3, #5
 8003276:	fa00 f203 	lsl.w	r2, r0, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	635a      	str	r2, [r3, #52]	; 0x34
 8003282:	e04c      	b.n	800331e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	2b0c      	cmp	r3, #12
 800328a:	d824      	bhi.n	80032d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	4613      	mov	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	3b23      	subs	r3, #35	; 0x23
 800329e:	221f      	movs	r2, #31
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	43da      	mvns	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	400a      	ands	r2, r1
 80032ac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	4618      	mov	r0, r3
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	3b23      	subs	r3, #35	; 0x23
 80032c8:	fa00 f203 	lsl.w	r2, r0, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	631a      	str	r2, [r3, #48]	; 0x30
 80032d4:	e023      	b.n	800331e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	4613      	mov	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4413      	add	r3, r2
 80032e6:	3b41      	subs	r3, #65	; 0x41
 80032e8:	221f      	movs	r2, #31
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	43da      	mvns	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	400a      	ands	r2, r1
 80032f6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	b29b      	uxth	r3, r3
 8003304:	4618      	mov	r0, r3
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	4613      	mov	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	3b41      	subs	r3, #65	; 0x41
 8003312:	fa00 f203 	lsl.w	r2, r0, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800331e:	4b29      	ldr	r3, [pc, #164]	; (80033c4 <HAL_ADC_ConfigChannel+0x250>)
 8003320:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a28      	ldr	r2, [pc, #160]	; (80033c8 <HAL_ADC_ConfigChannel+0x254>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d10f      	bne.n	800334c <HAL_ADC_ConfigChannel+0x1d8>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2b12      	cmp	r3, #18
 8003332:	d10b      	bne.n	800334c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a1d      	ldr	r2, [pc, #116]	; (80033c8 <HAL_ADC_ConfigChannel+0x254>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d12b      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x23a>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a1c      	ldr	r2, [pc, #112]	; (80033cc <HAL_ADC_ConfigChannel+0x258>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d003      	beq.n	8003368 <HAL_ADC_ConfigChannel+0x1f4>
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b11      	cmp	r3, #17
 8003366:	d122      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a11      	ldr	r2, [pc, #68]	; (80033cc <HAL_ADC_ConfigChannel+0x258>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d111      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800338a:	4b11      	ldr	r3, [pc, #68]	; (80033d0 <HAL_ADC_ConfigChannel+0x25c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a11      	ldr	r2, [pc, #68]	; (80033d4 <HAL_ADC_ConfigChannel+0x260>)
 8003390:	fba2 2303 	umull	r2, r3, r2, r3
 8003394:	0c9a      	lsrs	r2, r3, #18
 8003396:	4613      	mov	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80033a0:	e002      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	3b01      	subs	r3, #1
 80033a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1f9      	bne.n	80033a2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	40012300 	.word	0x40012300
 80033c8:	40012000 	.word	0x40012000
 80033cc:	10000012 	.word	0x10000012
 80033d0:	20000170 	.word	0x20000170
 80033d4:	431bde83 	.word	0x431bde83

080033d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033e0:	4b79      	ldr	r3, [pc, #484]	; (80035c8 <ADC_Init+0x1f0>)
 80033e2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	431a      	orrs	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800340c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6859      	ldr	r1, [r3, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	021a      	lsls	r2, r3, #8
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003430:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6859      	ldr	r1, [r3, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689a      	ldr	r2, [r3, #8]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003452:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6899      	ldr	r1, [r3, #8]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68da      	ldr	r2, [r3, #12]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346a:	4a58      	ldr	r2, [pc, #352]	; (80035cc <ADC_Init+0x1f4>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d022      	beq.n	80034b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689a      	ldr	r2, [r3, #8]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800347e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6899      	ldr	r1, [r3, #8]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80034a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6899      	ldr	r1, [r3, #8]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	609a      	str	r2, [r3, #8]
 80034b4:	e00f      	b.n	80034d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80034d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0202 	bic.w	r2, r2, #2
 80034e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6899      	ldr	r1, [r3, #8]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	7e1b      	ldrb	r3, [r3, #24]
 80034f0:	005a      	lsls	r2, r3, #1
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d01b      	beq.n	800353c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003512:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003522:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6859      	ldr	r1, [r3, #4]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	3b01      	subs	r3, #1
 8003530:	035a      	lsls	r2, r3, #13
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	605a      	str	r2, [r3, #4]
 800353a:	e007      	b.n	800354c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800354a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800355a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	3b01      	subs	r3, #1
 8003568:	051a      	lsls	r2, r3, #20
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003580:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6899      	ldr	r1, [r3, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800358e:	025a      	lsls	r2, r3, #9
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689a      	ldr	r2, [r3, #8]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6899      	ldr	r1, [r3, #8]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	029a      	lsls	r2, r3, #10
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	609a      	str	r2, [r3, #8]
}
 80035bc:	bf00      	nop
 80035be:	3714      	adds	r7, #20
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	40012300 	.word	0x40012300
 80035cc:	0f000001 	.word	0x0f000001

080035d0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035dc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d13c      	bne.n	8003664 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d12b      	bne.n	800365c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003608:	2b00      	cmp	r3, #0
 800360a:	d127      	bne.n	800365c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003612:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003616:	2b00      	cmp	r3, #0
 8003618:	d006      	beq.n	8003628 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003624:	2b00      	cmp	r3, #0
 8003626:	d119      	bne.n	800365c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0220 	bic.w	r2, r2, #32
 8003636:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003648:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d105      	bne.n	800365c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003654:	f043 0201 	orr.w	r2, r3, #1
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f7ff fd61 	bl	8003124 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003662:	e00e      	b.n	8003682 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003668:	f003 0310 	and.w	r3, r3, #16
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f7ff fd75 	bl	8003160 <HAL_ADC_ErrorCallback>
}
 8003676:	e004      	b.n	8003682 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	4798      	blx	r3
}
 8003682:	bf00      	nop
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b084      	sub	sp, #16
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003696:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f7ff fd4d 	bl	8003138 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800369e:	bf00      	nop
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b084      	sub	sp, #16
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2240      	movs	r2, #64	; 0x40
 80036b8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036be:	f043 0204 	orr.w	r2, r3, #4
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f7ff fd4a 	bl	8003160 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80036cc:	bf00      	nop
 80036ce:	3710      	adds	r7, #16
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036f8:	4b0c      	ldr	r3, [pc, #48]	; (800372c <__NVIC_SetPriorityGrouping+0x44>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036fe:	68ba      	ldr	r2, [r7, #8]
 8003700:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003704:	4013      	ands	r3, r2
 8003706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003710:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800371a:	4a04      	ldr	r2, [pc, #16]	; (800372c <__NVIC_SetPriorityGrouping+0x44>)
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	60d3      	str	r3, [r2, #12]
}
 8003720:	bf00      	nop
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	e000ed00 	.word	0xe000ed00

08003730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003734:	4b04      	ldr	r3, [pc, #16]	; (8003748 <__NVIC_GetPriorityGrouping+0x18>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	0a1b      	lsrs	r3, r3, #8
 800373a:	f003 0307 	and.w	r3, r3, #7
}
 800373e:	4618      	mov	r0, r3
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	e000ed00 	.word	0xe000ed00

0800374c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	4603      	mov	r3, r0
 8003754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375a:	2b00      	cmp	r3, #0
 800375c:	db0b      	blt.n	8003776 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800375e:	79fb      	ldrb	r3, [r7, #7]
 8003760:	f003 021f 	and.w	r2, r3, #31
 8003764:	4907      	ldr	r1, [pc, #28]	; (8003784 <__NVIC_EnableIRQ+0x38>)
 8003766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376a:	095b      	lsrs	r3, r3, #5
 800376c:	2001      	movs	r0, #1
 800376e:	fa00 f202 	lsl.w	r2, r0, r2
 8003772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003776:	bf00      	nop
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	e000e100 	.word	0xe000e100

08003788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	6039      	str	r1, [r7, #0]
 8003792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003798:	2b00      	cmp	r3, #0
 800379a:	db0a      	blt.n	80037b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	490c      	ldr	r1, [pc, #48]	; (80037d4 <__NVIC_SetPriority+0x4c>)
 80037a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a6:	0112      	lsls	r2, r2, #4
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	440b      	add	r3, r1
 80037ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037b0:	e00a      	b.n	80037c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	4908      	ldr	r1, [pc, #32]	; (80037d8 <__NVIC_SetPriority+0x50>)
 80037b8:	79fb      	ldrb	r3, [r7, #7]
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	3b04      	subs	r3, #4
 80037c0:	0112      	lsls	r2, r2, #4
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	440b      	add	r3, r1
 80037c6:	761a      	strb	r2, [r3, #24]
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	e000e100 	.word	0xe000e100
 80037d8:	e000ed00 	.word	0xe000ed00

080037dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037dc:	b480      	push	{r7}
 80037de:	b089      	sub	sp, #36	; 0x24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f1c3 0307 	rsb	r3, r3, #7
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	bf28      	it	cs
 80037fa:	2304      	movcs	r3, #4
 80037fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	3304      	adds	r3, #4
 8003802:	2b06      	cmp	r3, #6
 8003804:	d902      	bls.n	800380c <NVIC_EncodePriority+0x30>
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	3b03      	subs	r3, #3
 800380a:	e000      	b.n	800380e <NVIC_EncodePriority+0x32>
 800380c:	2300      	movs	r3, #0
 800380e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003810:	f04f 32ff 	mov.w	r2, #4294967295
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	43da      	mvns	r2, r3
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	401a      	ands	r2, r3
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003824:	f04f 31ff 	mov.w	r1, #4294967295
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	fa01 f303 	lsl.w	r3, r1, r3
 800382e:	43d9      	mvns	r1, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003834:	4313      	orrs	r3, r2
         );
}
 8003836:	4618      	mov	r0, r3
 8003838:	3724      	adds	r7, #36	; 0x24
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
	...

08003844 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3b01      	subs	r3, #1
 8003850:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003854:	d301      	bcc.n	800385a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003856:	2301      	movs	r3, #1
 8003858:	e00f      	b.n	800387a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800385a:	4a0a      	ldr	r2, [pc, #40]	; (8003884 <SysTick_Config+0x40>)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	3b01      	subs	r3, #1
 8003860:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003862:	210f      	movs	r1, #15
 8003864:	f04f 30ff 	mov.w	r0, #4294967295
 8003868:	f7ff ff8e 	bl	8003788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800386c:	4b05      	ldr	r3, [pc, #20]	; (8003884 <SysTick_Config+0x40>)
 800386e:	2200      	movs	r2, #0
 8003870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003872:	4b04      	ldr	r3, [pc, #16]	; (8003884 <SysTick_Config+0x40>)
 8003874:	2207      	movs	r2, #7
 8003876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	e000e010 	.word	0xe000e010

08003888 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f7ff ff29 	bl	80036e8 <__NVIC_SetPriorityGrouping>
}
 8003896:	bf00      	nop
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800389e:	b580      	push	{r7, lr}
 80038a0:	b086      	sub	sp, #24
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	4603      	mov	r3, r0
 80038a6:	60b9      	str	r1, [r7, #8]
 80038a8:	607a      	str	r2, [r7, #4]
 80038aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038b0:	f7ff ff3e 	bl	8003730 <__NVIC_GetPriorityGrouping>
 80038b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	68b9      	ldr	r1, [r7, #8]
 80038ba:	6978      	ldr	r0, [r7, #20]
 80038bc:	f7ff ff8e 	bl	80037dc <NVIC_EncodePriority>
 80038c0:	4602      	mov	r2, r0
 80038c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038c6:	4611      	mov	r1, r2
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff ff5d 	bl	8003788 <__NVIC_SetPriority>
}
 80038ce:	bf00      	nop
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b082      	sub	sp, #8
 80038da:	af00      	add	r7, sp, #0
 80038dc:	4603      	mov	r3, r0
 80038de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff ff31 	bl	800374c <__NVIC_EnableIRQ>
}
 80038ea:	bf00      	nop
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b082      	sub	sp, #8
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7ff ffa2 	bl	8003844 <SysTick_Config>
 8003900:	4603      	mov	r3, r0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
	...

0800390c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003914:	2300      	movs	r3, #0
 8003916:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003918:	f7ff f9a0 	bl	8002c5c <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e099      	b.n	8003a5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2202      	movs	r2, #2
 8003934:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0201 	bic.w	r2, r2, #1
 8003946:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003948:	e00f      	b.n	800396a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800394a:	f7ff f987 	bl	8002c5c <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b05      	cmp	r3, #5
 8003956:	d908      	bls.n	800396a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2220      	movs	r2, #32
 800395c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2203      	movs	r2, #3
 8003962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e078      	b.n	8003a5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1e8      	bne.n	800394a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	4b38      	ldr	r3, [pc, #224]	; (8003a64 <HAL_DMA_Init+0x158>)
 8003984:	4013      	ands	r3, r2
 8003986:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003996:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	2b04      	cmp	r3, #4
 80039c2:	d107      	bne.n	80039d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039cc:	4313      	orrs	r3, r2
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f023 0307 	bic.w	r3, r3, #7
 80039ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	d117      	bne.n	8003a2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00e      	beq.n	8003a2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 fa91 	bl	8003f38 <DMA_CheckFifoParam>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d008      	beq.n	8003a2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2240      	movs	r2, #64	; 0x40
 8003a20:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e016      	b.n	8003a5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 fa48 	bl	8003ecc <DMA_CalcBaseAndBitshift>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a44:	223f      	movs	r2, #63	; 0x3f
 8003a46:	409a      	lsls	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3718      	adds	r7, #24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	f010803f 	.word	0xf010803f

08003a68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
 8003a74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a76:	2300      	movs	r3, #0
 8003a78:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d101      	bne.n	8003a8e <HAL_DMA_Start_IT+0x26>
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	e040      	b.n	8003b10 <HAL_DMA_Start_IT+0xa8>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d12f      	bne.n	8003b02 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2202      	movs	r2, #2
 8003aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	68b9      	ldr	r1, [r7, #8]
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 f9da 	bl	8003e70 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac0:	223f      	movs	r2, #63	; 0x3f
 8003ac2:	409a      	lsls	r2, r3
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0216 	orr.w	r2, r2, #22
 8003ad6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d007      	beq.n	8003af0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0208 	orr.w	r2, r2, #8
 8003aee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0201 	orr.w	r2, r2, #1
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	e005      	b.n	8003b0e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3718      	adds	r7, #24
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d004      	beq.n	8003b36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2280      	movs	r2, #128	; 0x80
 8003b30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e00c      	b.n	8003b50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2205      	movs	r2, #5
 8003b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 0201 	bic.w	r2, r2, #1
 8003b4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003b64:	2300      	movs	r3, #0
 8003b66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b68:	4b92      	ldr	r3, [pc, #584]	; (8003db4 <HAL_DMA_IRQHandler+0x258>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a92      	ldr	r2, [pc, #584]	; (8003db8 <HAL_DMA_IRQHandler+0x25c>)
 8003b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b72:	0a9b      	lsrs	r3, r3, #10
 8003b74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b86:	2208      	movs	r2, #8
 8003b88:	409a      	lsls	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d01a      	beq.n	8003bc8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d013      	beq.n	8003bc8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 0204 	bic.w	r2, r2, #4
 8003bae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb4:	2208      	movs	r2, #8
 8003bb6:	409a      	lsls	r2, r3
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc0:	f043 0201 	orr.w	r2, r3, #1
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bcc:	2201      	movs	r2, #1
 8003bce:	409a      	lsls	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d012      	beq.n	8003bfe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00b      	beq.n	8003bfe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bea:	2201      	movs	r2, #1
 8003bec:	409a      	lsls	r2, r3
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf6:	f043 0202 	orr.w	r2, r3, #2
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c02:	2204      	movs	r2, #4
 8003c04:	409a      	lsls	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d012      	beq.n	8003c34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00b      	beq.n	8003c34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c20:	2204      	movs	r2, #4
 8003c22:	409a      	lsls	r2, r3
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c2c:	f043 0204 	orr.w	r2, r3, #4
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c38:	2210      	movs	r2, #16
 8003c3a:	409a      	lsls	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d043      	beq.n	8003ccc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0308 	and.w	r3, r3, #8
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d03c      	beq.n	8003ccc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c56:	2210      	movs	r2, #16
 8003c58:	409a      	lsls	r2, r3
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d018      	beq.n	8003c9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d108      	bne.n	8003c8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d024      	beq.n	8003ccc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	4798      	blx	r3
 8003c8a:	e01f      	b.n	8003ccc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d01b      	beq.n	8003ccc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	4798      	blx	r3
 8003c9c:	e016      	b.n	8003ccc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d107      	bne.n	8003cbc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f022 0208 	bic.w	r2, r2, #8
 8003cba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d003      	beq.n	8003ccc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	409a      	lsls	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 808e 	beq.w	8003dfa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0310 	and.w	r3, r3, #16
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 8086 	beq.w	8003dfa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	409a      	lsls	r2, r3
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b05      	cmp	r3, #5
 8003d04:	d136      	bne.n	8003d74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 0216 	bic.w	r2, r2, #22
 8003d14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	695a      	ldr	r2, [r3, #20]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d103      	bne.n	8003d36 <HAL_DMA_IRQHandler+0x1da>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d007      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 0208 	bic.w	r2, r2, #8
 8003d44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d4a:	223f      	movs	r2, #63	; 0x3f
 8003d4c:	409a      	lsls	r2, r3
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d07d      	beq.n	8003e66 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	4798      	blx	r3
        }
        return;
 8003d72:	e078      	b.n	8003e66 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d01c      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d108      	bne.n	8003da2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d030      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	4798      	blx	r3
 8003da0:	e02b      	b.n	8003dfa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d027      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	4798      	blx	r3
 8003db2:	e022      	b.n	8003dfa <HAL_DMA_IRQHandler+0x29e>
 8003db4:	20000170 	.word	0x20000170
 8003db8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10f      	bne.n	8003dea <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0210 	bic.w	r2, r2, #16
 8003dd8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d003      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d032      	beq.n	8003e68 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d022      	beq.n	8003e54 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2205      	movs	r2, #5
 8003e12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 0201 	bic.w	r2, r2, #1
 8003e24:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	60bb      	str	r3, [r7, #8]
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d307      	bcc.n	8003e42 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1f2      	bne.n	8003e26 <HAL_DMA_IRQHandler+0x2ca>
 8003e40:	e000      	b.n	8003e44 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003e42:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d005      	beq.n	8003e68 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	4798      	blx	r3
 8003e64:	e000      	b.n	8003e68 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003e66:	bf00      	nop
    }
  }
}
 8003e68:	3718      	adds	r7, #24
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop

08003e70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
 8003e7c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e8c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	2b40      	cmp	r3, #64	; 0x40
 8003e9c:	d108      	bne.n	8003eb0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68ba      	ldr	r2, [r7, #8]
 8003eac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003eae:	e007      	b.n	8003ec0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	60da      	str	r2, [r3, #12]
}
 8003ec0:	bf00      	nop
 8003ec2:	3714      	adds	r7, #20
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	3b10      	subs	r3, #16
 8003edc:	4a14      	ldr	r2, [pc, #80]	; (8003f30 <DMA_CalcBaseAndBitshift+0x64>)
 8003ede:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee2:	091b      	lsrs	r3, r3, #4
 8003ee4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ee6:	4a13      	ldr	r2, [pc, #76]	; (8003f34 <DMA_CalcBaseAndBitshift+0x68>)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4413      	add	r3, r2
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	461a      	mov	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2b03      	cmp	r3, #3
 8003ef8:	d909      	bls.n	8003f0e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f02:	f023 0303 	bic.w	r3, r3, #3
 8003f06:	1d1a      	adds	r2, r3, #4
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	659a      	str	r2, [r3, #88]	; 0x58
 8003f0c:	e007      	b.n	8003f1e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f16:	f023 0303 	bic.w	r3, r3, #3
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	aaaaaaab 	.word	0xaaaaaaab
 8003f34:	08009b08 	.word	0x08009b08

08003f38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f40:	2300      	movs	r3, #0
 8003f42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d11f      	bne.n	8003f92 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	2b03      	cmp	r3, #3
 8003f56:	d855      	bhi.n	8004004 <DMA_CheckFifoParam+0xcc>
 8003f58:	a201      	add	r2, pc, #4	; (adr r2, 8003f60 <DMA_CheckFifoParam+0x28>)
 8003f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5e:	bf00      	nop
 8003f60:	08003f71 	.word	0x08003f71
 8003f64:	08003f83 	.word	0x08003f83
 8003f68:	08003f71 	.word	0x08003f71
 8003f6c:	08004005 	.word	0x08004005
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d045      	beq.n	8004008 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f80:	e042      	b.n	8004008 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f86:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f8a:	d13f      	bne.n	800400c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f90:	e03c      	b.n	800400c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f9a:	d121      	bne.n	8003fe0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	2b03      	cmp	r3, #3
 8003fa0:	d836      	bhi.n	8004010 <DMA_CheckFifoParam+0xd8>
 8003fa2:	a201      	add	r2, pc, #4	; (adr r2, 8003fa8 <DMA_CheckFifoParam+0x70>)
 8003fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa8:	08003fb9 	.word	0x08003fb9
 8003fac:	08003fbf 	.word	0x08003fbf
 8003fb0:	08003fb9 	.word	0x08003fb9
 8003fb4:	08003fd1 	.word	0x08003fd1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	73fb      	strb	r3, [r7, #15]
      break;
 8003fbc:	e02f      	b.n	800401e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d024      	beq.n	8004014 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fce:	e021      	b.n	8004014 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003fd8:	d11e      	bne.n	8004018 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003fde:	e01b      	b.n	8004018 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d902      	bls.n	8003fec <DMA_CheckFifoParam+0xb4>
 8003fe6:	2b03      	cmp	r3, #3
 8003fe8:	d003      	beq.n	8003ff2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003fea:	e018      	b.n	800401e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	73fb      	strb	r3, [r7, #15]
      break;
 8003ff0:	e015      	b.n	800401e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00e      	beq.n	800401c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	73fb      	strb	r3, [r7, #15]
      break;
 8004002:	e00b      	b.n	800401c <DMA_CheckFifoParam+0xe4>
      break;
 8004004:	bf00      	nop
 8004006:	e00a      	b.n	800401e <DMA_CheckFifoParam+0xe6>
      break;
 8004008:	bf00      	nop
 800400a:	e008      	b.n	800401e <DMA_CheckFifoParam+0xe6>
      break;
 800400c:	bf00      	nop
 800400e:	e006      	b.n	800401e <DMA_CheckFifoParam+0xe6>
      break;
 8004010:	bf00      	nop
 8004012:	e004      	b.n	800401e <DMA_CheckFifoParam+0xe6>
      break;
 8004014:	bf00      	nop
 8004016:	e002      	b.n	800401e <DMA_CheckFifoParam+0xe6>
      break;   
 8004018:	bf00      	nop
 800401a:	e000      	b.n	800401e <DMA_CheckFifoParam+0xe6>
      break;
 800401c:	bf00      	nop
    }
  } 
  
  return status; 
 800401e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3714      	adds	r7, #20
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800402c:	b480      	push	{r7}
 800402e:	b089      	sub	sp, #36	; 0x24
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004036:	2300      	movs	r3, #0
 8004038:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800403a:	2300      	movs	r3, #0
 800403c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800403e:	2300      	movs	r3, #0
 8004040:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004042:	2300      	movs	r3, #0
 8004044:	61fb      	str	r3, [r7, #28]
 8004046:	e159      	b.n	80042fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004048:	2201      	movs	r2, #1
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	fa02 f303 	lsl.w	r3, r2, r3
 8004050:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	4013      	ands	r3, r2
 800405a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	429a      	cmp	r2, r3
 8004062:	f040 8148 	bne.w	80042f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d00b      	beq.n	8004086 <HAL_GPIO_Init+0x5a>
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2b02      	cmp	r3, #2
 8004074:	d007      	beq.n	8004086 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800407a:	2b11      	cmp	r3, #17
 800407c:	d003      	beq.n	8004086 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	2b12      	cmp	r3, #18
 8004084:	d130      	bne.n	80040e8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	2203      	movs	r2, #3
 8004092:	fa02 f303 	lsl.w	r3, r2, r3
 8004096:	43db      	mvns	r3, r3
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	4013      	ands	r3, r2
 800409c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	68da      	ldr	r2, [r3, #12]
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	fa02 f303 	lsl.w	r3, r2, r3
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040bc:	2201      	movs	r2, #1
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	fa02 f303 	lsl.w	r3, r2, r3
 80040c4:	43db      	mvns	r3, r3
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	4013      	ands	r3, r2
 80040ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	091b      	lsrs	r3, r3, #4
 80040d2:	f003 0201 	and.w	r2, r3, #1
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	fa02 f303 	lsl.w	r3, r2, r3
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	4313      	orrs	r3, r2
 80040e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	2203      	movs	r2, #3
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	43db      	mvns	r3, r3
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	4013      	ands	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	005b      	lsls	r3, r3, #1
 8004108:	fa02 f303 	lsl.w	r3, r2, r3
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	4313      	orrs	r3, r2
 8004110:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	2b02      	cmp	r3, #2
 800411e:	d003      	beq.n	8004128 <HAL_GPIO_Init+0xfc>
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	2b12      	cmp	r3, #18
 8004126:	d123      	bne.n	8004170 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	08da      	lsrs	r2, r3, #3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3208      	adds	r2, #8
 8004130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004134:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	220f      	movs	r2, #15
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	43db      	mvns	r3, r3
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	4013      	ands	r3, r2
 800414a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	691a      	ldr	r2, [r3, #16]
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	f003 0307 	and.w	r3, r3, #7
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	fa02 f303 	lsl.w	r3, r2, r3
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	4313      	orrs	r3, r2
 8004160:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	08da      	lsrs	r2, r3, #3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	3208      	adds	r2, #8
 800416a:	69b9      	ldr	r1, [r7, #24]
 800416c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	2203      	movs	r2, #3
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	43db      	mvns	r3, r3
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	4013      	ands	r3, r2
 8004186:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f003 0203 	and.w	r2, r3, #3
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	4313      	orrs	r3, r2
 800419c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 80a2 	beq.w	80042f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041b2:	2300      	movs	r3, #0
 80041b4:	60fb      	str	r3, [r7, #12]
 80041b6:	4b56      	ldr	r3, [pc, #344]	; (8004310 <HAL_GPIO_Init+0x2e4>)
 80041b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ba:	4a55      	ldr	r2, [pc, #340]	; (8004310 <HAL_GPIO_Init+0x2e4>)
 80041bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041c0:	6453      	str	r3, [r2, #68]	; 0x44
 80041c2:	4b53      	ldr	r3, [pc, #332]	; (8004310 <HAL_GPIO_Init+0x2e4>)
 80041c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041ce:	4a51      	ldr	r2, [pc, #324]	; (8004314 <HAL_GPIO_Init+0x2e8>)
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	089b      	lsrs	r3, r3, #2
 80041d4:	3302      	adds	r3, #2
 80041d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	220f      	movs	r2, #15
 80041e6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ea:	43db      	mvns	r3, r3
 80041ec:	69ba      	ldr	r2, [r7, #24]
 80041ee:	4013      	ands	r3, r2
 80041f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a48      	ldr	r2, [pc, #288]	; (8004318 <HAL_GPIO_Init+0x2ec>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d019      	beq.n	800422e <HAL_GPIO_Init+0x202>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a47      	ldr	r2, [pc, #284]	; (800431c <HAL_GPIO_Init+0x2f0>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d013      	beq.n	800422a <HAL_GPIO_Init+0x1fe>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a46      	ldr	r2, [pc, #280]	; (8004320 <HAL_GPIO_Init+0x2f4>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d00d      	beq.n	8004226 <HAL_GPIO_Init+0x1fa>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a45      	ldr	r2, [pc, #276]	; (8004324 <HAL_GPIO_Init+0x2f8>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d007      	beq.n	8004222 <HAL_GPIO_Init+0x1f6>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a44      	ldr	r2, [pc, #272]	; (8004328 <HAL_GPIO_Init+0x2fc>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d101      	bne.n	800421e <HAL_GPIO_Init+0x1f2>
 800421a:	2304      	movs	r3, #4
 800421c:	e008      	b.n	8004230 <HAL_GPIO_Init+0x204>
 800421e:	2307      	movs	r3, #7
 8004220:	e006      	b.n	8004230 <HAL_GPIO_Init+0x204>
 8004222:	2303      	movs	r3, #3
 8004224:	e004      	b.n	8004230 <HAL_GPIO_Init+0x204>
 8004226:	2302      	movs	r3, #2
 8004228:	e002      	b.n	8004230 <HAL_GPIO_Init+0x204>
 800422a:	2301      	movs	r3, #1
 800422c:	e000      	b.n	8004230 <HAL_GPIO_Init+0x204>
 800422e:	2300      	movs	r3, #0
 8004230:	69fa      	ldr	r2, [r7, #28]
 8004232:	f002 0203 	and.w	r2, r2, #3
 8004236:	0092      	lsls	r2, r2, #2
 8004238:	4093      	lsls	r3, r2
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	4313      	orrs	r3, r2
 800423e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004240:	4934      	ldr	r1, [pc, #208]	; (8004314 <HAL_GPIO_Init+0x2e8>)
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	089b      	lsrs	r3, r3, #2
 8004246:	3302      	adds	r3, #2
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800424e:	4b37      	ldr	r3, [pc, #220]	; (800432c <HAL_GPIO_Init+0x300>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	43db      	mvns	r3, r3
 8004258:	69ba      	ldr	r2, [r7, #24]
 800425a:	4013      	ands	r3, r2
 800425c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	4313      	orrs	r3, r2
 8004270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004272:	4a2e      	ldr	r2, [pc, #184]	; (800432c <HAL_GPIO_Init+0x300>)
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004278:	4b2c      	ldr	r3, [pc, #176]	; (800432c <HAL_GPIO_Init+0x300>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	43db      	mvns	r3, r3
 8004282:	69ba      	ldr	r2, [r7, #24]
 8004284:	4013      	ands	r3, r2
 8004286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d003      	beq.n	800429c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	4313      	orrs	r3, r2
 800429a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800429c:	4a23      	ldr	r2, [pc, #140]	; (800432c <HAL_GPIO_Init+0x300>)
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042a2:	4b22      	ldr	r3, [pc, #136]	; (800432c <HAL_GPIO_Init+0x300>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	43db      	mvns	r3, r3
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	4013      	ands	r3, r2
 80042b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d003      	beq.n	80042c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042c6:	4a19      	ldr	r2, [pc, #100]	; (800432c <HAL_GPIO_Init+0x300>)
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042cc:	4b17      	ldr	r3, [pc, #92]	; (800432c <HAL_GPIO_Init+0x300>)
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	43db      	mvns	r3, r3
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	4013      	ands	r3, r2
 80042da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d003      	beq.n	80042f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042f0:	4a0e      	ldr	r2, [pc, #56]	; (800432c <HAL_GPIO_Init+0x300>)
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	3301      	adds	r3, #1
 80042fa:	61fb      	str	r3, [r7, #28]
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	2b0f      	cmp	r3, #15
 8004300:	f67f aea2 	bls.w	8004048 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004304:	bf00      	nop
 8004306:	3724      	adds	r7, #36	; 0x24
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	40023800 	.word	0x40023800
 8004314:	40013800 	.word	0x40013800
 8004318:	40020000 	.word	0x40020000
 800431c:	40020400 	.word	0x40020400
 8004320:	40020800 	.word	0x40020800
 8004324:	40020c00 	.word	0x40020c00
 8004328:	40021000 	.word	0x40021000
 800432c:	40013c00 	.word	0x40013c00

08004330 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	460b      	mov	r3, r1
 800433a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	691a      	ldr	r2, [r3, #16]
 8004340:	887b      	ldrh	r3, [r7, #2]
 8004342:	4013      	ands	r3, r2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004348:	2301      	movs	r3, #1
 800434a:	73fb      	strb	r3, [r7, #15]
 800434c:	e001      	b.n	8004352 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800434e:	2300      	movs	r3, #0
 8004350:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004352:	7bfb      	ldrb	r3, [r7, #15]
}
 8004354:	4618      	mov	r0, r3
 8004356:	3714      	adds	r7, #20
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	460b      	mov	r3, r1
 800436a:	807b      	strh	r3, [r7, #2]
 800436c:	4613      	mov	r3, r2
 800436e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004370:	787b      	ldrb	r3, [r7, #1]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004376:	887a      	ldrh	r2, [r7, #2]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800437c:	e003      	b.n	8004386 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800437e:	887b      	ldrh	r3, [r7, #2]
 8004380:	041a      	lsls	r2, r3, #16
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	619a      	str	r2, [r3, #24]
}
 8004386:	bf00      	nop
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
	...

08004394 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e25b      	b.n	800485e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d075      	beq.n	800449e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043b2:	4ba3      	ldr	r3, [pc, #652]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f003 030c 	and.w	r3, r3, #12
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	d00c      	beq.n	80043d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043be:	4ba0      	ldr	r3, [pc, #640]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043c6:	2b08      	cmp	r3, #8
 80043c8:	d112      	bne.n	80043f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043ca:	4b9d      	ldr	r3, [pc, #628]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043d6:	d10b      	bne.n	80043f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d8:	4b99      	ldr	r3, [pc, #612]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d05b      	beq.n	800449c <HAL_RCC_OscConfig+0x108>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d157      	bne.n	800449c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e236      	b.n	800485e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f8:	d106      	bne.n	8004408 <HAL_RCC_OscConfig+0x74>
 80043fa:	4b91      	ldr	r3, [pc, #580]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a90      	ldr	r2, [pc, #576]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 8004400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	e01d      	b.n	8004444 <HAL_RCC_OscConfig+0xb0>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004410:	d10c      	bne.n	800442c <HAL_RCC_OscConfig+0x98>
 8004412:	4b8b      	ldr	r3, [pc, #556]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a8a      	ldr	r2, [pc, #552]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 8004418:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800441c:	6013      	str	r3, [r2, #0]
 800441e:	4b88      	ldr	r3, [pc, #544]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a87      	ldr	r2, [pc, #540]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 8004424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004428:	6013      	str	r3, [r2, #0]
 800442a:	e00b      	b.n	8004444 <HAL_RCC_OscConfig+0xb0>
 800442c:	4b84      	ldr	r3, [pc, #528]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a83      	ldr	r2, [pc, #524]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 8004432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004436:	6013      	str	r3, [r2, #0]
 8004438:	4b81      	ldr	r3, [pc, #516]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a80      	ldr	r2, [pc, #512]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 800443e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004442:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d013      	beq.n	8004474 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800444c:	f7fe fc06 	bl	8002c5c <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004454:	f7fe fc02 	bl	8002c5c <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b64      	cmp	r3, #100	; 0x64
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e1fb      	b.n	800485e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004466:	4b76      	ldr	r3, [pc, #472]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d0f0      	beq.n	8004454 <HAL_RCC_OscConfig+0xc0>
 8004472:	e014      	b.n	800449e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004474:	f7fe fbf2 	bl	8002c5c <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800447c:	f7fe fbee 	bl	8002c5c <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b64      	cmp	r3, #100	; 0x64
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e1e7      	b.n	800485e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800448e:	4b6c      	ldr	r3, [pc, #432]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1f0      	bne.n	800447c <HAL_RCC_OscConfig+0xe8>
 800449a:	e000      	b.n	800449e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800449c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d063      	beq.n	8004572 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044aa:	4b65      	ldr	r3, [pc, #404]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 030c 	and.w	r3, r3, #12
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00b      	beq.n	80044ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044b6:	4b62      	ldr	r3, [pc, #392]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044be:	2b08      	cmp	r3, #8
 80044c0:	d11c      	bne.n	80044fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044c2:	4b5f      	ldr	r3, [pc, #380]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d116      	bne.n	80044fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ce:	4b5c      	ldr	r3, [pc, #368]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d005      	beq.n	80044e6 <HAL_RCC_OscConfig+0x152>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d001      	beq.n	80044e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e1bb      	b.n	800485e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044e6:	4b56      	ldr	r3, [pc, #344]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	4952      	ldr	r1, [pc, #328]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044fa:	e03a      	b.n	8004572 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d020      	beq.n	8004546 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004504:	4b4f      	ldr	r3, [pc, #316]	; (8004644 <HAL_RCC_OscConfig+0x2b0>)
 8004506:	2201      	movs	r2, #1
 8004508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450a:	f7fe fba7 	bl	8002c5c <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004510:	e008      	b.n	8004524 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004512:	f7fe fba3 	bl	8002c5c <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d901      	bls.n	8004524 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e19c      	b.n	800485e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004524:	4b46      	ldr	r3, [pc, #280]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d0f0      	beq.n	8004512 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004530:	4b43      	ldr	r3, [pc, #268]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	00db      	lsls	r3, r3, #3
 800453e:	4940      	ldr	r1, [pc, #256]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 8004540:	4313      	orrs	r3, r2
 8004542:	600b      	str	r3, [r1, #0]
 8004544:	e015      	b.n	8004572 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004546:	4b3f      	ldr	r3, [pc, #252]	; (8004644 <HAL_RCC_OscConfig+0x2b0>)
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454c:	f7fe fb86 	bl	8002c5c <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004552:	e008      	b.n	8004566 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004554:	f7fe fb82 	bl	8002c5c <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e17b      	b.n	800485e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004566:	4b36      	ldr	r3, [pc, #216]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1f0      	bne.n	8004554 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0308 	and.w	r3, r3, #8
 800457a:	2b00      	cmp	r3, #0
 800457c:	d030      	beq.n	80045e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d016      	beq.n	80045b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004586:	4b30      	ldr	r3, [pc, #192]	; (8004648 <HAL_RCC_OscConfig+0x2b4>)
 8004588:	2201      	movs	r2, #1
 800458a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800458c:	f7fe fb66 	bl	8002c5c <HAL_GetTick>
 8004590:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004592:	e008      	b.n	80045a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004594:	f7fe fb62 	bl	8002c5c <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e15b      	b.n	800485e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045a6:	4b26      	ldr	r3, [pc, #152]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 80045a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0f0      	beq.n	8004594 <HAL_RCC_OscConfig+0x200>
 80045b2:	e015      	b.n	80045e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045b4:	4b24      	ldr	r3, [pc, #144]	; (8004648 <HAL_RCC_OscConfig+0x2b4>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ba:	f7fe fb4f 	bl	8002c5c <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045c0:	e008      	b.n	80045d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045c2:	f7fe fb4b 	bl	8002c5c <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e144      	b.n	800485e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045d4:	4b1a      	ldr	r3, [pc, #104]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 80045d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1f0      	bne.n	80045c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0304 	and.w	r3, r3, #4
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 80a0 	beq.w	800472e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045ee:	2300      	movs	r3, #0
 80045f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045f2:	4b13      	ldr	r3, [pc, #76]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10f      	bne.n	800461e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045fe:	2300      	movs	r3, #0
 8004600:	60bb      	str	r3, [r7, #8]
 8004602:	4b0f      	ldr	r3, [pc, #60]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	4a0e      	ldr	r2, [pc, #56]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 8004608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800460c:	6413      	str	r3, [r2, #64]	; 0x40
 800460e:	4b0c      	ldr	r3, [pc, #48]	; (8004640 <HAL_RCC_OscConfig+0x2ac>)
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004616:	60bb      	str	r3, [r7, #8]
 8004618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800461a:	2301      	movs	r3, #1
 800461c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800461e:	4b0b      	ldr	r3, [pc, #44]	; (800464c <HAL_RCC_OscConfig+0x2b8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004626:	2b00      	cmp	r3, #0
 8004628:	d121      	bne.n	800466e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800462a:	4b08      	ldr	r3, [pc, #32]	; (800464c <HAL_RCC_OscConfig+0x2b8>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a07      	ldr	r2, [pc, #28]	; (800464c <HAL_RCC_OscConfig+0x2b8>)
 8004630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004636:	f7fe fb11 	bl	8002c5c <HAL_GetTick>
 800463a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800463c:	e011      	b.n	8004662 <HAL_RCC_OscConfig+0x2ce>
 800463e:	bf00      	nop
 8004640:	40023800 	.word	0x40023800
 8004644:	42470000 	.word	0x42470000
 8004648:	42470e80 	.word	0x42470e80
 800464c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004650:	f7fe fb04 	bl	8002c5c <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e0fd      	b.n	800485e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004662:	4b81      	ldr	r3, [pc, #516]	; (8004868 <HAL_RCC_OscConfig+0x4d4>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0f0      	beq.n	8004650 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d106      	bne.n	8004684 <HAL_RCC_OscConfig+0x2f0>
 8004676:	4b7d      	ldr	r3, [pc, #500]	; (800486c <HAL_RCC_OscConfig+0x4d8>)
 8004678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467a:	4a7c      	ldr	r2, [pc, #496]	; (800486c <HAL_RCC_OscConfig+0x4d8>)
 800467c:	f043 0301 	orr.w	r3, r3, #1
 8004680:	6713      	str	r3, [r2, #112]	; 0x70
 8004682:	e01c      	b.n	80046be <HAL_RCC_OscConfig+0x32a>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	2b05      	cmp	r3, #5
 800468a:	d10c      	bne.n	80046a6 <HAL_RCC_OscConfig+0x312>
 800468c:	4b77      	ldr	r3, [pc, #476]	; (800486c <HAL_RCC_OscConfig+0x4d8>)
 800468e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004690:	4a76      	ldr	r2, [pc, #472]	; (800486c <HAL_RCC_OscConfig+0x4d8>)
 8004692:	f043 0304 	orr.w	r3, r3, #4
 8004696:	6713      	str	r3, [r2, #112]	; 0x70
 8004698:	4b74      	ldr	r3, [pc, #464]	; (800486c <HAL_RCC_OscConfig+0x4d8>)
 800469a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469c:	4a73      	ldr	r2, [pc, #460]	; (800486c <HAL_RCC_OscConfig+0x4d8>)
 800469e:	f043 0301 	orr.w	r3, r3, #1
 80046a2:	6713      	str	r3, [r2, #112]	; 0x70
 80046a4:	e00b      	b.n	80046be <HAL_RCC_OscConfig+0x32a>
 80046a6:	4b71      	ldr	r3, [pc, #452]	; (800486c <HAL_RCC_OscConfig+0x4d8>)
 80046a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046aa:	4a70      	ldr	r2, [pc, #448]	; (800486c <HAL_RCC_OscConfig+0x4d8>)
 80046ac:	f023 0301 	bic.w	r3, r3, #1
 80046b0:	6713      	str	r3, [r2, #112]	; 0x70
 80046b2:	4b6e      	ldr	r3, [pc, #440]	; (800486c <HAL_RCC_OscConfig+0x4d8>)
 80046b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b6:	4a6d      	ldr	r2, [pc, #436]	; (800486c <HAL_RCC_OscConfig+0x4d8>)
 80046b8:	f023 0304 	bic.w	r3, r3, #4
 80046bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d015      	beq.n	80046f2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c6:	f7fe fac9 	bl	8002c5c <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046cc:	e00a      	b.n	80046e4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046ce:	f7fe fac5 	bl	8002c5c <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046dc:	4293      	cmp	r3, r2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e0bc      	b.n	800485e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e4:	4b61      	ldr	r3, [pc, #388]	; (800486c <HAL_RCC_OscConfig+0x4d8>)
 80046e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0ee      	beq.n	80046ce <HAL_RCC_OscConfig+0x33a>
 80046f0:	e014      	b.n	800471c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046f2:	f7fe fab3 	bl	8002c5c <HAL_GetTick>
 80046f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046f8:	e00a      	b.n	8004710 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046fa:	f7fe faaf 	bl	8002c5c <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	f241 3288 	movw	r2, #5000	; 0x1388
 8004708:	4293      	cmp	r3, r2
 800470a:	d901      	bls.n	8004710 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e0a6      	b.n	800485e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004710:	4b56      	ldr	r3, [pc, #344]	; (800486c <HAL_RCC_OscConfig+0x4d8>)
 8004712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1ee      	bne.n	80046fa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800471c:	7dfb      	ldrb	r3, [r7, #23]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d105      	bne.n	800472e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004722:	4b52      	ldr	r3, [pc, #328]	; (800486c <HAL_RCC_OscConfig+0x4d8>)
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	4a51      	ldr	r2, [pc, #324]	; (800486c <HAL_RCC_OscConfig+0x4d8>)
 8004728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800472c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 8092 	beq.w	800485c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004738:	4b4c      	ldr	r3, [pc, #304]	; (800486c <HAL_RCC_OscConfig+0x4d8>)
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f003 030c 	and.w	r3, r3, #12
 8004740:	2b08      	cmp	r3, #8
 8004742:	d05c      	beq.n	80047fe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	2b02      	cmp	r3, #2
 800474a:	d141      	bne.n	80047d0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800474c:	4b48      	ldr	r3, [pc, #288]	; (8004870 <HAL_RCC_OscConfig+0x4dc>)
 800474e:	2200      	movs	r2, #0
 8004750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004752:	f7fe fa83 	bl	8002c5c <HAL_GetTick>
 8004756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004758:	e008      	b.n	800476c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800475a:	f7fe fa7f 	bl	8002c5c <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	2b02      	cmp	r3, #2
 8004766:	d901      	bls.n	800476c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e078      	b.n	800485e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800476c:	4b3f      	ldr	r3, [pc, #252]	; (800486c <HAL_RCC_OscConfig+0x4d8>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1f0      	bne.n	800475a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	69da      	ldr	r2, [r3, #28]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	431a      	orrs	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	019b      	lsls	r3, r3, #6
 8004788:	431a      	orrs	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478e:	085b      	lsrs	r3, r3, #1
 8004790:	3b01      	subs	r3, #1
 8004792:	041b      	lsls	r3, r3, #16
 8004794:	431a      	orrs	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479a:	061b      	lsls	r3, r3, #24
 800479c:	4933      	ldr	r1, [pc, #204]	; (800486c <HAL_RCC_OscConfig+0x4d8>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047a2:	4b33      	ldr	r3, [pc, #204]	; (8004870 <HAL_RCC_OscConfig+0x4dc>)
 80047a4:	2201      	movs	r2, #1
 80047a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a8:	f7fe fa58 	bl	8002c5c <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047b0:	f7fe fa54 	bl	8002c5c <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e04d      	b.n	800485e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047c2:	4b2a      	ldr	r3, [pc, #168]	; (800486c <HAL_RCC_OscConfig+0x4d8>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0f0      	beq.n	80047b0 <HAL_RCC_OscConfig+0x41c>
 80047ce:	e045      	b.n	800485c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047d0:	4b27      	ldr	r3, [pc, #156]	; (8004870 <HAL_RCC_OscConfig+0x4dc>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d6:	f7fe fa41 	bl	8002c5c <HAL_GetTick>
 80047da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047dc:	e008      	b.n	80047f0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047de:	f7fe fa3d 	bl	8002c5c <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e036      	b.n	800485e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047f0:	4b1e      	ldr	r3, [pc, #120]	; (800486c <HAL_RCC_OscConfig+0x4d8>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1f0      	bne.n	80047de <HAL_RCC_OscConfig+0x44a>
 80047fc:	e02e      	b.n	800485c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d101      	bne.n	800480a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e029      	b.n	800485e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800480a:	4b18      	ldr	r3, [pc, #96]	; (800486c <HAL_RCC_OscConfig+0x4d8>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	429a      	cmp	r2, r3
 800481c:	d11c      	bne.n	8004858 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004828:	429a      	cmp	r2, r3
 800482a:	d115      	bne.n	8004858 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004832:	4013      	ands	r3, r2
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004838:	4293      	cmp	r3, r2
 800483a:	d10d      	bne.n	8004858 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004846:	429a      	cmp	r2, r3
 8004848:	d106      	bne.n	8004858 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004854:	429a      	cmp	r2, r3
 8004856:	d001      	beq.n	800485c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e000      	b.n	800485e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3718      	adds	r7, #24
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	40007000 	.word	0x40007000
 800486c:	40023800 	.word	0x40023800
 8004870:	42470060 	.word	0x42470060

08004874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d101      	bne.n	8004888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e0cc      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004888:	4b68      	ldr	r3, [pc, #416]	; (8004a2c <HAL_RCC_ClockConfig+0x1b8>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 030f 	and.w	r3, r3, #15
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	429a      	cmp	r2, r3
 8004894:	d90c      	bls.n	80048b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004896:	4b65      	ldr	r3, [pc, #404]	; (8004a2c <HAL_RCC_ClockConfig+0x1b8>)
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	b2d2      	uxtb	r2, r2
 800489c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800489e:	4b63      	ldr	r3, [pc, #396]	; (8004a2c <HAL_RCC_ClockConfig+0x1b8>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 030f 	and.w	r3, r3, #15
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d001      	beq.n	80048b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e0b8      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d020      	beq.n	80048fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d005      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048c8:	4b59      	ldr	r3, [pc, #356]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	4a58      	ldr	r2, [pc, #352]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80048ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0308 	and.w	r3, r3, #8
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d005      	beq.n	80048ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048e0:	4b53      	ldr	r3, [pc, #332]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	4a52      	ldr	r2, [pc, #328]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80048e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048ec:	4b50      	ldr	r3, [pc, #320]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	494d      	ldr	r1, [pc, #308]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d044      	beq.n	8004994 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d107      	bne.n	8004922 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004912:	4b47      	ldr	r3, [pc, #284]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d119      	bne.n	8004952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e07f      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	2b02      	cmp	r3, #2
 8004928:	d003      	beq.n	8004932 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800492e:	2b03      	cmp	r3, #3
 8004930:	d107      	bne.n	8004942 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004932:	4b3f      	ldr	r3, [pc, #252]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d109      	bne.n	8004952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e06f      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004942:	4b3b      	ldr	r3, [pc, #236]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e067      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004952:	4b37      	ldr	r3, [pc, #220]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f023 0203 	bic.w	r2, r3, #3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	4934      	ldr	r1, [pc, #208]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 8004960:	4313      	orrs	r3, r2
 8004962:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004964:	f7fe f97a 	bl	8002c5c <HAL_GetTick>
 8004968:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800496a:	e00a      	b.n	8004982 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800496c:	f7fe f976 	bl	8002c5c <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	f241 3288 	movw	r2, #5000	; 0x1388
 800497a:	4293      	cmp	r3, r2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e04f      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004982:	4b2b      	ldr	r3, [pc, #172]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 020c 	and.w	r2, r3, #12
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	429a      	cmp	r2, r3
 8004992:	d1eb      	bne.n	800496c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004994:	4b25      	ldr	r3, [pc, #148]	; (8004a2c <HAL_RCC_ClockConfig+0x1b8>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 030f 	and.w	r3, r3, #15
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d20c      	bcs.n	80049bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049a2:	4b22      	ldr	r3, [pc, #136]	; (8004a2c <HAL_RCC_ClockConfig+0x1b8>)
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	b2d2      	uxtb	r2, r2
 80049a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049aa:	4b20      	ldr	r3, [pc, #128]	; (8004a2c <HAL_RCC_ClockConfig+0x1b8>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 030f 	and.w	r3, r3, #15
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d001      	beq.n	80049bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e032      	b.n	8004a22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0304 	and.w	r3, r3, #4
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d008      	beq.n	80049da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049c8:	4b19      	ldr	r3, [pc, #100]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	4916      	ldr	r1, [pc, #88]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0308 	and.w	r3, r3, #8
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d009      	beq.n	80049fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049e6:	4b12      	ldr	r3, [pc, #72]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	00db      	lsls	r3, r3, #3
 80049f4:	490e      	ldr	r1, [pc, #56]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049fa:	f000 f821 	bl	8004a40 <HAL_RCC_GetSysClockFreq>
 80049fe:	4601      	mov	r1, r0
 8004a00:	4b0b      	ldr	r3, [pc, #44]	; (8004a30 <HAL_RCC_ClockConfig+0x1bc>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	091b      	lsrs	r3, r3, #4
 8004a06:	f003 030f 	and.w	r3, r3, #15
 8004a0a:	4a0a      	ldr	r2, [pc, #40]	; (8004a34 <HAL_RCC_ClockConfig+0x1c0>)
 8004a0c:	5cd3      	ldrb	r3, [r2, r3]
 8004a0e:	fa21 f303 	lsr.w	r3, r1, r3
 8004a12:	4a09      	ldr	r2, [pc, #36]	; (8004a38 <HAL_RCC_ClockConfig+0x1c4>)
 8004a14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a16:	4b09      	ldr	r3, [pc, #36]	; (8004a3c <HAL_RCC_ClockConfig+0x1c8>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7fe f8da 	bl	8002bd4 <HAL_InitTick>

  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	40023c00 	.word	0x40023c00
 8004a30:	40023800 	.word	0x40023800
 8004a34:	08009af0 	.word	0x08009af0
 8004a38:	20000170 	.word	0x20000170
 8004a3c:	20000174 	.word	0x20000174

08004a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a46:	2300      	movs	r3, #0
 8004a48:	607b      	str	r3, [r7, #4]
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	60fb      	str	r3, [r7, #12]
 8004a4e:	2300      	movs	r3, #0
 8004a50:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004a52:	2300      	movs	r3, #0
 8004a54:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a56:	4b63      	ldr	r3, [pc, #396]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f003 030c 	and.w	r3, r3, #12
 8004a5e:	2b04      	cmp	r3, #4
 8004a60:	d007      	beq.n	8004a72 <HAL_RCC_GetSysClockFreq+0x32>
 8004a62:	2b08      	cmp	r3, #8
 8004a64:	d008      	beq.n	8004a78 <HAL_RCC_GetSysClockFreq+0x38>
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f040 80b4 	bne.w	8004bd4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a6c:	4b5e      	ldr	r3, [pc, #376]	; (8004be8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004a6e:	60bb      	str	r3, [r7, #8]
       break;
 8004a70:	e0b3      	b.n	8004bda <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a72:	4b5e      	ldr	r3, [pc, #376]	; (8004bec <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004a74:	60bb      	str	r3, [r7, #8]
      break;
 8004a76:	e0b0      	b.n	8004bda <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a78:	4b5a      	ldr	r3, [pc, #360]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a80:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a82:	4b58      	ldr	r3, [pc, #352]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d04a      	beq.n	8004b24 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a8e:	4b55      	ldr	r3, [pc, #340]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	099b      	lsrs	r3, r3, #6
 8004a94:	f04f 0400 	mov.w	r4, #0
 8004a98:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a9c:	f04f 0200 	mov.w	r2, #0
 8004aa0:	ea03 0501 	and.w	r5, r3, r1
 8004aa4:	ea04 0602 	and.w	r6, r4, r2
 8004aa8:	4629      	mov	r1, r5
 8004aaa:	4632      	mov	r2, r6
 8004aac:	f04f 0300 	mov.w	r3, #0
 8004ab0:	f04f 0400 	mov.w	r4, #0
 8004ab4:	0154      	lsls	r4, r2, #5
 8004ab6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004aba:	014b      	lsls	r3, r1, #5
 8004abc:	4619      	mov	r1, r3
 8004abe:	4622      	mov	r2, r4
 8004ac0:	1b49      	subs	r1, r1, r5
 8004ac2:	eb62 0206 	sbc.w	r2, r2, r6
 8004ac6:	f04f 0300 	mov.w	r3, #0
 8004aca:	f04f 0400 	mov.w	r4, #0
 8004ace:	0194      	lsls	r4, r2, #6
 8004ad0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004ad4:	018b      	lsls	r3, r1, #6
 8004ad6:	1a5b      	subs	r3, r3, r1
 8004ad8:	eb64 0402 	sbc.w	r4, r4, r2
 8004adc:	f04f 0100 	mov.w	r1, #0
 8004ae0:	f04f 0200 	mov.w	r2, #0
 8004ae4:	00e2      	lsls	r2, r4, #3
 8004ae6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004aea:	00d9      	lsls	r1, r3, #3
 8004aec:	460b      	mov	r3, r1
 8004aee:	4614      	mov	r4, r2
 8004af0:	195b      	adds	r3, r3, r5
 8004af2:	eb44 0406 	adc.w	r4, r4, r6
 8004af6:	f04f 0100 	mov.w	r1, #0
 8004afa:	f04f 0200 	mov.w	r2, #0
 8004afe:	0262      	lsls	r2, r4, #9
 8004b00:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004b04:	0259      	lsls	r1, r3, #9
 8004b06:	460b      	mov	r3, r1
 8004b08:	4614      	mov	r4, r2
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	4621      	mov	r1, r4
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f04f 0400 	mov.w	r4, #0
 8004b14:	461a      	mov	r2, r3
 8004b16:	4623      	mov	r3, r4
 8004b18:	f7fc f9ac 	bl	8000e74 <__aeabi_uldivmod>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	460c      	mov	r4, r1
 8004b20:	60fb      	str	r3, [r7, #12]
 8004b22:	e049      	b.n	8004bb8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b24:	4b2f      	ldr	r3, [pc, #188]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	099b      	lsrs	r3, r3, #6
 8004b2a:	f04f 0400 	mov.w	r4, #0
 8004b2e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b32:	f04f 0200 	mov.w	r2, #0
 8004b36:	ea03 0501 	and.w	r5, r3, r1
 8004b3a:	ea04 0602 	and.w	r6, r4, r2
 8004b3e:	4629      	mov	r1, r5
 8004b40:	4632      	mov	r2, r6
 8004b42:	f04f 0300 	mov.w	r3, #0
 8004b46:	f04f 0400 	mov.w	r4, #0
 8004b4a:	0154      	lsls	r4, r2, #5
 8004b4c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b50:	014b      	lsls	r3, r1, #5
 8004b52:	4619      	mov	r1, r3
 8004b54:	4622      	mov	r2, r4
 8004b56:	1b49      	subs	r1, r1, r5
 8004b58:	eb62 0206 	sbc.w	r2, r2, r6
 8004b5c:	f04f 0300 	mov.w	r3, #0
 8004b60:	f04f 0400 	mov.w	r4, #0
 8004b64:	0194      	lsls	r4, r2, #6
 8004b66:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b6a:	018b      	lsls	r3, r1, #6
 8004b6c:	1a5b      	subs	r3, r3, r1
 8004b6e:	eb64 0402 	sbc.w	r4, r4, r2
 8004b72:	f04f 0100 	mov.w	r1, #0
 8004b76:	f04f 0200 	mov.w	r2, #0
 8004b7a:	00e2      	lsls	r2, r4, #3
 8004b7c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b80:	00d9      	lsls	r1, r3, #3
 8004b82:	460b      	mov	r3, r1
 8004b84:	4614      	mov	r4, r2
 8004b86:	195b      	adds	r3, r3, r5
 8004b88:	eb44 0406 	adc.w	r4, r4, r6
 8004b8c:	f04f 0100 	mov.w	r1, #0
 8004b90:	f04f 0200 	mov.w	r2, #0
 8004b94:	02a2      	lsls	r2, r4, #10
 8004b96:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004b9a:	0299      	lsls	r1, r3, #10
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	4614      	mov	r4, r2
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	4621      	mov	r1, r4
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f04f 0400 	mov.w	r4, #0
 8004baa:	461a      	mov	r2, r3
 8004bac:	4623      	mov	r3, r4
 8004bae:	f7fc f961 	bl	8000e74 <__aeabi_uldivmod>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	460c      	mov	r4, r1
 8004bb6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bb8:	4b0a      	ldr	r3, [pc, #40]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	0c1b      	lsrs	r3, r3, #16
 8004bbe:	f003 0303 	and.w	r3, r3, #3
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd0:	60bb      	str	r3, [r7, #8]
      break;
 8004bd2:	e002      	b.n	8004bda <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bd4:	4b04      	ldr	r3, [pc, #16]	; (8004be8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004bd6:	60bb      	str	r3, [r7, #8]
      break;
 8004bd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bda:	68bb      	ldr	r3, [r7, #8]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3714      	adds	r7, #20
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004be4:	40023800 	.word	0x40023800
 8004be8:	00f42400 	.word	0x00f42400
 8004bec:	007a1200 	.word	0x007a1200

08004bf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bf4:	4b03      	ldr	r3, [pc, #12]	; (8004c04 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	20000170 	.word	0x20000170

08004c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c0c:	f7ff fff0 	bl	8004bf0 <HAL_RCC_GetHCLKFreq>
 8004c10:	4601      	mov	r1, r0
 8004c12:	4b05      	ldr	r3, [pc, #20]	; (8004c28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	0a9b      	lsrs	r3, r3, #10
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	4a03      	ldr	r2, [pc, #12]	; (8004c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c1e:	5cd3      	ldrb	r3, [r2, r3]
 8004c20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	40023800 	.word	0x40023800
 8004c2c:	08009b00 	.word	0x08009b00

08004c30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c34:	f7ff ffdc 	bl	8004bf0 <HAL_RCC_GetHCLKFreq>
 8004c38:	4601      	mov	r1, r0
 8004c3a:	4b05      	ldr	r3, [pc, #20]	; (8004c50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	0b5b      	lsrs	r3, r3, #13
 8004c40:	f003 0307 	and.w	r3, r3, #7
 8004c44:	4a03      	ldr	r2, [pc, #12]	; (8004c54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c46:	5cd3      	ldrb	r3, [r2, r3]
 8004c48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	40023800 	.word	0x40023800
 8004c54:	08009b00 	.word	0x08009b00

08004c58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e056      	b.n	8004d18 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d106      	bne.n	8004c8a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f7fd fdd5 	bl	8002834 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2202      	movs	r2, #2
 8004c8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ca0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	431a      	orrs	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cc6:	431a      	orrs	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	69db      	ldr	r3, [r3, #28]
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	ea42 0103 	orr.w	r1, r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	0c1b      	lsrs	r3, r3, #16
 8004ce8:	f003 0104 	and.w	r1, r3, #4
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	69da      	ldr	r2, [r3, #28]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d06:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3708      	adds	r7, #8
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b087      	sub	sp, #28
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d101      	bne.n	8004d40 <HAL_SPI_Transmit_IT+0x20>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	e067      	b.n	8004e10 <HAL_SPI_Transmit_IT+0xf0>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d002      	beq.n	8004d54 <HAL_SPI_Transmit_IT+0x34>
 8004d4e:	88fb      	ldrh	r3, [r7, #6]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d102      	bne.n	8004d5a <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d58:	e055      	b.n	8004e06 <HAL_SPI_Transmit_IT+0xe6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d002      	beq.n	8004d6c <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8004d66:	2302      	movs	r3, #2
 8004d68:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d6a:	e04c      	b.n	8004e06 <HAL_SPI_Transmit_IT+0xe6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2203      	movs	r2, #3
 8004d70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	88fa      	ldrh	r2, [r7, #6]
 8004d84:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	88fa      	ldrh	r2, [r7, #6]
 8004d8a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d003      	beq.n	8004db4 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	4a1b      	ldr	r2, [pc, #108]	; (8004e1c <HAL_SPI_Transmit_IT+0xfc>)
 8004db0:	645a      	str	r2, [r3, #68]	; 0x44
 8004db2:	e002      	b.n	8004dba <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	4a1a      	ldr	r2, [pc, #104]	; (8004e20 <HAL_SPI_Transmit_IT+0x100>)
 8004db8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dc2:	d107      	bne.n	8004dd4 <HAL_SPI_Transmit_IT+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dd2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8004de2:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dee:	2b40      	cmp	r3, #64	; 0x40
 8004df0:	d008      	beq.n	8004e04 <HAL_SPI_Transmit_IT+0xe4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	e000      	b.n	8004e06 <HAL_SPI_Transmit_IT+0xe6>
  }

error :
 8004e04:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	371c      	adds	r7, #28
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr
 8004e1c:	080050a7 	.word	0x080050a7
 8004e20:	08005061 	.word	0x08005061

08004e24 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b088      	sub	sp, #32
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	099b      	lsrs	r3, r3, #6
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d10f      	bne.n	8004e68 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00a      	beq.n	8004e68 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	099b      	lsrs	r3, r3, #6
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d004      	beq.n	8004e68 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	4798      	blx	r3
    return;
 8004e66:	e0d8      	b.n	800501a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	085b      	lsrs	r3, r3, #1
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00a      	beq.n	8004e8a <HAL_SPI_IRQHandler+0x66>
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	09db      	lsrs	r3, r3, #7
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d004      	beq.n	8004e8a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	4798      	blx	r3
    return;
 8004e88:	e0c7      	b.n	800501a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	095b      	lsrs	r3, r3, #5
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10c      	bne.n	8004eb0 <HAL_SPI_IRQHandler+0x8c>
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	099b      	lsrs	r3, r3, #6
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d106      	bne.n	8004eb0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	0a1b      	lsrs	r3, r3, #8
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 80b5 	beq.w	800501a <HAL_SPI_IRQHandler+0x1f6>
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	095b      	lsrs	r3, r3, #5
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f000 80ae 	beq.w	800501a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	099b      	lsrs	r3, r3, #6
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d023      	beq.n	8004f12 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	2b03      	cmp	r3, #3
 8004ed4:	d011      	beq.n	8004efa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eda:	f043 0204 	orr.w	r2, r3, #4
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	617b      	str	r3, [r7, #20]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	617b      	str	r3, [r7, #20]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	617b      	str	r3, [r7, #20]
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	e00b      	b.n	8004f12 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004efa:	2300      	movs	r3, #0
 8004efc:	613b      	str	r3, [r7, #16]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	613b      	str	r3, [r7, #16]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	613b      	str	r3, [r7, #16]
 8004f0e:	693b      	ldr	r3, [r7, #16]
        return;
 8004f10:	e083      	b.n	800501a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	095b      	lsrs	r3, r3, #5
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d014      	beq.n	8004f48 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f22:	f043 0201 	orr.w	r2, r3, #1
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60fb      	str	r3, [r7, #12]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	60fb      	str	r3, [r7, #12]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f44:	601a      	str	r2, [r3, #0]
 8004f46:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	0a1b      	lsrs	r3, r3, #8
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00c      	beq.n	8004f6e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f58:	f043 0208 	orr.w	r2, r3, #8
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004f60:	2300      	movs	r3, #0
 8004f62:	60bb      	str	r3, [r7, #8]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	60bb      	str	r3, [r7, #8]
 8004f6c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d050      	beq.n	8005018 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f84:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d104      	bne.n	8004fa2 <HAL_SPI_IRQHandler+0x17e>
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d034      	beq.n	800500c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f022 0203 	bic.w	r2, r2, #3
 8004fb0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d011      	beq.n	8004fde <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fbe:	4a18      	ldr	r2, [pc, #96]	; (8005020 <HAL_SPI_IRQHandler+0x1fc>)
 8004fc0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7fe fda6 	bl	8003b18 <HAL_DMA_Abort_IT>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d005      	beq.n	8004fde <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d016      	beq.n	8005014 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fea:	4a0d      	ldr	r2, [pc, #52]	; (8005020 <HAL_SPI_IRQHandler+0x1fc>)
 8004fec:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f7fe fd90 	bl	8003b18 <HAL_DMA_Abort_IT>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00a      	beq.n	8005014 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005002:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800500a:	e003      	b.n	8005014 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 f809 	bl	8005024 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005012:	e000      	b.n	8005016 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005014:	bf00      	nop
    return;
 8005016:	bf00      	nop
 8005018:	bf00      	nop
  }
}
 800501a:	3720      	adds	r7, #32
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	08005039 	.word	0x08005039

08005024 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005044:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f7ff ffe6 	bl	8005024 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005058:	bf00      	nop
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	330c      	adds	r3, #12
 8005072:	7812      	ldrb	r2, [r2, #0]
 8005074:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507a:	1c5a      	adds	r2, r3, #1
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005084:	b29b      	uxth	r3, r3
 8005086:	3b01      	subs	r3, #1
 8005088:	b29a      	uxth	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005092:	b29b      	uxth	r3, r3
 8005094:	2b00      	cmp	r3, #0
 8005096:	d102      	bne.n	800509e <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 f8d3 	bl	8005244 <SPI_CloseTx_ISR>
  }
}
 800509e:	bf00      	nop
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b082      	sub	sp, #8
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b2:	881a      	ldrh	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050be:	1c9a      	adds	r2, r3, #2
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	3b01      	subs	r3, #1
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d102      	bne.n	80050e2 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 f8b1 	bl	8005244 <SPI_CloseTx_ISR>
  }
}
 80050e2:	bf00      	nop
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b084      	sub	sp, #16
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	60f8      	str	r0, [r7, #12]
 80050f2:	60b9      	str	r1, [r7, #8]
 80050f4:	603b      	str	r3, [r7, #0]
 80050f6:	4613      	mov	r3, r2
 80050f8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050fa:	e04c      	b.n	8005196 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005102:	d048      	beq.n	8005196 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005104:	f7fd fdaa 	bl	8002c5c <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	683a      	ldr	r2, [r7, #0]
 8005110:	429a      	cmp	r2, r3
 8005112:	d902      	bls.n	800511a <SPI_WaitFlagStateUntilTimeout+0x30>
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d13d      	bne.n	8005196 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005128:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005132:	d111      	bne.n	8005158 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800513c:	d004      	beq.n	8005148 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005146:	d107      	bne.n	8005158 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005156:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005160:	d10f      	bne.n	8005182 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005170:	601a      	str	r2, [r3, #0]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005180:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e00f      	b.n	80051b6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689a      	ldr	r2, [r3, #8]
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	4013      	ands	r3, r2
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	bf0c      	ite	eq
 80051a6:	2301      	moveq	r3, #1
 80051a8:	2300      	movne	r3, #0
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	461a      	mov	r2, r3
 80051ae:	79fb      	ldrb	r3, [r7, #7]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d1a3      	bne.n	80050fc <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
	...

080051c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b088      	sub	sp, #32
 80051c4:	af02      	add	r7, sp, #8
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80051cc:	4b1b      	ldr	r3, [pc, #108]	; (800523c <SPI_EndRxTxTransaction+0x7c>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a1b      	ldr	r2, [pc, #108]	; (8005240 <SPI_EndRxTxTransaction+0x80>)
 80051d2:	fba2 2303 	umull	r2, r3, r2, r3
 80051d6:	0d5b      	lsrs	r3, r3, #21
 80051d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80051dc:	fb02 f303 	mul.w	r3, r2, r3
 80051e0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051ea:	d112      	bne.n	8005212 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	9300      	str	r3, [sp, #0]
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	2200      	movs	r2, #0
 80051f4:	2180      	movs	r1, #128	; 0x80
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f7ff ff77 	bl	80050ea <SPI_WaitFlagStateUntilTimeout>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d016      	beq.n	8005230 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005206:	f043 0220 	orr.w	r2, r3, #32
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e00f      	b.n	8005232 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00a      	beq.n	800522e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	3b01      	subs	r3, #1
 800521c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005228:	2b80      	cmp	r3, #128	; 0x80
 800522a:	d0f2      	beq.n	8005212 <SPI_EndRxTxTransaction+0x52>
 800522c:	e000      	b.n	8005230 <SPI_EndRxTxTransaction+0x70>
        break;
 800522e:	bf00      	nop
  }

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3718      	adds	r7, #24
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	20000170 	.word	0x20000170
 8005240:	165e9f81 	.word	0x165e9f81

08005244 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800524c:	4b2c      	ldr	r3, [pc, #176]	; (8005300 <SPI_CloseTx_ISR+0xbc>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a2c      	ldr	r2, [pc, #176]	; (8005304 <SPI_CloseTx_ISR+0xc0>)
 8005252:	fba2 2303 	umull	r2, r3, r2, r3
 8005256:	0a5b      	lsrs	r3, r3, #9
 8005258:	2264      	movs	r2, #100	; 0x64
 800525a:	fb02 f303 	mul.w	r3, r2, r3
 800525e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005260:	f7fd fcfc 	bl	8002c5c <HAL_GetTick>
 8005264:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d106      	bne.n	800527a <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005270:	f043 0220 	orr.w	r2, r3, #32
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005278:	e009      	b.n	800528e <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	3b01      	subs	r3, #1
 800527e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d0eb      	beq.n	8005266 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800529c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	2164      	movs	r1, #100	; 0x64
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7ff ff8c 	bl	80051c0 <SPI_EndRxTxTransaction>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d005      	beq.n	80052ba <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b2:	f043 0220 	orr.w	r2, r3, #32
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d10a      	bne.n	80052d8 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052c2:	2300      	movs	r3, #0
 80052c4:	60fb      	str	r3, [r7, #12]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	60fb      	str	r3, [r7, #12]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	60fb      	str	r3, [r7, #12]
 80052d6:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d003      	beq.n	80052f0 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f7ff fe9b 	bl	8005024 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80052ee:	e002      	b.n	80052f6 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f7fd f9a7 	bl	8002644 <HAL_SPI_TxCpltCallback>
}
 80052f6:	bf00      	nop
 80052f8:	3718      	adds	r7, #24
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	20000170 	.word	0x20000170
 8005304:	057619f1 	.word	0x057619f1

08005308 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e01d      	b.n	8005356 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d106      	bne.n	8005334 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7fd fad0 	bl	80028d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	3304      	adds	r3, #4
 8005344:	4619      	mov	r1, r3
 8005346:	4610      	mov	r0, r2
 8005348:	f000 fa38 	bl	80057bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800535e:	b480      	push	{r7}
 8005360:	b085      	sub	sp, #20
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2202      	movs	r2, #2
 800536a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f003 0307 	and.w	r3, r3, #7
 8005378:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2b06      	cmp	r3, #6
 800537e:	d007      	beq.n	8005390 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 0201 	orr.w	r2, r2, #1
 800538e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053a6:	b480      	push	{r7}
 80053a8:	b085      	sub	sp, #20
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68da      	ldr	r2, [r3, #12]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f042 0201 	orr.w	r2, r2, #1
 80053bc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f003 0307 	and.w	r3, r3, #7
 80053c8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2b06      	cmp	r3, #6
 80053ce:	d007      	beq.n	80053e0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f042 0201 	orr.w	r2, r2, #1
 80053de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b082      	sub	sp, #8
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	f003 0302 	and.w	r3, r3, #2
 8005400:	2b02      	cmp	r3, #2
 8005402:	d122      	bne.n	800544a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	2b02      	cmp	r3, #2
 8005410:	d11b      	bne.n	800544a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f06f 0202 	mvn.w	r2, #2
 800541a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	f003 0303 	and.w	r3, r3, #3
 800542c:	2b00      	cmp	r3, #0
 800542e:	d003      	beq.n	8005438 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 f9a5 	bl	8005780 <HAL_TIM_IC_CaptureCallback>
 8005436:	e005      	b.n	8005444 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 f997 	bl	800576c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f9a8 	bl	8005794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	f003 0304 	and.w	r3, r3, #4
 8005454:	2b04      	cmp	r3, #4
 8005456:	d122      	bne.n	800549e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	f003 0304 	and.w	r3, r3, #4
 8005462:	2b04      	cmp	r3, #4
 8005464:	d11b      	bne.n	800549e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f06f 0204 	mvn.w	r2, #4
 800546e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2202      	movs	r2, #2
 8005474:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005480:	2b00      	cmp	r3, #0
 8005482:	d003      	beq.n	800548c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 f97b 	bl	8005780 <HAL_TIM_IC_CaptureCallback>
 800548a:	e005      	b.n	8005498 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 f96d 	bl	800576c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f97e 	bl	8005794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	f003 0308 	and.w	r3, r3, #8
 80054a8:	2b08      	cmp	r3, #8
 80054aa:	d122      	bne.n	80054f2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	f003 0308 	and.w	r3, r3, #8
 80054b6:	2b08      	cmp	r3, #8
 80054b8:	d11b      	bne.n	80054f2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f06f 0208 	mvn.w	r2, #8
 80054c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2204      	movs	r2, #4
 80054c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	69db      	ldr	r3, [r3, #28]
 80054d0:	f003 0303 	and.w	r3, r3, #3
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d003      	beq.n	80054e0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 f951 	bl	8005780 <HAL_TIM_IC_CaptureCallback>
 80054de:	e005      	b.n	80054ec <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 f943 	bl	800576c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 f954 	bl	8005794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	f003 0310 	and.w	r3, r3, #16
 80054fc:	2b10      	cmp	r3, #16
 80054fe:	d122      	bne.n	8005546 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	f003 0310 	and.w	r3, r3, #16
 800550a:	2b10      	cmp	r3, #16
 800550c:	d11b      	bne.n	8005546 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f06f 0210 	mvn.w	r2, #16
 8005516:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2208      	movs	r2, #8
 800551c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005528:	2b00      	cmp	r3, #0
 800552a:	d003      	beq.n	8005534 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 f927 	bl	8005780 <HAL_TIM_IC_CaptureCallback>
 8005532:	e005      	b.n	8005540 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 f919 	bl	800576c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f92a 	bl	8005794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b01      	cmp	r3, #1
 8005552:	d10e      	bne.n	8005572 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	2b01      	cmp	r3, #1
 8005560:	d107      	bne.n	8005572 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f06f 0201 	mvn.w	r2, #1
 800556a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f7fd f87f 	bl	8002670 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800557c:	2b80      	cmp	r3, #128	; 0x80
 800557e:	d10e      	bne.n	800559e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800558a:	2b80      	cmp	r3, #128	; 0x80
 800558c:	d107      	bne.n	800559e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 faa1 	bl	8005ae0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a8:	2b40      	cmp	r3, #64	; 0x40
 80055aa:	d10e      	bne.n	80055ca <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b6:	2b40      	cmp	r3, #64	; 0x40
 80055b8:	d107      	bne.n	80055ca <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 f8ef 	bl	80057a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	f003 0320 	and.w	r3, r3, #32
 80055d4:	2b20      	cmp	r3, #32
 80055d6:	d10e      	bne.n	80055f6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	f003 0320 	and.w	r3, r3, #32
 80055e2:	2b20      	cmp	r3, #32
 80055e4:	d107      	bne.n	80055f6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f06f 0220 	mvn.w	r2, #32
 80055ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 fa6b 	bl	8005acc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055f6:	bf00      	nop
 80055f8:	3708      	adds	r7, #8
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b084      	sub	sp, #16
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
 8005606:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800560e:	2b01      	cmp	r3, #1
 8005610:	d101      	bne.n	8005616 <HAL_TIM_ConfigClockSource+0x18>
 8005612:	2302      	movs	r3, #2
 8005614:	e0a6      	b.n	8005764 <HAL_TIM_ConfigClockSource+0x166>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2202      	movs	r2, #2
 8005622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005634:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800563c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b40      	cmp	r3, #64	; 0x40
 800564c:	d067      	beq.n	800571e <HAL_TIM_ConfigClockSource+0x120>
 800564e:	2b40      	cmp	r3, #64	; 0x40
 8005650:	d80b      	bhi.n	800566a <HAL_TIM_ConfigClockSource+0x6c>
 8005652:	2b10      	cmp	r3, #16
 8005654:	d073      	beq.n	800573e <HAL_TIM_ConfigClockSource+0x140>
 8005656:	2b10      	cmp	r3, #16
 8005658:	d802      	bhi.n	8005660 <HAL_TIM_ConfigClockSource+0x62>
 800565a:	2b00      	cmp	r3, #0
 800565c:	d06f      	beq.n	800573e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800565e:	e078      	b.n	8005752 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005660:	2b20      	cmp	r3, #32
 8005662:	d06c      	beq.n	800573e <HAL_TIM_ConfigClockSource+0x140>
 8005664:	2b30      	cmp	r3, #48	; 0x30
 8005666:	d06a      	beq.n	800573e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005668:	e073      	b.n	8005752 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800566a:	2b70      	cmp	r3, #112	; 0x70
 800566c:	d00d      	beq.n	800568a <HAL_TIM_ConfigClockSource+0x8c>
 800566e:	2b70      	cmp	r3, #112	; 0x70
 8005670:	d804      	bhi.n	800567c <HAL_TIM_ConfigClockSource+0x7e>
 8005672:	2b50      	cmp	r3, #80	; 0x50
 8005674:	d033      	beq.n	80056de <HAL_TIM_ConfigClockSource+0xe0>
 8005676:	2b60      	cmp	r3, #96	; 0x60
 8005678:	d041      	beq.n	80056fe <HAL_TIM_ConfigClockSource+0x100>
      break;
 800567a:	e06a      	b.n	8005752 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800567c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005680:	d066      	beq.n	8005750 <HAL_TIM_ConfigClockSource+0x152>
 8005682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005686:	d017      	beq.n	80056b8 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005688:	e063      	b.n	8005752 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6818      	ldr	r0, [r3, #0]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	6899      	ldr	r1, [r3, #8]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	685a      	ldr	r2, [r3, #4]
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	f000 f989 	bl	80059b0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80056ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	609a      	str	r2, [r3, #8]
      break;
 80056b6:	e04c      	b.n	8005752 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6818      	ldr	r0, [r3, #0]
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	6899      	ldr	r1, [r3, #8]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	f000 f972 	bl	80059b0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689a      	ldr	r2, [r3, #8]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056da:	609a      	str	r2, [r3, #8]
      break;
 80056dc:	e039      	b.n	8005752 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6818      	ldr	r0, [r3, #0]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	6859      	ldr	r1, [r3, #4]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	461a      	mov	r2, r3
 80056ec:	f000 f8e6 	bl	80058bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2150      	movs	r1, #80	; 0x50
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 f93f 	bl	800597a <TIM_ITRx_SetConfig>
      break;
 80056fc:	e029      	b.n	8005752 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6818      	ldr	r0, [r3, #0]
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	6859      	ldr	r1, [r3, #4]
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	461a      	mov	r2, r3
 800570c:	f000 f905 	bl	800591a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2160      	movs	r1, #96	; 0x60
 8005716:	4618      	mov	r0, r3
 8005718:	f000 f92f 	bl	800597a <TIM_ITRx_SetConfig>
      break;
 800571c:	e019      	b.n	8005752 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6818      	ldr	r0, [r3, #0]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	6859      	ldr	r1, [r3, #4]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	461a      	mov	r2, r3
 800572c:	f000 f8c6 	bl	80058bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2140      	movs	r1, #64	; 0x40
 8005736:	4618      	mov	r0, r3
 8005738:	f000 f91f 	bl	800597a <TIM_ITRx_SetConfig>
      break;
 800573c:	e009      	b.n	8005752 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4619      	mov	r1, r3
 8005748:	4610      	mov	r0, r2
 800574a:	f000 f916 	bl	800597a <TIM_ITRx_SetConfig>
      break;
 800574e:	e000      	b.n	8005752 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005750:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005788:	bf00      	nop
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a34      	ldr	r2, [pc, #208]	; (80058a0 <TIM_Base_SetConfig+0xe4>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d00f      	beq.n	80057f4 <TIM_Base_SetConfig+0x38>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057da:	d00b      	beq.n	80057f4 <TIM_Base_SetConfig+0x38>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a31      	ldr	r2, [pc, #196]	; (80058a4 <TIM_Base_SetConfig+0xe8>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d007      	beq.n	80057f4 <TIM_Base_SetConfig+0x38>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a30      	ldr	r2, [pc, #192]	; (80058a8 <TIM_Base_SetConfig+0xec>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d003      	beq.n	80057f4 <TIM_Base_SetConfig+0x38>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a2f      	ldr	r2, [pc, #188]	; (80058ac <TIM_Base_SetConfig+0xf0>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d108      	bne.n	8005806 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	4313      	orrs	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a25      	ldr	r2, [pc, #148]	; (80058a0 <TIM_Base_SetConfig+0xe4>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d01b      	beq.n	8005846 <TIM_Base_SetConfig+0x8a>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005814:	d017      	beq.n	8005846 <TIM_Base_SetConfig+0x8a>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a22      	ldr	r2, [pc, #136]	; (80058a4 <TIM_Base_SetConfig+0xe8>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d013      	beq.n	8005846 <TIM_Base_SetConfig+0x8a>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a21      	ldr	r2, [pc, #132]	; (80058a8 <TIM_Base_SetConfig+0xec>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d00f      	beq.n	8005846 <TIM_Base_SetConfig+0x8a>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a20      	ldr	r2, [pc, #128]	; (80058ac <TIM_Base_SetConfig+0xf0>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d00b      	beq.n	8005846 <TIM_Base_SetConfig+0x8a>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a1f      	ldr	r2, [pc, #124]	; (80058b0 <TIM_Base_SetConfig+0xf4>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d007      	beq.n	8005846 <TIM_Base_SetConfig+0x8a>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a1e      	ldr	r2, [pc, #120]	; (80058b4 <TIM_Base_SetConfig+0xf8>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d003      	beq.n	8005846 <TIM_Base_SetConfig+0x8a>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a1d      	ldr	r2, [pc, #116]	; (80058b8 <TIM_Base_SetConfig+0xfc>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d108      	bne.n	8005858 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800584c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	4313      	orrs	r3, r2
 8005856:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	4313      	orrs	r3, r2
 8005864:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	689a      	ldr	r2, [r3, #8]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a08      	ldr	r2, [pc, #32]	; (80058a0 <TIM_Base_SetConfig+0xe4>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d103      	bne.n	800588c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	691a      	ldr	r2, [r3, #16]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	615a      	str	r2, [r3, #20]
}
 8005892:	bf00      	nop
 8005894:	3714      	adds	r7, #20
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	40010000 	.word	0x40010000
 80058a4:	40000400 	.word	0x40000400
 80058a8:	40000800 	.word	0x40000800
 80058ac:	40000c00 	.word	0x40000c00
 80058b0:	40014000 	.word	0x40014000
 80058b4:	40014400 	.word	0x40014400
 80058b8:	40014800 	.word	0x40014800

080058bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058bc:	b480      	push	{r7}
 80058be:	b087      	sub	sp, #28
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6a1b      	ldr	r3, [r3, #32]
 80058cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	f023 0201 	bic.w	r2, r3, #1
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	011b      	lsls	r3, r3, #4
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f023 030a 	bic.w	r3, r3, #10
 80058f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	4313      	orrs	r3, r2
 8005900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	621a      	str	r2, [r3, #32]
}
 800590e:	bf00      	nop
 8005910:	371c      	adds	r7, #28
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800591a:	b480      	push	{r7}
 800591c:	b087      	sub	sp, #28
 800591e:	af00      	add	r7, sp, #0
 8005920:	60f8      	str	r0, [r7, #12]
 8005922:	60b9      	str	r1, [r7, #8]
 8005924:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	f023 0210 	bic.w	r2, r3, #16
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005944:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	031b      	lsls	r3, r3, #12
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	4313      	orrs	r3, r2
 800594e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005956:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	011b      	lsls	r3, r3, #4
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	4313      	orrs	r3, r2
 8005960:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	621a      	str	r2, [r3, #32]
}
 800596e:	bf00      	nop
 8005970:	371c      	adds	r7, #28
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr

0800597a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800597a:	b480      	push	{r7}
 800597c:	b085      	sub	sp, #20
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
 8005982:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005990:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005992:	683a      	ldr	r2, [r7, #0]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	4313      	orrs	r3, r2
 8005998:	f043 0307 	orr.w	r3, r3, #7
 800599c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	609a      	str	r2, [r3, #8]
}
 80059a4:	bf00      	nop
 80059a6:	3714      	adds	r7, #20
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b087      	sub	sp, #28
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
 80059bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	021a      	lsls	r2, r3, #8
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	431a      	orrs	r2, r3
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	4313      	orrs	r3, r2
 80059dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	609a      	str	r2, [r3, #8]
}
 80059e4:	bf00      	nop
 80059e6:	371c      	adds	r7, #28
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d101      	bne.n	8005a08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a04:	2302      	movs	r3, #2
 8005a06:	e050      	b.n	8005aaa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2202      	movs	r2, #2
 8005a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a1c      	ldr	r2, [pc, #112]	; (8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d018      	beq.n	8005a7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a54:	d013      	beq.n	8005a7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a18      	ldr	r2, [pc, #96]	; (8005abc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d00e      	beq.n	8005a7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a16      	ldr	r2, [pc, #88]	; (8005ac0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d009      	beq.n	8005a7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a15      	ldr	r2, [pc, #84]	; (8005ac4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d004      	beq.n	8005a7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a13      	ldr	r2, [pc, #76]	; (8005ac8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d10c      	bne.n	8005a98 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3714      	adds	r7, #20
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	40010000 	.word	0x40010000
 8005abc:	40000400 	.word	0x40000400
 8005ac0:	40000800 	.word	0x40000800
 8005ac4:	40000c00 	.word	0x40000c00
 8005ac8:	40014000 	.word	0x40014000

08005acc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d101      	bne.n	8005b06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e03f      	b.n	8005b86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d106      	bne.n	8005b20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7fc ff16 	bl	800294c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2224      	movs	r2, #36	; 0x24
 8005b24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68da      	ldr	r2, [r3, #12]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 fba1 	bl	8006280 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	691a      	ldr	r2, [r3, #16]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	695a      	ldr	r2, [r3, #20]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68da      	ldr	r2, [r3, #12]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2220      	movs	r2, #32
 8005b78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2220      	movs	r2, #32
 8005b80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3708      	adds	r7, #8
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b088      	sub	sp, #32
 8005b92:	af02      	add	r7, sp, #8
 8005b94:	60f8      	str	r0, [r7, #12]
 8005b96:	60b9      	str	r1, [r7, #8]
 8005b98:	603b      	str	r3, [r7, #0]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b20      	cmp	r3, #32
 8005bac:	f040 8083 	bne.w	8005cb6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d002      	beq.n	8005bbc <HAL_UART_Transmit+0x2e>
 8005bb6:	88fb      	ldrh	r3, [r7, #6]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d101      	bne.n	8005bc0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e07b      	b.n	8005cb8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d101      	bne.n	8005bce <HAL_UART_Transmit+0x40>
 8005bca:	2302      	movs	r3, #2
 8005bcc:	e074      	b.n	8005cb8 <HAL_UART_Transmit+0x12a>
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2221      	movs	r2, #33	; 0x21
 8005be0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005be4:	f7fd f83a 	bl	8002c5c <HAL_GetTick>
 8005be8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	88fa      	ldrh	r2, [r7, #6]
 8005bee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	88fa      	ldrh	r2, [r7, #6]
 8005bf4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005bfe:	e042      	b.n	8005c86 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	3b01      	subs	r3, #1
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c16:	d122      	bne.n	8005c5e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	2180      	movs	r1, #128	; 0x80
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f000 f9c0 	bl	8005fa8 <UART_WaitOnFlagUntilTimeout>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e042      	b.n	8005cb8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	881b      	ldrh	r3, [r3, #0]
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c44:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d103      	bne.n	8005c56 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	3302      	adds	r3, #2
 8005c52:	60bb      	str	r3, [r7, #8]
 8005c54:	e017      	b.n	8005c86 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	60bb      	str	r3, [r7, #8]
 8005c5c:	e013      	b.n	8005c86 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	9300      	str	r3, [sp, #0]
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	2200      	movs	r2, #0
 8005c66:	2180      	movs	r1, #128	; 0x80
 8005c68:	68f8      	ldr	r0, [r7, #12]
 8005c6a:	f000 f99d 	bl	8005fa8 <UART_WaitOnFlagUntilTimeout>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d001      	beq.n	8005c78 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e01f      	b.n	8005cb8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	1c5a      	adds	r2, r3, #1
 8005c7c:	60ba      	str	r2, [r7, #8]
 8005c7e:	781a      	ldrb	r2, [r3, #0]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1b7      	bne.n	8005c00 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	9300      	str	r3, [sp, #0]
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	2200      	movs	r2, #0
 8005c98:	2140      	movs	r1, #64	; 0x40
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f000 f984 	bl	8005fa8 <UART_WaitOnFlagUntilTimeout>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d001      	beq.n	8005caa <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e006      	b.n	8005cb8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2220      	movs	r2, #32
 8005cae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	e000      	b.n	8005cb8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005cb6:	2302      	movs	r3, #2
  }
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3718      	adds	r7, #24
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b20      	cmp	r3, #32
 8005cd8:	d140      	bne.n	8005d5c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d002      	beq.n	8005ce6 <HAL_UART_Receive_IT+0x26>
 8005ce0:	88fb      	ldrh	r3, [r7, #6]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d101      	bne.n	8005cea <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e039      	b.n	8005d5e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d101      	bne.n	8005cf8 <HAL_UART_Receive_IT+0x38>
 8005cf4:	2302      	movs	r3, #2
 8005cf6:	e032      	b.n	8005d5e <HAL_UART_Receive_IT+0x9e>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	88fa      	ldrh	r2, [r7, #6]
 8005d0a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	88fa      	ldrh	r2, [r7, #6]
 8005d10:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2222      	movs	r2, #34	; 0x22
 8005d1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68da      	ldr	r2, [r3, #12]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d36:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	695a      	ldr	r2, [r3, #20]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f042 0201 	orr.w	r2, r2, #1
 8005d46:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	68da      	ldr	r2, [r3, #12]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f042 0220 	orr.w	r2, r2, #32
 8005d56:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	e000      	b.n	8005d5e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005d5c:	2302      	movs	r3, #2
  }
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
	...

08005d6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b088      	sub	sp, #32
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005d90:	2300      	movs	r3, #0
 8005d92:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	f003 030f 	and.w	r3, r3, #15
 8005d9a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d10d      	bne.n	8005dbe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	f003 0320 	and.w	r3, r3, #32
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d008      	beq.n	8005dbe <HAL_UART_IRQHandler+0x52>
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	f003 0320 	and.w	r3, r3, #32
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d003      	beq.n	8005dbe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f9e0 	bl	800617c <UART_Receive_IT>
      return;
 8005dbc:	e0d1      	b.n	8005f62 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f000 80b0 	beq.w	8005f26 <HAL_UART_IRQHandler+0x1ba>
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f003 0301 	and.w	r3, r3, #1
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d105      	bne.n	8005ddc <HAL_UART_IRQHandler+0x70>
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	f000 80a5 	beq.w	8005f26 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00a      	beq.n	8005dfc <HAL_UART_IRQHandler+0x90>
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d005      	beq.n	8005dfc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df4:	f043 0201 	orr.w	r2, r3, #1
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	f003 0304 	and.w	r3, r3, #4
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00a      	beq.n	8005e1c <HAL_UART_IRQHandler+0xb0>
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f003 0301 	and.w	r3, r3, #1
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d005      	beq.n	8005e1c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e14:	f043 0202 	orr.w	r2, r3, #2
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00a      	beq.n	8005e3c <HAL_UART_IRQHandler+0xd0>
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d005      	beq.n	8005e3c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e34:	f043 0204 	orr.w	r2, r3, #4
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	f003 0308 	and.w	r3, r3, #8
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00f      	beq.n	8005e66 <HAL_UART_IRQHandler+0xfa>
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	f003 0320 	and.w	r3, r3, #32
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d104      	bne.n	8005e5a <HAL_UART_IRQHandler+0xee>
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d005      	beq.n	8005e66 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e5e:	f043 0208 	orr.w	r2, r3, #8
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d078      	beq.n	8005f60 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	f003 0320 	and.w	r3, r3, #32
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d007      	beq.n	8005e88 <HAL_UART_IRQHandler+0x11c>
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	f003 0320 	and.w	r3, r3, #32
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d002      	beq.n	8005e88 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 f97a 	bl	800617c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	695b      	ldr	r3, [r3, #20]
 8005e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e92:	2b40      	cmp	r3, #64	; 0x40
 8005e94:	bf0c      	ite	eq
 8005e96:	2301      	moveq	r3, #1
 8005e98:	2300      	movne	r3, #0
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ea2:	f003 0308 	and.w	r3, r3, #8
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d102      	bne.n	8005eb0 <HAL_UART_IRQHandler+0x144>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d031      	beq.n	8005f14 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 f8c3 	bl	800603c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	695b      	ldr	r3, [r3, #20]
 8005ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec0:	2b40      	cmp	r3, #64	; 0x40
 8005ec2:	d123      	bne.n	8005f0c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	695a      	ldr	r2, [r3, #20]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ed2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d013      	beq.n	8005f04 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee0:	4a21      	ldr	r2, [pc, #132]	; (8005f68 <HAL_UART_IRQHandler+0x1fc>)
 8005ee2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7fd fe15 	bl	8003b18 <HAL_DMA_Abort_IT>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d016      	beq.n	8005f22 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005efe:	4610      	mov	r0, r2
 8005f00:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f02:	e00e      	b.n	8005f22 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 f845 	bl	8005f94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f0a:	e00a      	b.n	8005f22 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 f841 	bl	8005f94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f12:	e006      	b.n	8005f22 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 f83d 	bl	8005f94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005f20:	e01e      	b.n	8005f60 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f22:	bf00      	nop
    return;
 8005f24:	e01c      	b.n	8005f60 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d008      	beq.n	8005f42 <HAL_UART_IRQHandler+0x1d6>
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d003      	beq.n	8005f42 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f8b0 	bl	80060a0 <UART_Transmit_IT>
    return;
 8005f40:	e00f      	b.n	8005f62 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00a      	beq.n	8005f62 <HAL_UART_IRQHandler+0x1f6>
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d005      	beq.n	8005f62 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f8f8 	bl	800614c <UART_EndTransmit_IT>
    return;
 8005f5c:	bf00      	nop
 8005f5e:	e000      	b.n	8005f62 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005f60:	bf00      	nop
  }
}
 8005f62:	3720      	adds	r7, #32
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	08006079 	.word	0x08006079

08005f6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f9c:	bf00      	nop
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	603b      	str	r3, [r7, #0]
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fb8:	e02c      	b.n	8006014 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc0:	d028      	beq.n	8006014 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d007      	beq.n	8005fd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fc8:	f7fc fe48 	bl	8002c5c <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	69ba      	ldr	r2, [r7, #24]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d21d      	bcs.n	8006014 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68da      	ldr	r2, [r3, #12]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005fe6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	695a      	ldr	r2, [r3, #20]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f022 0201 	bic.w	r2, r2, #1
 8005ff6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2220      	movs	r2, #32
 8005ffc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2220      	movs	r2, #32
 8006004:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	e00f      	b.n	8006034 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	4013      	ands	r3, r2
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	429a      	cmp	r2, r3
 8006022:	bf0c      	ite	eq
 8006024:	2301      	moveq	r3, #1
 8006026:	2300      	movne	r3, #0
 8006028:	b2db      	uxtb	r3, r3
 800602a:	461a      	mov	r2, r3
 800602c:	79fb      	ldrb	r3, [r7, #7]
 800602e:	429a      	cmp	r2, r3
 8006030:	d0c3      	beq.n	8005fba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68da      	ldr	r2, [r3, #12]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006052:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	695a      	ldr	r2, [r3, #20]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f022 0201 	bic.w	r2, r2, #1
 8006062:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2220      	movs	r2, #32
 8006068:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006084:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f7ff ff7e 	bl	8005f94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006098:	bf00      	nop
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b21      	cmp	r3, #33	; 0x21
 80060b2:	d144      	bne.n	800613e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060bc:	d11a      	bne.n	80060f4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	881b      	ldrh	r3, [r3, #0]
 80060c8:	461a      	mov	r2, r3
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060d2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d105      	bne.n	80060e8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a1b      	ldr	r3, [r3, #32]
 80060e0:	1c9a      	adds	r2, r3, #2
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	621a      	str	r2, [r3, #32]
 80060e6:	e00e      	b.n	8006106 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a1b      	ldr	r3, [r3, #32]
 80060ec:	1c5a      	adds	r2, r3, #1
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	621a      	str	r2, [r3, #32]
 80060f2:	e008      	b.n	8006106 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	1c59      	adds	r1, r3, #1
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	6211      	str	r1, [r2, #32]
 80060fe:	781a      	ldrb	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800610a:	b29b      	uxth	r3, r3
 800610c:	3b01      	subs	r3, #1
 800610e:	b29b      	uxth	r3, r3
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	4619      	mov	r1, r3
 8006114:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10f      	bne.n	800613a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68da      	ldr	r2, [r3, #12]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006128:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68da      	ldr	r2, [r3, #12]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006138:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800613a:	2300      	movs	r3, #0
 800613c:	e000      	b.n	8006140 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800613e:	2302      	movs	r3, #2
  }
}
 8006140:	4618      	mov	r0, r3
 8006142:	3714      	adds	r7, #20
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68da      	ldr	r2, [r3, #12]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006162:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2220      	movs	r2, #32
 8006168:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f7ff fefd 	bl	8005f6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3708      	adds	r7, #8
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b22      	cmp	r3, #34	; 0x22
 800618e:	d171      	bne.n	8006274 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006198:	d123      	bne.n	80061e2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10e      	bne.n	80061c6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061be:	1c9a      	adds	r2, r3, #2
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	629a      	str	r2, [r3, #40]	; 0x28
 80061c4:	e029      	b.n	800621a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061da:	1c5a      	adds	r2, r3, #1
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	629a      	str	r2, [r3, #40]	; 0x28
 80061e0:	e01b      	b.n	800621a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d10a      	bne.n	8006200 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	6858      	ldr	r0, [r3, #4]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f4:	1c59      	adds	r1, r3, #1
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	6291      	str	r1, [r2, #40]	; 0x28
 80061fa:	b2c2      	uxtb	r2, r0
 80061fc:	701a      	strb	r2, [r3, #0]
 80061fe:	e00c      	b.n	800621a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	b2da      	uxtb	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620c:	1c58      	adds	r0, r3, #1
 800620e:	6879      	ldr	r1, [r7, #4]
 8006210:	6288      	str	r0, [r1, #40]	; 0x28
 8006212:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006216:	b2d2      	uxtb	r2, r2
 8006218:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800621e:	b29b      	uxth	r3, r3
 8006220:	3b01      	subs	r3, #1
 8006222:	b29b      	uxth	r3, r3
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	4619      	mov	r1, r3
 8006228:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800622a:	2b00      	cmp	r3, #0
 800622c:	d120      	bne.n	8006270 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68da      	ldr	r2, [r3, #12]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f022 0220 	bic.w	r2, r2, #32
 800623c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68da      	ldr	r2, [r3, #12]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800624c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	695a      	ldr	r2, [r3, #20]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 0201 	bic.w	r2, r2, #1
 800625c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2220      	movs	r2, #32
 8006262:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f7ff fe8a 	bl	8005f80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800626c:	2300      	movs	r3, #0
 800626e:	e002      	b.n	8006276 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006270:	2300      	movs	r3, #0
 8006272:	e000      	b.n	8006276 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006274:	2302      	movs	r3, #2
  }
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
	...

08006280 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006284:	b085      	sub	sp, #20
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	68da      	ldr	r2, [r3, #12]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	430a      	orrs	r2, r1
 800629e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	689a      	ldr	r2, [r3, #8]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	431a      	orrs	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	431a      	orrs	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	69db      	ldr	r3, [r3, #28]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80062c2:	f023 030c 	bic.w	r3, r3, #12
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	6812      	ldr	r2, [r2, #0]
 80062ca:	68f9      	ldr	r1, [r7, #12]
 80062cc:	430b      	orrs	r3, r1
 80062ce:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	699a      	ldr	r2, [r3, #24]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	430a      	orrs	r2, r1
 80062e4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062ee:	f040 818b 	bne.w	8006608 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4ac1      	ldr	r2, [pc, #772]	; (80065fc <UART_SetConfig+0x37c>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d005      	beq.n	8006308 <UART_SetConfig+0x88>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4abf      	ldr	r2, [pc, #764]	; (8006600 <UART_SetConfig+0x380>)
 8006302:	4293      	cmp	r3, r2
 8006304:	f040 80bd 	bne.w	8006482 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006308:	f7fe fc92 	bl	8004c30 <HAL_RCC_GetPCLK2Freq>
 800630c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	461d      	mov	r5, r3
 8006312:	f04f 0600 	mov.w	r6, #0
 8006316:	46a8      	mov	r8, r5
 8006318:	46b1      	mov	r9, r6
 800631a:	eb18 0308 	adds.w	r3, r8, r8
 800631e:	eb49 0409 	adc.w	r4, r9, r9
 8006322:	4698      	mov	r8, r3
 8006324:	46a1      	mov	r9, r4
 8006326:	eb18 0805 	adds.w	r8, r8, r5
 800632a:	eb49 0906 	adc.w	r9, r9, r6
 800632e:	f04f 0100 	mov.w	r1, #0
 8006332:	f04f 0200 	mov.w	r2, #0
 8006336:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800633a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800633e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006342:	4688      	mov	r8, r1
 8006344:	4691      	mov	r9, r2
 8006346:	eb18 0005 	adds.w	r0, r8, r5
 800634a:	eb49 0106 	adc.w	r1, r9, r6
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	461d      	mov	r5, r3
 8006354:	f04f 0600 	mov.w	r6, #0
 8006358:	196b      	adds	r3, r5, r5
 800635a:	eb46 0406 	adc.w	r4, r6, r6
 800635e:	461a      	mov	r2, r3
 8006360:	4623      	mov	r3, r4
 8006362:	f7fa fd87 	bl	8000e74 <__aeabi_uldivmod>
 8006366:	4603      	mov	r3, r0
 8006368:	460c      	mov	r4, r1
 800636a:	461a      	mov	r2, r3
 800636c:	4ba5      	ldr	r3, [pc, #660]	; (8006604 <UART_SetConfig+0x384>)
 800636e:	fba3 2302 	umull	r2, r3, r3, r2
 8006372:	095b      	lsrs	r3, r3, #5
 8006374:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	461d      	mov	r5, r3
 800637c:	f04f 0600 	mov.w	r6, #0
 8006380:	46a9      	mov	r9, r5
 8006382:	46b2      	mov	sl, r6
 8006384:	eb19 0309 	adds.w	r3, r9, r9
 8006388:	eb4a 040a 	adc.w	r4, sl, sl
 800638c:	4699      	mov	r9, r3
 800638e:	46a2      	mov	sl, r4
 8006390:	eb19 0905 	adds.w	r9, r9, r5
 8006394:	eb4a 0a06 	adc.w	sl, sl, r6
 8006398:	f04f 0100 	mov.w	r1, #0
 800639c:	f04f 0200 	mov.w	r2, #0
 80063a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80063a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80063ac:	4689      	mov	r9, r1
 80063ae:	4692      	mov	sl, r2
 80063b0:	eb19 0005 	adds.w	r0, r9, r5
 80063b4:	eb4a 0106 	adc.w	r1, sl, r6
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	461d      	mov	r5, r3
 80063be:	f04f 0600 	mov.w	r6, #0
 80063c2:	196b      	adds	r3, r5, r5
 80063c4:	eb46 0406 	adc.w	r4, r6, r6
 80063c8:	461a      	mov	r2, r3
 80063ca:	4623      	mov	r3, r4
 80063cc:	f7fa fd52 	bl	8000e74 <__aeabi_uldivmod>
 80063d0:	4603      	mov	r3, r0
 80063d2:	460c      	mov	r4, r1
 80063d4:	461a      	mov	r2, r3
 80063d6:	4b8b      	ldr	r3, [pc, #556]	; (8006604 <UART_SetConfig+0x384>)
 80063d8:	fba3 1302 	umull	r1, r3, r3, r2
 80063dc:	095b      	lsrs	r3, r3, #5
 80063de:	2164      	movs	r1, #100	; 0x64
 80063e0:	fb01 f303 	mul.w	r3, r1, r3
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	00db      	lsls	r3, r3, #3
 80063e8:	3332      	adds	r3, #50	; 0x32
 80063ea:	4a86      	ldr	r2, [pc, #536]	; (8006604 <UART_SetConfig+0x384>)
 80063ec:	fba2 2303 	umull	r2, r3, r2, r3
 80063f0:	095b      	lsrs	r3, r3, #5
 80063f2:	005b      	lsls	r3, r3, #1
 80063f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80063f8:	4498      	add	r8, r3
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	461d      	mov	r5, r3
 80063fe:	f04f 0600 	mov.w	r6, #0
 8006402:	46a9      	mov	r9, r5
 8006404:	46b2      	mov	sl, r6
 8006406:	eb19 0309 	adds.w	r3, r9, r9
 800640a:	eb4a 040a 	adc.w	r4, sl, sl
 800640e:	4699      	mov	r9, r3
 8006410:	46a2      	mov	sl, r4
 8006412:	eb19 0905 	adds.w	r9, r9, r5
 8006416:	eb4a 0a06 	adc.w	sl, sl, r6
 800641a:	f04f 0100 	mov.w	r1, #0
 800641e:	f04f 0200 	mov.w	r2, #0
 8006422:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006426:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800642a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800642e:	4689      	mov	r9, r1
 8006430:	4692      	mov	sl, r2
 8006432:	eb19 0005 	adds.w	r0, r9, r5
 8006436:	eb4a 0106 	adc.w	r1, sl, r6
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	461d      	mov	r5, r3
 8006440:	f04f 0600 	mov.w	r6, #0
 8006444:	196b      	adds	r3, r5, r5
 8006446:	eb46 0406 	adc.w	r4, r6, r6
 800644a:	461a      	mov	r2, r3
 800644c:	4623      	mov	r3, r4
 800644e:	f7fa fd11 	bl	8000e74 <__aeabi_uldivmod>
 8006452:	4603      	mov	r3, r0
 8006454:	460c      	mov	r4, r1
 8006456:	461a      	mov	r2, r3
 8006458:	4b6a      	ldr	r3, [pc, #424]	; (8006604 <UART_SetConfig+0x384>)
 800645a:	fba3 1302 	umull	r1, r3, r3, r2
 800645e:	095b      	lsrs	r3, r3, #5
 8006460:	2164      	movs	r1, #100	; 0x64
 8006462:	fb01 f303 	mul.w	r3, r1, r3
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	00db      	lsls	r3, r3, #3
 800646a:	3332      	adds	r3, #50	; 0x32
 800646c:	4a65      	ldr	r2, [pc, #404]	; (8006604 <UART_SetConfig+0x384>)
 800646e:	fba2 2303 	umull	r2, r3, r2, r3
 8006472:	095b      	lsrs	r3, r3, #5
 8006474:	f003 0207 	and.w	r2, r3, #7
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4442      	add	r2, r8
 800647e:	609a      	str	r2, [r3, #8]
 8006480:	e26f      	b.n	8006962 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006482:	f7fe fbc1 	bl	8004c08 <HAL_RCC_GetPCLK1Freq>
 8006486:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	461d      	mov	r5, r3
 800648c:	f04f 0600 	mov.w	r6, #0
 8006490:	46a8      	mov	r8, r5
 8006492:	46b1      	mov	r9, r6
 8006494:	eb18 0308 	adds.w	r3, r8, r8
 8006498:	eb49 0409 	adc.w	r4, r9, r9
 800649c:	4698      	mov	r8, r3
 800649e:	46a1      	mov	r9, r4
 80064a0:	eb18 0805 	adds.w	r8, r8, r5
 80064a4:	eb49 0906 	adc.w	r9, r9, r6
 80064a8:	f04f 0100 	mov.w	r1, #0
 80064ac:	f04f 0200 	mov.w	r2, #0
 80064b0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80064b4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80064b8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80064bc:	4688      	mov	r8, r1
 80064be:	4691      	mov	r9, r2
 80064c0:	eb18 0005 	adds.w	r0, r8, r5
 80064c4:	eb49 0106 	adc.w	r1, r9, r6
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	461d      	mov	r5, r3
 80064ce:	f04f 0600 	mov.w	r6, #0
 80064d2:	196b      	adds	r3, r5, r5
 80064d4:	eb46 0406 	adc.w	r4, r6, r6
 80064d8:	461a      	mov	r2, r3
 80064da:	4623      	mov	r3, r4
 80064dc:	f7fa fcca 	bl	8000e74 <__aeabi_uldivmod>
 80064e0:	4603      	mov	r3, r0
 80064e2:	460c      	mov	r4, r1
 80064e4:	461a      	mov	r2, r3
 80064e6:	4b47      	ldr	r3, [pc, #284]	; (8006604 <UART_SetConfig+0x384>)
 80064e8:	fba3 2302 	umull	r2, r3, r3, r2
 80064ec:	095b      	lsrs	r3, r3, #5
 80064ee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	461d      	mov	r5, r3
 80064f6:	f04f 0600 	mov.w	r6, #0
 80064fa:	46a9      	mov	r9, r5
 80064fc:	46b2      	mov	sl, r6
 80064fe:	eb19 0309 	adds.w	r3, r9, r9
 8006502:	eb4a 040a 	adc.w	r4, sl, sl
 8006506:	4699      	mov	r9, r3
 8006508:	46a2      	mov	sl, r4
 800650a:	eb19 0905 	adds.w	r9, r9, r5
 800650e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006512:	f04f 0100 	mov.w	r1, #0
 8006516:	f04f 0200 	mov.w	r2, #0
 800651a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800651e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006522:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006526:	4689      	mov	r9, r1
 8006528:	4692      	mov	sl, r2
 800652a:	eb19 0005 	adds.w	r0, r9, r5
 800652e:	eb4a 0106 	adc.w	r1, sl, r6
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	461d      	mov	r5, r3
 8006538:	f04f 0600 	mov.w	r6, #0
 800653c:	196b      	adds	r3, r5, r5
 800653e:	eb46 0406 	adc.w	r4, r6, r6
 8006542:	461a      	mov	r2, r3
 8006544:	4623      	mov	r3, r4
 8006546:	f7fa fc95 	bl	8000e74 <__aeabi_uldivmod>
 800654a:	4603      	mov	r3, r0
 800654c:	460c      	mov	r4, r1
 800654e:	461a      	mov	r2, r3
 8006550:	4b2c      	ldr	r3, [pc, #176]	; (8006604 <UART_SetConfig+0x384>)
 8006552:	fba3 1302 	umull	r1, r3, r3, r2
 8006556:	095b      	lsrs	r3, r3, #5
 8006558:	2164      	movs	r1, #100	; 0x64
 800655a:	fb01 f303 	mul.w	r3, r1, r3
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	00db      	lsls	r3, r3, #3
 8006562:	3332      	adds	r3, #50	; 0x32
 8006564:	4a27      	ldr	r2, [pc, #156]	; (8006604 <UART_SetConfig+0x384>)
 8006566:	fba2 2303 	umull	r2, r3, r2, r3
 800656a:	095b      	lsrs	r3, r3, #5
 800656c:	005b      	lsls	r3, r3, #1
 800656e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006572:	4498      	add	r8, r3
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	461d      	mov	r5, r3
 8006578:	f04f 0600 	mov.w	r6, #0
 800657c:	46a9      	mov	r9, r5
 800657e:	46b2      	mov	sl, r6
 8006580:	eb19 0309 	adds.w	r3, r9, r9
 8006584:	eb4a 040a 	adc.w	r4, sl, sl
 8006588:	4699      	mov	r9, r3
 800658a:	46a2      	mov	sl, r4
 800658c:	eb19 0905 	adds.w	r9, r9, r5
 8006590:	eb4a 0a06 	adc.w	sl, sl, r6
 8006594:	f04f 0100 	mov.w	r1, #0
 8006598:	f04f 0200 	mov.w	r2, #0
 800659c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80065a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80065a8:	4689      	mov	r9, r1
 80065aa:	4692      	mov	sl, r2
 80065ac:	eb19 0005 	adds.w	r0, r9, r5
 80065b0:	eb4a 0106 	adc.w	r1, sl, r6
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	461d      	mov	r5, r3
 80065ba:	f04f 0600 	mov.w	r6, #0
 80065be:	196b      	adds	r3, r5, r5
 80065c0:	eb46 0406 	adc.w	r4, r6, r6
 80065c4:	461a      	mov	r2, r3
 80065c6:	4623      	mov	r3, r4
 80065c8:	f7fa fc54 	bl	8000e74 <__aeabi_uldivmod>
 80065cc:	4603      	mov	r3, r0
 80065ce:	460c      	mov	r4, r1
 80065d0:	461a      	mov	r2, r3
 80065d2:	4b0c      	ldr	r3, [pc, #48]	; (8006604 <UART_SetConfig+0x384>)
 80065d4:	fba3 1302 	umull	r1, r3, r3, r2
 80065d8:	095b      	lsrs	r3, r3, #5
 80065da:	2164      	movs	r1, #100	; 0x64
 80065dc:	fb01 f303 	mul.w	r3, r1, r3
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	00db      	lsls	r3, r3, #3
 80065e4:	3332      	adds	r3, #50	; 0x32
 80065e6:	4a07      	ldr	r2, [pc, #28]	; (8006604 <UART_SetConfig+0x384>)
 80065e8:	fba2 2303 	umull	r2, r3, r2, r3
 80065ec:	095b      	lsrs	r3, r3, #5
 80065ee:	f003 0207 	and.w	r2, r3, #7
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4442      	add	r2, r8
 80065f8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80065fa:	e1b2      	b.n	8006962 <UART_SetConfig+0x6e2>
 80065fc:	40011000 	.word	0x40011000
 8006600:	40011400 	.word	0x40011400
 8006604:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4ad7      	ldr	r2, [pc, #860]	; (800696c <UART_SetConfig+0x6ec>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d005      	beq.n	800661e <UART_SetConfig+0x39e>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4ad6      	ldr	r2, [pc, #856]	; (8006970 <UART_SetConfig+0x6f0>)
 8006618:	4293      	cmp	r3, r2
 800661a:	f040 80d1 	bne.w	80067c0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800661e:	f7fe fb07 	bl	8004c30 <HAL_RCC_GetPCLK2Freq>
 8006622:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	469a      	mov	sl, r3
 8006628:	f04f 0b00 	mov.w	fp, #0
 800662c:	46d0      	mov	r8, sl
 800662e:	46d9      	mov	r9, fp
 8006630:	eb18 0308 	adds.w	r3, r8, r8
 8006634:	eb49 0409 	adc.w	r4, r9, r9
 8006638:	4698      	mov	r8, r3
 800663a:	46a1      	mov	r9, r4
 800663c:	eb18 080a 	adds.w	r8, r8, sl
 8006640:	eb49 090b 	adc.w	r9, r9, fp
 8006644:	f04f 0100 	mov.w	r1, #0
 8006648:	f04f 0200 	mov.w	r2, #0
 800664c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006650:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006654:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006658:	4688      	mov	r8, r1
 800665a:	4691      	mov	r9, r2
 800665c:	eb1a 0508 	adds.w	r5, sl, r8
 8006660:	eb4b 0609 	adc.w	r6, fp, r9
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	4619      	mov	r1, r3
 800666a:	f04f 0200 	mov.w	r2, #0
 800666e:	f04f 0300 	mov.w	r3, #0
 8006672:	f04f 0400 	mov.w	r4, #0
 8006676:	0094      	lsls	r4, r2, #2
 8006678:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800667c:	008b      	lsls	r3, r1, #2
 800667e:	461a      	mov	r2, r3
 8006680:	4623      	mov	r3, r4
 8006682:	4628      	mov	r0, r5
 8006684:	4631      	mov	r1, r6
 8006686:	f7fa fbf5 	bl	8000e74 <__aeabi_uldivmod>
 800668a:	4603      	mov	r3, r0
 800668c:	460c      	mov	r4, r1
 800668e:	461a      	mov	r2, r3
 8006690:	4bb8      	ldr	r3, [pc, #736]	; (8006974 <UART_SetConfig+0x6f4>)
 8006692:	fba3 2302 	umull	r2, r3, r3, r2
 8006696:	095b      	lsrs	r3, r3, #5
 8006698:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	469b      	mov	fp, r3
 80066a0:	f04f 0c00 	mov.w	ip, #0
 80066a4:	46d9      	mov	r9, fp
 80066a6:	46e2      	mov	sl, ip
 80066a8:	eb19 0309 	adds.w	r3, r9, r9
 80066ac:	eb4a 040a 	adc.w	r4, sl, sl
 80066b0:	4699      	mov	r9, r3
 80066b2:	46a2      	mov	sl, r4
 80066b4:	eb19 090b 	adds.w	r9, r9, fp
 80066b8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80066bc:	f04f 0100 	mov.w	r1, #0
 80066c0:	f04f 0200 	mov.w	r2, #0
 80066c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80066cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80066d0:	4689      	mov	r9, r1
 80066d2:	4692      	mov	sl, r2
 80066d4:	eb1b 0509 	adds.w	r5, fp, r9
 80066d8:	eb4c 060a 	adc.w	r6, ip, sl
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	4619      	mov	r1, r3
 80066e2:	f04f 0200 	mov.w	r2, #0
 80066e6:	f04f 0300 	mov.w	r3, #0
 80066ea:	f04f 0400 	mov.w	r4, #0
 80066ee:	0094      	lsls	r4, r2, #2
 80066f0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80066f4:	008b      	lsls	r3, r1, #2
 80066f6:	461a      	mov	r2, r3
 80066f8:	4623      	mov	r3, r4
 80066fa:	4628      	mov	r0, r5
 80066fc:	4631      	mov	r1, r6
 80066fe:	f7fa fbb9 	bl	8000e74 <__aeabi_uldivmod>
 8006702:	4603      	mov	r3, r0
 8006704:	460c      	mov	r4, r1
 8006706:	461a      	mov	r2, r3
 8006708:	4b9a      	ldr	r3, [pc, #616]	; (8006974 <UART_SetConfig+0x6f4>)
 800670a:	fba3 1302 	umull	r1, r3, r3, r2
 800670e:	095b      	lsrs	r3, r3, #5
 8006710:	2164      	movs	r1, #100	; 0x64
 8006712:	fb01 f303 	mul.w	r3, r1, r3
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	011b      	lsls	r3, r3, #4
 800671a:	3332      	adds	r3, #50	; 0x32
 800671c:	4a95      	ldr	r2, [pc, #596]	; (8006974 <UART_SetConfig+0x6f4>)
 800671e:	fba2 2303 	umull	r2, r3, r2, r3
 8006722:	095b      	lsrs	r3, r3, #5
 8006724:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006728:	4498      	add	r8, r3
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	469b      	mov	fp, r3
 800672e:	f04f 0c00 	mov.w	ip, #0
 8006732:	46d9      	mov	r9, fp
 8006734:	46e2      	mov	sl, ip
 8006736:	eb19 0309 	adds.w	r3, r9, r9
 800673a:	eb4a 040a 	adc.w	r4, sl, sl
 800673e:	4699      	mov	r9, r3
 8006740:	46a2      	mov	sl, r4
 8006742:	eb19 090b 	adds.w	r9, r9, fp
 8006746:	eb4a 0a0c 	adc.w	sl, sl, ip
 800674a:	f04f 0100 	mov.w	r1, #0
 800674e:	f04f 0200 	mov.w	r2, #0
 8006752:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006756:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800675a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800675e:	4689      	mov	r9, r1
 8006760:	4692      	mov	sl, r2
 8006762:	eb1b 0509 	adds.w	r5, fp, r9
 8006766:	eb4c 060a 	adc.w	r6, ip, sl
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	4619      	mov	r1, r3
 8006770:	f04f 0200 	mov.w	r2, #0
 8006774:	f04f 0300 	mov.w	r3, #0
 8006778:	f04f 0400 	mov.w	r4, #0
 800677c:	0094      	lsls	r4, r2, #2
 800677e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006782:	008b      	lsls	r3, r1, #2
 8006784:	461a      	mov	r2, r3
 8006786:	4623      	mov	r3, r4
 8006788:	4628      	mov	r0, r5
 800678a:	4631      	mov	r1, r6
 800678c:	f7fa fb72 	bl	8000e74 <__aeabi_uldivmod>
 8006790:	4603      	mov	r3, r0
 8006792:	460c      	mov	r4, r1
 8006794:	461a      	mov	r2, r3
 8006796:	4b77      	ldr	r3, [pc, #476]	; (8006974 <UART_SetConfig+0x6f4>)
 8006798:	fba3 1302 	umull	r1, r3, r3, r2
 800679c:	095b      	lsrs	r3, r3, #5
 800679e:	2164      	movs	r1, #100	; 0x64
 80067a0:	fb01 f303 	mul.w	r3, r1, r3
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	011b      	lsls	r3, r3, #4
 80067a8:	3332      	adds	r3, #50	; 0x32
 80067aa:	4a72      	ldr	r2, [pc, #456]	; (8006974 <UART_SetConfig+0x6f4>)
 80067ac:	fba2 2303 	umull	r2, r3, r2, r3
 80067b0:	095b      	lsrs	r3, r3, #5
 80067b2:	f003 020f 	and.w	r2, r3, #15
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4442      	add	r2, r8
 80067bc:	609a      	str	r2, [r3, #8]
 80067be:	e0d0      	b.n	8006962 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80067c0:	f7fe fa22 	bl	8004c08 <HAL_RCC_GetPCLK1Freq>
 80067c4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	469a      	mov	sl, r3
 80067ca:	f04f 0b00 	mov.w	fp, #0
 80067ce:	46d0      	mov	r8, sl
 80067d0:	46d9      	mov	r9, fp
 80067d2:	eb18 0308 	adds.w	r3, r8, r8
 80067d6:	eb49 0409 	adc.w	r4, r9, r9
 80067da:	4698      	mov	r8, r3
 80067dc:	46a1      	mov	r9, r4
 80067de:	eb18 080a 	adds.w	r8, r8, sl
 80067e2:	eb49 090b 	adc.w	r9, r9, fp
 80067e6:	f04f 0100 	mov.w	r1, #0
 80067ea:	f04f 0200 	mov.w	r2, #0
 80067ee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80067f2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80067f6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80067fa:	4688      	mov	r8, r1
 80067fc:	4691      	mov	r9, r2
 80067fe:	eb1a 0508 	adds.w	r5, sl, r8
 8006802:	eb4b 0609 	adc.w	r6, fp, r9
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	4619      	mov	r1, r3
 800680c:	f04f 0200 	mov.w	r2, #0
 8006810:	f04f 0300 	mov.w	r3, #0
 8006814:	f04f 0400 	mov.w	r4, #0
 8006818:	0094      	lsls	r4, r2, #2
 800681a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800681e:	008b      	lsls	r3, r1, #2
 8006820:	461a      	mov	r2, r3
 8006822:	4623      	mov	r3, r4
 8006824:	4628      	mov	r0, r5
 8006826:	4631      	mov	r1, r6
 8006828:	f7fa fb24 	bl	8000e74 <__aeabi_uldivmod>
 800682c:	4603      	mov	r3, r0
 800682e:	460c      	mov	r4, r1
 8006830:	461a      	mov	r2, r3
 8006832:	4b50      	ldr	r3, [pc, #320]	; (8006974 <UART_SetConfig+0x6f4>)
 8006834:	fba3 2302 	umull	r2, r3, r3, r2
 8006838:	095b      	lsrs	r3, r3, #5
 800683a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	469b      	mov	fp, r3
 8006842:	f04f 0c00 	mov.w	ip, #0
 8006846:	46d9      	mov	r9, fp
 8006848:	46e2      	mov	sl, ip
 800684a:	eb19 0309 	adds.w	r3, r9, r9
 800684e:	eb4a 040a 	adc.w	r4, sl, sl
 8006852:	4699      	mov	r9, r3
 8006854:	46a2      	mov	sl, r4
 8006856:	eb19 090b 	adds.w	r9, r9, fp
 800685a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800685e:	f04f 0100 	mov.w	r1, #0
 8006862:	f04f 0200 	mov.w	r2, #0
 8006866:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800686a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800686e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006872:	4689      	mov	r9, r1
 8006874:	4692      	mov	sl, r2
 8006876:	eb1b 0509 	adds.w	r5, fp, r9
 800687a:	eb4c 060a 	adc.w	r6, ip, sl
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	4619      	mov	r1, r3
 8006884:	f04f 0200 	mov.w	r2, #0
 8006888:	f04f 0300 	mov.w	r3, #0
 800688c:	f04f 0400 	mov.w	r4, #0
 8006890:	0094      	lsls	r4, r2, #2
 8006892:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006896:	008b      	lsls	r3, r1, #2
 8006898:	461a      	mov	r2, r3
 800689a:	4623      	mov	r3, r4
 800689c:	4628      	mov	r0, r5
 800689e:	4631      	mov	r1, r6
 80068a0:	f7fa fae8 	bl	8000e74 <__aeabi_uldivmod>
 80068a4:	4603      	mov	r3, r0
 80068a6:	460c      	mov	r4, r1
 80068a8:	461a      	mov	r2, r3
 80068aa:	4b32      	ldr	r3, [pc, #200]	; (8006974 <UART_SetConfig+0x6f4>)
 80068ac:	fba3 1302 	umull	r1, r3, r3, r2
 80068b0:	095b      	lsrs	r3, r3, #5
 80068b2:	2164      	movs	r1, #100	; 0x64
 80068b4:	fb01 f303 	mul.w	r3, r1, r3
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	011b      	lsls	r3, r3, #4
 80068bc:	3332      	adds	r3, #50	; 0x32
 80068be:	4a2d      	ldr	r2, [pc, #180]	; (8006974 <UART_SetConfig+0x6f4>)
 80068c0:	fba2 2303 	umull	r2, r3, r2, r3
 80068c4:	095b      	lsrs	r3, r3, #5
 80068c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068ca:	4498      	add	r8, r3
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	469b      	mov	fp, r3
 80068d0:	f04f 0c00 	mov.w	ip, #0
 80068d4:	46d9      	mov	r9, fp
 80068d6:	46e2      	mov	sl, ip
 80068d8:	eb19 0309 	adds.w	r3, r9, r9
 80068dc:	eb4a 040a 	adc.w	r4, sl, sl
 80068e0:	4699      	mov	r9, r3
 80068e2:	46a2      	mov	sl, r4
 80068e4:	eb19 090b 	adds.w	r9, r9, fp
 80068e8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80068ec:	f04f 0100 	mov.w	r1, #0
 80068f0:	f04f 0200 	mov.w	r2, #0
 80068f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80068fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006900:	4689      	mov	r9, r1
 8006902:	4692      	mov	sl, r2
 8006904:	eb1b 0509 	adds.w	r5, fp, r9
 8006908:	eb4c 060a 	adc.w	r6, ip, sl
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	4619      	mov	r1, r3
 8006912:	f04f 0200 	mov.w	r2, #0
 8006916:	f04f 0300 	mov.w	r3, #0
 800691a:	f04f 0400 	mov.w	r4, #0
 800691e:	0094      	lsls	r4, r2, #2
 8006920:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006924:	008b      	lsls	r3, r1, #2
 8006926:	461a      	mov	r2, r3
 8006928:	4623      	mov	r3, r4
 800692a:	4628      	mov	r0, r5
 800692c:	4631      	mov	r1, r6
 800692e:	f7fa faa1 	bl	8000e74 <__aeabi_uldivmod>
 8006932:	4603      	mov	r3, r0
 8006934:	460c      	mov	r4, r1
 8006936:	461a      	mov	r2, r3
 8006938:	4b0e      	ldr	r3, [pc, #56]	; (8006974 <UART_SetConfig+0x6f4>)
 800693a:	fba3 1302 	umull	r1, r3, r3, r2
 800693e:	095b      	lsrs	r3, r3, #5
 8006940:	2164      	movs	r1, #100	; 0x64
 8006942:	fb01 f303 	mul.w	r3, r1, r3
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	011b      	lsls	r3, r3, #4
 800694a:	3332      	adds	r3, #50	; 0x32
 800694c:	4a09      	ldr	r2, [pc, #36]	; (8006974 <UART_SetConfig+0x6f4>)
 800694e:	fba2 2303 	umull	r2, r3, r2, r3
 8006952:	095b      	lsrs	r3, r3, #5
 8006954:	f003 020f 	and.w	r2, r3, #15
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4442      	add	r2, r8
 800695e:	609a      	str	r2, [r3, #8]
}
 8006960:	e7ff      	b.n	8006962 <UART_SetConfig+0x6e2>
 8006962:	bf00      	nop
 8006964:	3714      	adds	r7, #20
 8006966:	46bd      	mov	sp, r7
 8006968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800696c:	40011000 	.word	0x40011000
 8006970:	40011400 	.word	0x40011400
 8006974:	51eb851f 	.word	0x51eb851f

08006978 <__errno>:
 8006978:	4b01      	ldr	r3, [pc, #4]	; (8006980 <__errno+0x8>)
 800697a:	6818      	ldr	r0, [r3, #0]
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	2000017c 	.word	0x2000017c

08006984 <__libc_init_array>:
 8006984:	b570      	push	{r4, r5, r6, lr}
 8006986:	4e0d      	ldr	r6, [pc, #52]	; (80069bc <__libc_init_array+0x38>)
 8006988:	4c0d      	ldr	r4, [pc, #52]	; (80069c0 <__libc_init_array+0x3c>)
 800698a:	1ba4      	subs	r4, r4, r6
 800698c:	10a4      	asrs	r4, r4, #2
 800698e:	2500      	movs	r5, #0
 8006990:	42a5      	cmp	r5, r4
 8006992:	d109      	bne.n	80069a8 <__libc_init_array+0x24>
 8006994:	4e0b      	ldr	r6, [pc, #44]	; (80069c4 <__libc_init_array+0x40>)
 8006996:	4c0c      	ldr	r4, [pc, #48]	; (80069c8 <__libc_init_array+0x44>)
 8006998:	f003 f870 	bl	8009a7c <_init>
 800699c:	1ba4      	subs	r4, r4, r6
 800699e:	10a4      	asrs	r4, r4, #2
 80069a0:	2500      	movs	r5, #0
 80069a2:	42a5      	cmp	r5, r4
 80069a4:	d105      	bne.n	80069b2 <__libc_init_array+0x2e>
 80069a6:	bd70      	pop	{r4, r5, r6, pc}
 80069a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069ac:	4798      	blx	r3
 80069ae:	3501      	adds	r5, #1
 80069b0:	e7ee      	b.n	8006990 <__libc_init_array+0xc>
 80069b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069b6:	4798      	blx	r3
 80069b8:	3501      	adds	r5, #1
 80069ba:	e7f2      	b.n	80069a2 <__libc_init_array+0x1e>
 80069bc:	08009f50 	.word	0x08009f50
 80069c0:	08009f50 	.word	0x08009f50
 80069c4:	08009f50 	.word	0x08009f50
 80069c8:	08009f54 	.word	0x08009f54

080069cc <memset>:
 80069cc:	4402      	add	r2, r0
 80069ce:	4603      	mov	r3, r0
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d100      	bne.n	80069d6 <memset+0xa>
 80069d4:	4770      	bx	lr
 80069d6:	f803 1b01 	strb.w	r1, [r3], #1
 80069da:	e7f9      	b.n	80069d0 <memset+0x4>

080069dc <__cvt>:
 80069dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069e0:	ec55 4b10 	vmov	r4, r5, d0
 80069e4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80069e6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80069ea:	2d00      	cmp	r5, #0
 80069ec:	460e      	mov	r6, r1
 80069ee:	4691      	mov	r9, r2
 80069f0:	4619      	mov	r1, r3
 80069f2:	bfb8      	it	lt
 80069f4:	4622      	movlt	r2, r4
 80069f6:	462b      	mov	r3, r5
 80069f8:	f027 0720 	bic.w	r7, r7, #32
 80069fc:	bfbb      	ittet	lt
 80069fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006a02:	461d      	movlt	r5, r3
 8006a04:	2300      	movge	r3, #0
 8006a06:	232d      	movlt	r3, #45	; 0x2d
 8006a08:	bfb8      	it	lt
 8006a0a:	4614      	movlt	r4, r2
 8006a0c:	2f46      	cmp	r7, #70	; 0x46
 8006a0e:	700b      	strb	r3, [r1, #0]
 8006a10:	d004      	beq.n	8006a1c <__cvt+0x40>
 8006a12:	2f45      	cmp	r7, #69	; 0x45
 8006a14:	d100      	bne.n	8006a18 <__cvt+0x3c>
 8006a16:	3601      	adds	r6, #1
 8006a18:	2102      	movs	r1, #2
 8006a1a:	e000      	b.n	8006a1e <__cvt+0x42>
 8006a1c:	2103      	movs	r1, #3
 8006a1e:	ab03      	add	r3, sp, #12
 8006a20:	9301      	str	r3, [sp, #4]
 8006a22:	ab02      	add	r3, sp, #8
 8006a24:	9300      	str	r3, [sp, #0]
 8006a26:	4632      	mov	r2, r6
 8006a28:	4653      	mov	r3, sl
 8006a2a:	ec45 4b10 	vmov	d0, r4, r5
 8006a2e:	f000 fcdf 	bl	80073f0 <_dtoa_r>
 8006a32:	2f47      	cmp	r7, #71	; 0x47
 8006a34:	4680      	mov	r8, r0
 8006a36:	d102      	bne.n	8006a3e <__cvt+0x62>
 8006a38:	f019 0f01 	tst.w	r9, #1
 8006a3c:	d026      	beq.n	8006a8c <__cvt+0xb0>
 8006a3e:	2f46      	cmp	r7, #70	; 0x46
 8006a40:	eb08 0906 	add.w	r9, r8, r6
 8006a44:	d111      	bne.n	8006a6a <__cvt+0x8e>
 8006a46:	f898 3000 	ldrb.w	r3, [r8]
 8006a4a:	2b30      	cmp	r3, #48	; 0x30
 8006a4c:	d10a      	bne.n	8006a64 <__cvt+0x88>
 8006a4e:	2200      	movs	r2, #0
 8006a50:	2300      	movs	r3, #0
 8006a52:	4620      	mov	r0, r4
 8006a54:	4629      	mov	r1, r5
 8006a56:	f7fa f83f 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a5a:	b918      	cbnz	r0, 8006a64 <__cvt+0x88>
 8006a5c:	f1c6 0601 	rsb	r6, r6, #1
 8006a60:	f8ca 6000 	str.w	r6, [sl]
 8006a64:	f8da 3000 	ldr.w	r3, [sl]
 8006a68:	4499      	add	r9, r3
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	4620      	mov	r0, r4
 8006a70:	4629      	mov	r1, r5
 8006a72:	f7fa f831 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a76:	b938      	cbnz	r0, 8006a88 <__cvt+0xac>
 8006a78:	2230      	movs	r2, #48	; 0x30
 8006a7a:	9b03      	ldr	r3, [sp, #12]
 8006a7c:	454b      	cmp	r3, r9
 8006a7e:	d205      	bcs.n	8006a8c <__cvt+0xb0>
 8006a80:	1c59      	adds	r1, r3, #1
 8006a82:	9103      	str	r1, [sp, #12]
 8006a84:	701a      	strb	r2, [r3, #0]
 8006a86:	e7f8      	b.n	8006a7a <__cvt+0x9e>
 8006a88:	f8cd 900c 	str.w	r9, [sp, #12]
 8006a8c:	9b03      	ldr	r3, [sp, #12]
 8006a8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a90:	eba3 0308 	sub.w	r3, r3, r8
 8006a94:	4640      	mov	r0, r8
 8006a96:	6013      	str	r3, [r2, #0]
 8006a98:	b004      	add	sp, #16
 8006a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006a9e <__exponent>:
 8006a9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006aa0:	2900      	cmp	r1, #0
 8006aa2:	4604      	mov	r4, r0
 8006aa4:	bfba      	itte	lt
 8006aa6:	4249      	neglt	r1, r1
 8006aa8:	232d      	movlt	r3, #45	; 0x2d
 8006aaa:	232b      	movge	r3, #43	; 0x2b
 8006aac:	2909      	cmp	r1, #9
 8006aae:	f804 2b02 	strb.w	r2, [r4], #2
 8006ab2:	7043      	strb	r3, [r0, #1]
 8006ab4:	dd20      	ble.n	8006af8 <__exponent+0x5a>
 8006ab6:	f10d 0307 	add.w	r3, sp, #7
 8006aba:	461f      	mov	r7, r3
 8006abc:	260a      	movs	r6, #10
 8006abe:	fb91 f5f6 	sdiv	r5, r1, r6
 8006ac2:	fb06 1115 	mls	r1, r6, r5, r1
 8006ac6:	3130      	adds	r1, #48	; 0x30
 8006ac8:	2d09      	cmp	r5, #9
 8006aca:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006ace:	f103 32ff 	add.w	r2, r3, #4294967295
 8006ad2:	4629      	mov	r1, r5
 8006ad4:	dc09      	bgt.n	8006aea <__exponent+0x4c>
 8006ad6:	3130      	adds	r1, #48	; 0x30
 8006ad8:	3b02      	subs	r3, #2
 8006ada:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006ade:	42bb      	cmp	r3, r7
 8006ae0:	4622      	mov	r2, r4
 8006ae2:	d304      	bcc.n	8006aee <__exponent+0x50>
 8006ae4:	1a10      	subs	r0, r2, r0
 8006ae6:	b003      	add	sp, #12
 8006ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aea:	4613      	mov	r3, r2
 8006aec:	e7e7      	b.n	8006abe <__exponent+0x20>
 8006aee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006af2:	f804 2b01 	strb.w	r2, [r4], #1
 8006af6:	e7f2      	b.n	8006ade <__exponent+0x40>
 8006af8:	2330      	movs	r3, #48	; 0x30
 8006afa:	4419      	add	r1, r3
 8006afc:	7083      	strb	r3, [r0, #2]
 8006afe:	1d02      	adds	r2, r0, #4
 8006b00:	70c1      	strb	r1, [r0, #3]
 8006b02:	e7ef      	b.n	8006ae4 <__exponent+0x46>

08006b04 <_printf_float>:
 8006b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b08:	b08d      	sub	sp, #52	; 0x34
 8006b0a:	460c      	mov	r4, r1
 8006b0c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006b10:	4616      	mov	r6, r2
 8006b12:	461f      	mov	r7, r3
 8006b14:	4605      	mov	r5, r0
 8006b16:	f001 fa23 	bl	8007f60 <_localeconv_r>
 8006b1a:	6803      	ldr	r3, [r0, #0]
 8006b1c:	9304      	str	r3, [sp, #16]
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f7f9 fb5e 	bl	80001e0 <strlen>
 8006b24:	2300      	movs	r3, #0
 8006b26:	930a      	str	r3, [sp, #40]	; 0x28
 8006b28:	f8d8 3000 	ldr.w	r3, [r8]
 8006b2c:	9005      	str	r0, [sp, #20]
 8006b2e:	3307      	adds	r3, #7
 8006b30:	f023 0307 	bic.w	r3, r3, #7
 8006b34:	f103 0208 	add.w	r2, r3, #8
 8006b38:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006b3c:	f8d4 b000 	ldr.w	fp, [r4]
 8006b40:	f8c8 2000 	str.w	r2, [r8]
 8006b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b48:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006b4c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006b50:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006b54:	9307      	str	r3, [sp, #28]
 8006b56:	f8cd 8018 	str.w	r8, [sp, #24]
 8006b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b5e:	4ba7      	ldr	r3, [pc, #668]	; (8006dfc <_printf_float+0x2f8>)
 8006b60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b64:	f7f9 ffea 	bl	8000b3c <__aeabi_dcmpun>
 8006b68:	bb70      	cbnz	r0, 8006bc8 <_printf_float+0xc4>
 8006b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b6e:	4ba3      	ldr	r3, [pc, #652]	; (8006dfc <_printf_float+0x2f8>)
 8006b70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b74:	f7f9 ffc4 	bl	8000b00 <__aeabi_dcmple>
 8006b78:	bb30      	cbnz	r0, 8006bc8 <_printf_float+0xc4>
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	4640      	mov	r0, r8
 8006b80:	4649      	mov	r1, r9
 8006b82:	f7f9 ffb3 	bl	8000aec <__aeabi_dcmplt>
 8006b86:	b110      	cbz	r0, 8006b8e <_printf_float+0x8a>
 8006b88:	232d      	movs	r3, #45	; 0x2d
 8006b8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b8e:	4a9c      	ldr	r2, [pc, #624]	; (8006e00 <_printf_float+0x2fc>)
 8006b90:	4b9c      	ldr	r3, [pc, #624]	; (8006e04 <_printf_float+0x300>)
 8006b92:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006b96:	bf8c      	ite	hi
 8006b98:	4690      	movhi	r8, r2
 8006b9a:	4698      	movls	r8, r3
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	f02b 0204 	bic.w	r2, fp, #4
 8006ba2:	6123      	str	r3, [r4, #16]
 8006ba4:	6022      	str	r2, [r4, #0]
 8006ba6:	f04f 0900 	mov.w	r9, #0
 8006baa:	9700      	str	r7, [sp, #0]
 8006bac:	4633      	mov	r3, r6
 8006bae:	aa0b      	add	r2, sp, #44	; 0x2c
 8006bb0:	4621      	mov	r1, r4
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	f000 f9e6 	bl	8006f84 <_printf_common>
 8006bb8:	3001      	adds	r0, #1
 8006bba:	f040 808d 	bne.w	8006cd8 <_printf_float+0x1d4>
 8006bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc2:	b00d      	add	sp, #52	; 0x34
 8006bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bc8:	4642      	mov	r2, r8
 8006bca:	464b      	mov	r3, r9
 8006bcc:	4640      	mov	r0, r8
 8006bce:	4649      	mov	r1, r9
 8006bd0:	f7f9 ffb4 	bl	8000b3c <__aeabi_dcmpun>
 8006bd4:	b110      	cbz	r0, 8006bdc <_printf_float+0xd8>
 8006bd6:	4a8c      	ldr	r2, [pc, #560]	; (8006e08 <_printf_float+0x304>)
 8006bd8:	4b8c      	ldr	r3, [pc, #560]	; (8006e0c <_printf_float+0x308>)
 8006bda:	e7da      	b.n	8006b92 <_printf_float+0x8e>
 8006bdc:	6861      	ldr	r1, [r4, #4]
 8006bde:	1c4b      	adds	r3, r1, #1
 8006be0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006be4:	a80a      	add	r0, sp, #40	; 0x28
 8006be6:	d13e      	bne.n	8006c66 <_printf_float+0x162>
 8006be8:	2306      	movs	r3, #6
 8006bea:	6063      	str	r3, [r4, #4]
 8006bec:	2300      	movs	r3, #0
 8006bee:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006bf2:	ab09      	add	r3, sp, #36	; 0x24
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	ec49 8b10 	vmov	d0, r8, r9
 8006bfa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006bfe:	6022      	str	r2, [r4, #0]
 8006c00:	f8cd a004 	str.w	sl, [sp, #4]
 8006c04:	6861      	ldr	r1, [r4, #4]
 8006c06:	4628      	mov	r0, r5
 8006c08:	f7ff fee8 	bl	80069dc <__cvt>
 8006c0c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006c10:	2b47      	cmp	r3, #71	; 0x47
 8006c12:	4680      	mov	r8, r0
 8006c14:	d109      	bne.n	8006c2a <_printf_float+0x126>
 8006c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c18:	1cd8      	adds	r0, r3, #3
 8006c1a:	db02      	blt.n	8006c22 <_printf_float+0x11e>
 8006c1c:	6862      	ldr	r2, [r4, #4]
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	dd47      	ble.n	8006cb2 <_printf_float+0x1ae>
 8006c22:	f1aa 0a02 	sub.w	sl, sl, #2
 8006c26:	fa5f fa8a 	uxtb.w	sl, sl
 8006c2a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006c2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c30:	d824      	bhi.n	8006c7c <_printf_float+0x178>
 8006c32:	3901      	subs	r1, #1
 8006c34:	4652      	mov	r2, sl
 8006c36:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006c3a:	9109      	str	r1, [sp, #36]	; 0x24
 8006c3c:	f7ff ff2f 	bl	8006a9e <__exponent>
 8006c40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c42:	1813      	adds	r3, r2, r0
 8006c44:	2a01      	cmp	r2, #1
 8006c46:	4681      	mov	r9, r0
 8006c48:	6123      	str	r3, [r4, #16]
 8006c4a:	dc02      	bgt.n	8006c52 <_printf_float+0x14e>
 8006c4c:	6822      	ldr	r2, [r4, #0]
 8006c4e:	07d1      	lsls	r1, r2, #31
 8006c50:	d501      	bpl.n	8006c56 <_printf_float+0x152>
 8006c52:	3301      	adds	r3, #1
 8006c54:	6123      	str	r3, [r4, #16]
 8006c56:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d0a5      	beq.n	8006baa <_printf_float+0xa6>
 8006c5e:	232d      	movs	r3, #45	; 0x2d
 8006c60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c64:	e7a1      	b.n	8006baa <_printf_float+0xa6>
 8006c66:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006c6a:	f000 8177 	beq.w	8006f5c <_printf_float+0x458>
 8006c6e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006c72:	d1bb      	bne.n	8006bec <_printf_float+0xe8>
 8006c74:	2900      	cmp	r1, #0
 8006c76:	d1b9      	bne.n	8006bec <_printf_float+0xe8>
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e7b6      	b.n	8006bea <_printf_float+0xe6>
 8006c7c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006c80:	d119      	bne.n	8006cb6 <_printf_float+0x1b2>
 8006c82:	2900      	cmp	r1, #0
 8006c84:	6863      	ldr	r3, [r4, #4]
 8006c86:	dd0c      	ble.n	8006ca2 <_printf_float+0x19e>
 8006c88:	6121      	str	r1, [r4, #16]
 8006c8a:	b913      	cbnz	r3, 8006c92 <_printf_float+0x18e>
 8006c8c:	6822      	ldr	r2, [r4, #0]
 8006c8e:	07d2      	lsls	r2, r2, #31
 8006c90:	d502      	bpl.n	8006c98 <_printf_float+0x194>
 8006c92:	3301      	adds	r3, #1
 8006c94:	440b      	add	r3, r1
 8006c96:	6123      	str	r3, [r4, #16]
 8006c98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c9a:	65a3      	str	r3, [r4, #88]	; 0x58
 8006c9c:	f04f 0900 	mov.w	r9, #0
 8006ca0:	e7d9      	b.n	8006c56 <_printf_float+0x152>
 8006ca2:	b913      	cbnz	r3, 8006caa <_printf_float+0x1a6>
 8006ca4:	6822      	ldr	r2, [r4, #0]
 8006ca6:	07d0      	lsls	r0, r2, #31
 8006ca8:	d501      	bpl.n	8006cae <_printf_float+0x1aa>
 8006caa:	3302      	adds	r3, #2
 8006cac:	e7f3      	b.n	8006c96 <_printf_float+0x192>
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e7f1      	b.n	8006c96 <_printf_float+0x192>
 8006cb2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006cb6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	db05      	blt.n	8006cca <_printf_float+0x1c6>
 8006cbe:	6822      	ldr	r2, [r4, #0]
 8006cc0:	6123      	str	r3, [r4, #16]
 8006cc2:	07d1      	lsls	r1, r2, #31
 8006cc4:	d5e8      	bpl.n	8006c98 <_printf_float+0x194>
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	e7e5      	b.n	8006c96 <_printf_float+0x192>
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	bfd4      	ite	le
 8006cce:	f1c3 0302 	rsble	r3, r3, #2
 8006cd2:	2301      	movgt	r3, #1
 8006cd4:	4413      	add	r3, r2
 8006cd6:	e7de      	b.n	8006c96 <_printf_float+0x192>
 8006cd8:	6823      	ldr	r3, [r4, #0]
 8006cda:	055a      	lsls	r2, r3, #21
 8006cdc:	d407      	bmi.n	8006cee <_printf_float+0x1ea>
 8006cde:	6923      	ldr	r3, [r4, #16]
 8006ce0:	4642      	mov	r2, r8
 8006ce2:	4631      	mov	r1, r6
 8006ce4:	4628      	mov	r0, r5
 8006ce6:	47b8      	blx	r7
 8006ce8:	3001      	adds	r0, #1
 8006cea:	d12b      	bne.n	8006d44 <_printf_float+0x240>
 8006cec:	e767      	b.n	8006bbe <_printf_float+0xba>
 8006cee:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006cf2:	f240 80dc 	bls.w	8006eae <_printf_float+0x3aa>
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006cfe:	f7f9 feeb 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d02:	2800      	cmp	r0, #0
 8006d04:	d033      	beq.n	8006d6e <_printf_float+0x26a>
 8006d06:	2301      	movs	r3, #1
 8006d08:	4a41      	ldr	r2, [pc, #260]	; (8006e10 <_printf_float+0x30c>)
 8006d0a:	4631      	mov	r1, r6
 8006d0c:	4628      	mov	r0, r5
 8006d0e:	47b8      	blx	r7
 8006d10:	3001      	adds	r0, #1
 8006d12:	f43f af54 	beq.w	8006bbe <_printf_float+0xba>
 8006d16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	db02      	blt.n	8006d24 <_printf_float+0x220>
 8006d1e:	6823      	ldr	r3, [r4, #0]
 8006d20:	07d8      	lsls	r0, r3, #31
 8006d22:	d50f      	bpl.n	8006d44 <_printf_float+0x240>
 8006d24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d28:	4631      	mov	r1, r6
 8006d2a:	4628      	mov	r0, r5
 8006d2c:	47b8      	blx	r7
 8006d2e:	3001      	adds	r0, #1
 8006d30:	f43f af45 	beq.w	8006bbe <_printf_float+0xba>
 8006d34:	f04f 0800 	mov.w	r8, #0
 8006d38:	f104 091a 	add.w	r9, r4, #26
 8006d3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	4543      	cmp	r3, r8
 8006d42:	dc09      	bgt.n	8006d58 <_printf_float+0x254>
 8006d44:	6823      	ldr	r3, [r4, #0]
 8006d46:	079b      	lsls	r3, r3, #30
 8006d48:	f100 8103 	bmi.w	8006f52 <_printf_float+0x44e>
 8006d4c:	68e0      	ldr	r0, [r4, #12]
 8006d4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d50:	4298      	cmp	r0, r3
 8006d52:	bfb8      	it	lt
 8006d54:	4618      	movlt	r0, r3
 8006d56:	e734      	b.n	8006bc2 <_printf_float+0xbe>
 8006d58:	2301      	movs	r3, #1
 8006d5a:	464a      	mov	r2, r9
 8006d5c:	4631      	mov	r1, r6
 8006d5e:	4628      	mov	r0, r5
 8006d60:	47b8      	blx	r7
 8006d62:	3001      	adds	r0, #1
 8006d64:	f43f af2b 	beq.w	8006bbe <_printf_float+0xba>
 8006d68:	f108 0801 	add.w	r8, r8, #1
 8006d6c:	e7e6      	b.n	8006d3c <_printf_float+0x238>
 8006d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	dc2b      	bgt.n	8006dcc <_printf_float+0x2c8>
 8006d74:	2301      	movs	r3, #1
 8006d76:	4a26      	ldr	r2, [pc, #152]	; (8006e10 <_printf_float+0x30c>)
 8006d78:	4631      	mov	r1, r6
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	47b8      	blx	r7
 8006d7e:	3001      	adds	r0, #1
 8006d80:	f43f af1d 	beq.w	8006bbe <_printf_float+0xba>
 8006d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d86:	b923      	cbnz	r3, 8006d92 <_printf_float+0x28e>
 8006d88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d8a:	b913      	cbnz	r3, 8006d92 <_printf_float+0x28e>
 8006d8c:	6823      	ldr	r3, [r4, #0]
 8006d8e:	07d9      	lsls	r1, r3, #31
 8006d90:	d5d8      	bpl.n	8006d44 <_printf_float+0x240>
 8006d92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d96:	4631      	mov	r1, r6
 8006d98:	4628      	mov	r0, r5
 8006d9a:	47b8      	blx	r7
 8006d9c:	3001      	adds	r0, #1
 8006d9e:	f43f af0e 	beq.w	8006bbe <_printf_float+0xba>
 8006da2:	f04f 0900 	mov.w	r9, #0
 8006da6:	f104 0a1a 	add.w	sl, r4, #26
 8006daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dac:	425b      	negs	r3, r3
 8006dae:	454b      	cmp	r3, r9
 8006db0:	dc01      	bgt.n	8006db6 <_printf_float+0x2b2>
 8006db2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006db4:	e794      	b.n	8006ce0 <_printf_float+0x1dc>
 8006db6:	2301      	movs	r3, #1
 8006db8:	4652      	mov	r2, sl
 8006dba:	4631      	mov	r1, r6
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	47b8      	blx	r7
 8006dc0:	3001      	adds	r0, #1
 8006dc2:	f43f aefc 	beq.w	8006bbe <_printf_float+0xba>
 8006dc6:	f109 0901 	add.w	r9, r9, #1
 8006dca:	e7ee      	b.n	8006daa <_printf_float+0x2a6>
 8006dcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006dce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	bfa8      	it	ge
 8006dd4:	461a      	movge	r2, r3
 8006dd6:	2a00      	cmp	r2, #0
 8006dd8:	4691      	mov	r9, r2
 8006dda:	dd07      	ble.n	8006dec <_printf_float+0x2e8>
 8006ddc:	4613      	mov	r3, r2
 8006dde:	4631      	mov	r1, r6
 8006de0:	4642      	mov	r2, r8
 8006de2:	4628      	mov	r0, r5
 8006de4:	47b8      	blx	r7
 8006de6:	3001      	adds	r0, #1
 8006de8:	f43f aee9 	beq.w	8006bbe <_printf_float+0xba>
 8006dec:	f104 031a 	add.w	r3, r4, #26
 8006df0:	f04f 0b00 	mov.w	fp, #0
 8006df4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006df8:	9306      	str	r3, [sp, #24]
 8006dfa:	e015      	b.n	8006e28 <_printf_float+0x324>
 8006dfc:	7fefffff 	.word	0x7fefffff
 8006e00:	08009b14 	.word	0x08009b14
 8006e04:	08009b10 	.word	0x08009b10
 8006e08:	08009b1c 	.word	0x08009b1c
 8006e0c:	08009b18 	.word	0x08009b18
 8006e10:	08009b20 	.word	0x08009b20
 8006e14:	2301      	movs	r3, #1
 8006e16:	9a06      	ldr	r2, [sp, #24]
 8006e18:	4631      	mov	r1, r6
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	47b8      	blx	r7
 8006e1e:	3001      	adds	r0, #1
 8006e20:	f43f aecd 	beq.w	8006bbe <_printf_float+0xba>
 8006e24:	f10b 0b01 	add.w	fp, fp, #1
 8006e28:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006e2c:	ebaa 0309 	sub.w	r3, sl, r9
 8006e30:	455b      	cmp	r3, fp
 8006e32:	dcef      	bgt.n	8006e14 <_printf_float+0x310>
 8006e34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	44d0      	add	r8, sl
 8006e3c:	db15      	blt.n	8006e6a <_printf_float+0x366>
 8006e3e:	6823      	ldr	r3, [r4, #0]
 8006e40:	07da      	lsls	r2, r3, #31
 8006e42:	d412      	bmi.n	8006e6a <_printf_float+0x366>
 8006e44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e46:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e48:	eba3 020a 	sub.w	r2, r3, sl
 8006e4c:	eba3 0a01 	sub.w	sl, r3, r1
 8006e50:	4592      	cmp	sl, r2
 8006e52:	bfa8      	it	ge
 8006e54:	4692      	movge	sl, r2
 8006e56:	f1ba 0f00 	cmp.w	sl, #0
 8006e5a:	dc0e      	bgt.n	8006e7a <_printf_float+0x376>
 8006e5c:	f04f 0800 	mov.w	r8, #0
 8006e60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e64:	f104 091a 	add.w	r9, r4, #26
 8006e68:	e019      	b.n	8006e9e <_printf_float+0x39a>
 8006e6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e6e:	4631      	mov	r1, r6
 8006e70:	4628      	mov	r0, r5
 8006e72:	47b8      	blx	r7
 8006e74:	3001      	adds	r0, #1
 8006e76:	d1e5      	bne.n	8006e44 <_printf_float+0x340>
 8006e78:	e6a1      	b.n	8006bbe <_printf_float+0xba>
 8006e7a:	4653      	mov	r3, sl
 8006e7c:	4642      	mov	r2, r8
 8006e7e:	4631      	mov	r1, r6
 8006e80:	4628      	mov	r0, r5
 8006e82:	47b8      	blx	r7
 8006e84:	3001      	adds	r0, #1
 8006e86:	d1e9      	bne.n	8006e5c <_printf_float+0x358>
 8006e88:	e699      	b.n	8006bbe <_printf_float+0xba>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	464a      	mov	r2, r9
 8006e8e:	4631      	mov	r1, r6
 8006e90:	4628      	mov	r0, r5
 8006e92:	47b8      	blx	r7
 8006e94:	3001      	adds	r0, #1
 8006e96:	f43f ae92 	beq.w	8006bbe <_printf_float+0xba>
 8006e9a:	f108 0801 	add.w	r8, r8, #1
 8006e9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ea2:	1a9b      	subs	r3, r3, r2
 8006ea4:	eba3 030a 	sub.w	r3, r3, sl
 8006ea8:	4543      	cmp	r3, r8
 8006eaa:	dcee      	bgt.n	8006e8a <_printf_float+0x386>
 8006eac:	e74a      	b.n	8006d44 <_printf_float+0x240>
 8006eae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006eb0:	2a01      	cmp	r2, #1
 8006eb2:	dc01      	bgt.n	8006eb8 <_printf_float+0x3b4>
 8006eb4:	07db      	lsls	r3, r3, #31
 8006eb6:	d53a      	bpl.n	8006f2e <_printf_float+0x42a>
 8006eb8:	2301      	movs	r3, #1
 8006eba:	4642      	mov	r2, r8
 8006ebc:	4631      	mov	r1, r6
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	47b8      	blx	r7
 8006ec2:	3001      	adds	r0, #1
 8006ec4:	f43f ae7b 	beq.w	8006bbe <_printf_float+0xba>
 8006ec8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ecc:	4631      	mov	r1, r6
 8006ece:	4628      	mov	r0, r5
 8006ed0:	47b8      	blx	r7
 8006ed2:	3001      	adds	r0, #1
 8006ed4:	f108 0801 	add.w	r8, r8, #1
 8006ed8:	f43f ae71 	beq.w	8006bbe <_printf_float+0xba>
 8006edc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f103 3aff 	add.w	sl, r3, #4294967295
 8006ee4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ee8:	2300      	movs	r3, #0
 8006eea:	f7f9 fdf5 	bl	8000ad8 <__aeabi_dcmpeq>
 8006eee:	b9c8      	cbnz	r0, 8006f24 <_printf_float+0x420>
 8006ef0:	4653      	mov	r3, sl
 8006ef2:	4642      	mov	r2, r8
 8006ef4:	4631      	mov	r1, r6
 8006ef6:	4628      	mov	r0, r5
 8006ef8:	47b8      	blx	r7
 8006efa:	3001      	adds	r0, #1
 8006efc:	d10e      	bne.n	8006f1c <_printf_float+0x418>
 8006efe:	e65e      	b.n	8006bbe <_printf_float+0xba>
 8006f00:	2301      	movs	r3, #1
 8006f02:	4652      	mov	r2, sl
 8006f04:	4631      	mov	r1, r6
 8006f06:	4628      	mov	r0, r5
 8006f08:	47b8      	blx	r7
 8006f0a:	3001      	adds	r0, #1
 8006f0c:	f43f ae57 	beq.w	8006bbe <_printf_float+0xba>
 8006f10:	f108 0801 	add.w	r8, r8, #1
 8006f14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f16:	3b01      	subs	r3, #1
 8006f18:	4543      	cmp	r3, r8
 8006f1a:	dcf1      	bgt.n	8006f00 <_printf_float+0x3fc>
 8006f1c:	464b      	mov	r3, r9
 8006f1e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006f22:	e6de      	b.n	8006ce2 <_printf_float+0x1de>
 8006f24:	f04f 0800 	mov.w	r8, #0
 8006f28:	f104 0a1a 	add.w	sl, r4, #26
 8006f2c:	e7f2      	b.n	8006f14 <_printf_float+0x410>
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e7df      	b.n	8006ef2 <_printf_float+0x3ee>
 8006f32:	2301      	movs	r3, #1
 8006f34:	464a      	mov	r2, r9
 8006f36:	4631      	mov	r1, r6
 8006f38:	4628      	mov	r0, r5
 8006f3a:	47b8      	blx	r7
 8006f3c:	3001      	adds	r0, #1
 8006f3e:	f43f ae3e 	beq.w	8006bbe <_printf_float+0xba>
 8006f42:	f108 0801 	add.w	r8, r8, #1
 8006f46:	68e3      	ldr	r3, [r4, #12]
 8006f48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f4a:	1a9b      	subs	r3, r3, r2
 8006f4c:	4543      	cmp	r3, r8
 8006f4e:	dcf0      	bgt.n	8006f32 <_printf_float+0x42e>
 8006f50:	e6fc      	b.n	8006d4c <_printf_float+0x248>
 8006f52:	f04f 0800 	mov.w	r8, #0
 8006f56:	f104 0919 	add.w	r9, r4, #25
 8006f5a:	e7f4      	b.n	8006f46 <_printf_float+0x442>
 8006f5c:	2900      	cmp	r1, #0
 8006f5e:	f43f ae8b 	beq.w	8006c78 <_printf_float+0x174>
 8006f62:	2300      	movs	r3, #0
 8006f64:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006f68:	ab09      	add	r3, sp, #36	; 0x24
 8006f6a:	9300      	str	r3, [sp, #0]
 8006f6c:	ec49 8b10 	vmov	d0, r8, r9
 8006f70:	6022      	str	r2, [r4, #0]
 8006f72:	f8cd a004 	str.w	sl, [sp, #4]
 8006f76:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006f7a:	4628      	mov	r0, r5
 8006f7c:	f7ff fd2e 	bl	80069dc <__cvt>
 8006f80:	4680      	mov	r8, r0
 8006f82:	e648      	b.n	8006c16 <_printf_float+0x112>

08006f84 <_printf_common>:
 8006f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f88:	4691      	mov	r9, r2
 8006f8a:	461f      	mov	r7, r3
 8006f8c:	688a      	ldr	r2, [r1, #8]
 8006f8e:	690b      	ldr	r3, [r1, #16]
 8006f90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f94:	4293      	cmp	r3, r2
 8006f96:	bfb8      	it	lt
 8006f98:	4613      	movlt	r3, r2
 8006f9a:	f8c9 3000 	str.w	r3, [r9]
 8006f9e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006fa2:	4606      	mov	r6, r0
 8006fa4:	460c      	mov	r4, r1
 8006fa6:	b112      	cbz	r2, 8006fae <_printf_common+0x2a>
 8006fa8:	3301      	adds	r3, #1
 8006faa:	f8c9 3000 	str.w	r3, [r9]
 8006fae:	6823      	ldr	r3, [r4, #0]
 8006fb0:	0699      	lsls	r1, r3, #26
 8006fb2:	bf42      	ittt	mi
 8006fb4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006fb8:	3302      	addmi	r3, #2
 8006fba:	f8c9 3000 	strmi.w	r3, [r9]
 8006fbe:	6825      	ldr	r5, [r4, #0]
 8006fc0:	f015 0506 	ands.w	r5, r5, #6
 8006fc4:	d107      	bne.n	8006fd6 <_printf_common+0x52>
 8006fc6:	f104 0a19 	add.w	sl, r4, #25
 8006fca:	68e3      	ldr	r3, [r4, #12]
 8006fcc:	f8d9 2000 	ldr.w	r2, [r9]
 8006fd0:	1a9b      	subs	r3, r3, r2
 8006fd2:	42ab      	cmp	r3, r5
 8006fd4:	dc28      	bgt.n	8007028 <_printf_common+0xa4>
 8006fd6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006fda:	6822      	ldr	r2, [r4, #0]
 8006fdc:	3300      	adds	r3, #0
 8006fde:	bf18      	it	ne
 8006fe0:	2301      	movne	r3, #1
 8006fe2:	0692      	lsls	r2, r2, #26
 8006fe4:	d42d      	bmi.n	8007042 <_printf_common+0xbe>
 8006fe6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fea:	4639      	mov	r1, r7
 8006fec:	4630      	mov	r0, r6
 8006fee:	47c0      	blx	r8
 8006ff0:	3001      	adds	r0, #1
 8006ff2:	d020      	beq.n	8007036 <_printf_common+0xb2>
 8006ff4:	6823      	ldr	r3, [r4, #0]
 8006ff6:	68e5      	ldr	r5, [r4, #12]
 8006ff8:	f8d9 2000 	ldr.w	r2, [r9]
 8006ffc:	f003 0306 	and.w	r3, r3, #6
 8007000:	2b04      	cmp	r3, #4
 8007002:	bf08      	it	eq
 8007004:	1aad      	subeq	r5, r5, r2
 8007006:	68a3      	ldr	r3, [r4, #8]
 8007008:	6922      	ldr	r2, [r4, #16]
 800700a:	bf0c      	ite	eq
 800700c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007010:	2500      	movne	r5, #0
 8007012:	4293      	cmp	r3, r2
 8007014:	bfc4      	itt	gt
 8007016:	1a9b      	subgt	r3, r3, r2
 8007018:	18ed      	addgt	r5, r5, r3
 800701a:	f04f 0900 	mov.w	r9, #0
 800701e:	341a      	adds	r4, #26
 8007020:	454d      	cmp	r5, r9
 8007022:	d11a      	bne.n	800705a <_printf_common+0xd6>
 8007024:	2000      	movs	r0, #0
 8007026:	e008      	b.n	800703a <_printf_common+0xb6>
 8007028:	2301      	movs	r3, #1
 800702a:	4652      	mov	r2, sl
 800702c:	4639      	mov	r1, r7
 800702e:	4630      	mov	r0, r6
 8007030:	47c0      	blx	r8
 8007032:	3001      	adds	r0, #1
 8007034:	d103      	bne.n	800703e <_printf_common+0xba>
 8007036:	f04f 30ff 	mov.w	r0, #4294967295
 800703a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800703e:	3501      	adds	r5, #1
 8007040:	e7c3      	b.n	8006fca <_printf_common+0x46>
 8007042:	18e1      	adds	r1, r4, r3
 8007044:	1c5a      	adds	r2, r3, #1
 8007046:	2030      	movs	r0, #48	; 0x30
 8007048:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800704c:	4422      	add	r2, r4
 800704e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007052:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007056:	3302      	adds	r3, #2
 8007058:	e7c5      	b.n	8006fe6 <_printf_common+0x62>
 800705a:	2301      	movs	r3, #1
 800705c:	4622      	mov	r2, r4
 800705e:	4639      	mov	r1, r7
 8007060:	4630      	mov	r0, r6
 8007062:	47c0      	blx	r8
 8007064:	3001      	adds	r0, #1
 8007066:	d0e6      	beq.n	8007036 <_printf_common+0xb2>
 8007068:	f109 0901 	add.w	r9, r9, #1
 800706c:	e7d8      	b.n	8007020 <_printf_common+0x9c>
	...

08007070 <_printf_i>:
 8007070:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007074:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007078:	460c      	mov	r4, r1
 800707a:	7e09      	ldrb	r1, [r1, #24]
 800707c:	b085      	sub	sp, #20
 800707e:	296e      	cmp	r1, #110	; 0x6e
 8007080:	4617      	mov	r7, r2
 8007082:	4606      	mov	r6, r0
 8007084:	4698      	mov	r8, r3
 8007086:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007088:	f000 80b3 	beq.w	80071f2 <_printf_i+0x182>
 800708c:	d822      	bhi.n	80070d4 <_printf_i+0x64>
 800708e:	2963      	cmp	r1, #99	; 0x63
 8007090:	d036      	beq.n	8007100 <_printf_i+0x90>
 8007092:	d80a      	bhi.n	80070aa <_printf_i+0x3a>
 8007094:	2900      	cmp	r1, #0
 8007096:	f000 80b9 	beq.w	800720c <_printf_i+0x19c>
 800709a:	2958      	cmp	r1, #88	; 0x58
 800709c:	f000 8083 	beq.w	80071a6 <_printf_i+0x136>
 80070a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070a4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80070a8:	e032      	b.n	8007110 <_printf_i+0xa0>
 80070aa:	2964      	cmp	r1, #100	; 0x64
 80070ac:	d001      	beq.n	80070b2 <_printf_i+0x42>
 80070ae:	2969      	cmp	r1, #105	; 0x69
 80070b0:	d1f6      	bne.n	80070a0 <_printf_i+0x30>
 80070b2:	6820      	ldr	r0, [r4, #0]
 80070b4:	6813      	ldr	r3, [r2, #0]
 80070b6:	0605      	lsls	r5, r0, #24
 80070b8:	f103 0104 	add.w	r1, r3, #4
 80070bc:	d52a      	bpl.n	8007114 <_printf_i+0xa4>
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	6011      	str	r1, [r2, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	da03      	bge.n	80070ce <_printf_i+0x5e>
 80070c6:	222d      	movs	r2, #45	; 0x2d
 80070c8:	425b      	negs	r3, r3
 80070ca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80070ce:	486f      	ldr	r0, [pc, #444]	; (800728c <_printf_i+0x21c>)
 80070d0:	220a      	movs	r2, #10
 80070d2:	e039      	b.n	8007148 <_printf_i+0xd8>
 80070d4:	2973      	cmp	r1, #115	; 0x73
 80070d6:	f000 809d 	beq.w	8007214 <_printf_i+0x1a4>
 80070da:	d808      	bhi.n	80070ee <_printf_i+0x7e>
 80070dc:	296f      	cmp	r1, #111	; 0x6f
 80070de:	d020      	beq.n	8007122 <_printf_i+0xb2>
 80070e0:	2970      	cmp	r1, #112	; 0x70
 80070e2:	d1dd      	bne.n	80070a0 <_printf_i+0x30>
 80070e4:	6823      	ldr	r3, [r4, #0]
 80070e6:	f043 0320 	orr.w	r3, r3, #32
 80070ea:	6023      	str	r3, [r4, #0]
 80070ec:	e003      	b.n	80070f6 <_printf_i+0x86>
 80070ee:	2975      	cmp	r1, #117	; 0x75
 80070f0:	d017      	beq.n	8007122 <_printf_i+0xb2>
 80070f2:	2978      	cmp	r1, #120	; 0x78
 80070f4:	d1d4      	bne.n	80070a0 <_printf_i+0x30>
 80070f6:	2378      	movs	r3, #120	; 0x78
 80070f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80070fc:	4864      	ldr	r0, [pc, #400]	; (8007290 <_printf_i+0x220>)
 80070fe:	e055      	b.n	80071ac <_printf_i+0x13c>
 8007100:	6813      	ldr	r3, [r2, #0]
 8007102:	1d19      	adds	r1, r3, #4
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	6011      	str	r1, [r2, #0]
 8007108:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800710c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007110:	2301      	movs	r3, #1
 8007112:	e08c      	b.n	800722e <_printf_i+0x1be>
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	6011      	str	r1, [r2, #0]
 8007118:	f010 0f40 	tst.w	r0, #64	; 0x40
 800711c:	bf18      	it	ne
 800711e:	b21b      	sxthne	r3, r3
 8007120:	e7cf      	b.n	80070c2 <_printf_i+0x52>
 8007122:	6813      	ldr	r3, [r2, #0]
 8007124:	6825      	ldr	r5, [r4, #0]
 8007126:	1d18      	adds	r0, r3, #4
 8007128:	6010      	str	r0, [r2, #0]
 800712a:	0628      	lsls	r0, r5, #24
 800712c:	d501      	bpl.n	8007132 <_printf_i+0xc2>
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	e002      	b.n	8007138 <_printf_i+0xc8>
 8007132:	0668      	lsls	r0, r5, #25
 8007134:	d5fb      	bpl.n	800712e <_printf_i+0xbe>
 8007136:	881b      	ldrh	r3, [r3, #0]
 8007138:	4854      	ldr	r0, [pc, #336]	; (800728c <_printf_i+0x21c>)
 800713a:	296f      	cmp	r1, #111	; 0x6f
 800713c:	bf14      	ite	ne
 800713e:	220a      	movne	r2, #10
 8007140:	2208      	moveq	r2, #8
 8007142:	2100      	movs	r1, #0
 8007144:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007148:	6865      	ldr	r5, [r4, #4]
 800714a:	60a5      	str	r5, [r4, #8]
 800714c:	2d00      	cmp	r5, #0
 800714e:	f2c0 8095 	blt.w	800727c <_printf_i+0x20c>
 8007152:	6821      	ldr	r1, [r4, #0]
 8007154:	f021 0104 	bic.w	r1, r1, #4
 8007158:	6021      	str	r1, [r4, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d13d      	bne.n	80071da <_printf_i+0x16a>
 800715e:	2d00      	cmp	r5, #0
 8007160:	f040 808e 	bne.w	8007280 <_printf_i+0x210>
 8007164:	4665      	mov	r5, ip
 8007166:	2a08      	cmp	r2, #8
 8007168:	d10b      	bne.n	8007182 <_printf_i+0x112>
 800716a:	6823      	ldr	r3, [r4, #0]
 800716c:	07db      	lsls	r3, r3, #31
 800716e:	d508      	bpl.n	8007182 <_printf_i+0x112>
 8007170:	6923      	ldr	r3, [r4, #16]
 8007172:	6862      	ldr	r2, [r4, #4]
 8007174:	429a      	cmp	r2, r3
 8007176:	bfde      	ittt	le
 8007178:	2330      	movle	r3, #48	; 0x30
 800717a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800717e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007182:	ebac 0305 	sub.w	r3, ip, r5
 8007186:	6123      	str	r3, [r4, #16]
 8007188:	f8cd 8000 	str.w	r8, [sp]
 800718c:	463b      	mov	r3, r7
 800718e:	aa03      	add	r2, sp, #12
 8007190:	4621      	mov	r1, r4
 8007192:	4630      	mov	r0, r6
 8007194:	f7ff fef6 	bl	8006f84 <_printf_common>
 8007198:	3001      	adds	r0, #1
 800719a:	d14d      	bne.n	8007238 <_printf_i+0x1c8>
 800719c:	f04f 30ff 	mov.w	r0, #4294967295
 80071a0:	b005      	add	sp, #20
 80071a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071a6:	4839      	ldr	r0, [pc, #228]	; (800728c <_printf_i+0x21c>)
 80071a8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80071ac:	6813      	ldr	r3, [r2, #0]
 80071ae:	6821      	ldr	r1, [r4, #0]
 80071b0:	1d1d      	adds	r5, r3, #4
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	6015      	str	r5, [r2, #0]
 80071b6:	060a      	lsls	r2, r1, #24
 80071b8:	d50b      	bpl.n	80071d2 <_printf_i+0x162>
 80071ba:	07ca      	lsls	r2, r1, #31
 80071bc:	bf44      	itt	mi
 80071be:	f041 0120 	orrmi.w	r1, r1, #32
 80071c2:	6021      	strmi	r1, [r4, #0]
 80071c4:	b91b      	cbnz	r3, 80071ce <_printf_i+0x15e>
 80071c6:	6822      	ldr	r2, [r4, #0]
 80071c8:	f022 0220 	bic.w	r2, r2, #32
 80071cc:	6022      	str	r2, [r4, #0]
 80071ce:	2210      	movs	r2, #16
 80071d0:	e7b7      	b.n	8007142 <_printf_i+0xd2>
 80071d2:	064d      	lsls	r5, r1, #25
 80071d4:	bf48      	it	mi
 80071d6:	b29b      	uxthmi	r3, r3
 80071d8:	e7ef      	b.n	80071ba <_printf_i+0x14a>
 80071da:	4665      	mov	r5, ip
 80071dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80071e0:	fb02 3311 	mls	r3, r2, r1, r3
 80071e4:	5cc3      	ldrb	r3, [r0, r3]
 80071e6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80071ea:	460b      	mov	r3, r1
 80071ec:	2900      	cmp	r1, #0
 80071ee:	d1f5      	bne.n	80071dc <_printf_i+0x16c>
 80071f0:	e7b9      	b.n	8007166 <_printf_i+0xf6>
 80071f2:	6813      	ldr	r3, [r2, #0]
 80071f4:	6825      	ldr	r5, [r4, #0]
 80071f6:	6961      	ldr	r1, [r4, #20]
 80071f8:	1d18      	adds	r0, r3, #4
 80071fa:	6010      	str	r0, [r2, #0]
 80071fc:	0628      	lsls	r0, r5, #24
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	d501      	bpl.n	8007206 <_printf_i+0x196>
 8007202:	6019      	str	r1, [r3, #0]
 8007204:	e002      	b.n	800720c <_printf_i+0x19c>
 8007206:	066a      	lsls	r2, r5, #25
 8007208:	d5fb      	bpl.n	8007202 <_printf_i+0x192>
 800720a:	8019      	strh	r1, [r3, #0]
 800720c:	2300      	movs	r3, #0
 800720e:	6123      	str	r3, [r4, #16]
 8007210:	4665      	mov	r5, ip
 8007212:	e7b9      	b.n	8007188 <_printf_i+0x118>
 8007214:	6813      	ldr	r3, [r2, #0]
 8007216:	1d19      	adds	r1, r3, #4
 8007218:	6011      	str	r1, [r2, #0]
 800721a:	681d      	ldr	r5, [r3, #0]
 800721c:	6862      	ldr	r2, [r4, #4]
 800721e:	2100      	movs	r1, #0
 8007220:	4628      	mov	r0, r5
 8007222:	f7f8 ffe5 	bl	80001f0 <memchr>
 8007226:	b108      	cbz	r0, 800722c <_printf_i+0x1bc>
 8007228:	1b40      	subs	r0, r0, r5
 800722a:	6060      	str	r0, [r4, #4]
 800722c:	6863      	ldr	r3, [r4, #4]
 800722e:	6123      	str	r3, [r4, #16]
 8007230:	2300      	movs	r3, #0
 8007232:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007236:	e7a7      	b.n	8007188 <_printf_i+0x118>
 8007238:	6923      	ldr	r3, [r4, #16]
 800723a:	462a      	mov	r2, r5
 800723c:	4639      	mov	r1, r7
 800723e:	4630      	mov	r0, r6
 8007240:	47c0      	blx	r8
 8007242:	3001      	adds	r0, #1
 8007244:	d0aa      	beq.n	800719c <_printf_i+0x12c>
 8007246:	6823      	ldr	r3, [r4, #0]
 8007248:	079b      	lsls	r3, r3, #30
 800724a:	d413      	bmi.n	8007274 <_printf_i+0x204>
 800724c:	68e0      	ldr	r0, [r4, #12]
 800724e:	9b03      	ldr	r3, [sp, #12]
 8007250:	4298      	cmp	r0, r3
 8007252:	bfb8      	it	lt
 8007254:	4618      	movlt	r0, r3
 8007256:	e7a3      	b.n	80071a0 <_printf_i+0x130>
 8007258:	2301      	movs	r3, #1
 800725a:	464a      	mov	r2, r9
 800725c:	4639      	mov	r1, r7
 800725e:	4630      	mov	r0, r6
 8007260:	47c0      	blx	r8
 8007262:	3001      	adds	r0, #1
 8007264:	d09a      	beq.n	800719c <_printf_i+0x12c>
 8007266:	3501      	adds	r5, #1
 8007268:	68e3      	ldr	r3, [r4, #12]
 800726a:	9a03      	ldr	r2, [sp, #12]
 800726c:	1a9b      	subs	r3, r3, r2
 800726e:	42ab      	cmp	r3, r5
 8007270:	dcf2      	bgt.n	8007258 <_printf_i+0x1e8>
 8007272:	e7eb      	b.n	800724c <_printf_i+0x1dc>
 8007274:	2500      	movs	r5, #0
 8007276:	f104 0919 	add.w	r9, r4, #25
 800727a:	e7f5      	b.n	8007268 <_printf_i+0x1f8>
 800727c:	2b00      	cmp	r3, #0
 800727e:	d1ac      	bne.n	80071da <_printf_i+0x16a>
 8007280:	7803      	ldrb	r3, [r0, #0]
 8007282:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007286:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800728a:	e76c      	b.n	8007166 <_printf_i+0xf6>
 800728c:	08009b22 	.word	0x08009b22
 8007290:	08009b33 	.word	0x08009b33

08007294 <siprintf>:
 8007294:	b40e      	push	{r1, r2, r3}
 8007296:	b500      	push	{lr}
 8007298:	b09c      	sub	sp, #112	; 0x70
 800729a:	ab1d      	add	r3, sp, #116	; 0x74
 800729c:	9002      	str	r0, [sp, #8]
 800729e:	9006      	str	r0, [sp, #24]
 80072a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80072a4:	4809      	ldr	r0, [pc, #36]	; (80072cc <siprintf+0x38>)
 80072a6:	9107      	str	r1, [sp, #28]
 80072a8:	9104      	str	r1, [sp, #16]
 80072aa:	4909      	ldr	r1, [pc, #36]	; (80072d0 <siprintf+0x3c>)
 80072ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80072b0:	9105      	str	r1, [sp, #20]
 80072b2:	6800      	ldr	r0, [r0, #0]
 80072b4:	9301      	str	r3, [sp, #4]
 80072b6:	a902      	add	r1, sp, #8
 80072b8:	f001 fa5e 	bl	8008778 <_svfiprintf_r>
 80072bc:	9b02      	ldr	r3, [sp, #8]
 80072be:	2200      	movs	r2, #0
 80072c0:	701a      	strb	r2, [r3, #0]
 80072c2:	b01c      	add	sp, #112	; 0x70
 80072c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80072c8:	b003      	add	sp, #12
 80072ca:	4770      	bx	lr
 80072cc:	2000017c 	.word	0x2000017c
 80072d0:	ffff0208 	.word	0xffff0208

080072d4 <quorem>:
 80072d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d8:	6903      	ldr	r3, [r0, #16]
 80072da:	690c      	ldr	r4, [r1, #16]
 80072dc:	42a3      	cmp	r3, r4
 80072de:	4680      	mov	r8, r0
 80072e0:	f2c0 8082 	blt.w	80073e8 <quorem+0x114>
 80072e4:	3c01      	subs	r4, #1
 80072e6:	f101 0714 	add.w	r7, r1, #20
 80072ea:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80072ee:	f100 0614 	add.w	r6, r0, #20
 80072f2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80072f6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80072fa:	eb06 030c 	add.w	r3, r6, ip
 80072fe:	3501      	adds	r5, #1
 8007300:	eb07 090c 	add.w	r9, r7, ip
 8007304:	9301      	str	r3, [sp, #4]
 8007306:	fbb0 f5f5 	udiv	r5, r0, r5
 800730a:	b395      	cbz	r5, 8007372 <quorem+0x9e>
 800730c:	f04f 0a00 	mov.w	sl, #0
 8007310:	4638      	mov	r0, r7
 8007312:	46b6      	mov	lr, r6
 8007314:	46d3      	mov	fp, sl
 8007316:	f850 2b04 	ldr.w	r2, [r0], #4
 800731a:	b293      	uxth	r3, r2
 800731c:	fb05 a303 	mla	r3, r5, r3, sl
 8007320:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007324:	b29b      	uxth	r3, r3
 8007326:	ebab 0303 	sub.w	r3, fp, r3
 800732a:	0c12      	lsrs	r2, r2, #16
 800732c:	f8de b000 	ldr.w	fp, [lr]
 8007330:	fb05 a202 	mla	r2, r5, r2, sl
 8007334:	fa13 f38b 	uxtah	r3, r3, fp
 8007338:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800733c:	fa1f fb82 	uxth.w	fp, r2
 8007340:	f8de 2000 	ldr.w	r2, [lr]
 8007344:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007348:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800734c:	b29b      	uxth	r3, r3
 800734e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007352:	4581      	cmp	r9, r0
 8007354:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007358:	f84e 3b04 	str.w	r3, [lr], #4
 800735c:	d2db      	bcs.n	8007316 <quorem+0x42>
 800735e:	f856 300c 	ldr.w	r3, [r6, ip]
 8007362:	b933      	cbnz	r3, 8007372 <quorem+0x9e>
 8007364:	9b01      	ldr	r3, [sp, #4]
 8007366:	3b04      	subs	r3, #4
 8007368:	429e      	cmp	r6, r3
 800736a:	461a      	mov	r2, r3
 800736c:	d330      	bcc.n	80073d0 <quorem+0xfc>
 800736e:	f8c8 4010 	str.w	r4, [r8, #16]
 8007372:	4640      	mov	r0, r8
 8007374:	f001 f82a 	bl	80083cc <__mcmp>
 8007378:	2800      	cmp	r0, #0
 800737a:	db25      	blt.n	80073c8 <quorem+0xf4>
 800737c:	3501      	adds	r5, #1
 800737e:	4630      	mov	r0, r6
 8007380:	f04f 0c00 	mov.w	ip, #0
 8007384:	f857 2b04 	ldr.w	r2, [r7], #4
 8007388:	f8d0 e000 	ldr.w	lr, [r0]
 800738c:	b293      	uxth	r3, r2
 800738e:	ebac 0303 	sub.w	r3, ip, r3
 8007392:	0c12      	lsrs	r2, r2, #16
 8007394:	fa13 f38e 	uxtah	r3, r3, lr
 8007398:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800739c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073a6:	45b9      	cmp	r9, r7
 80073a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80073ac:	f840 3b04 	str.w	r3, [r0], #4
 80073b0:	d2e8      	bcs.n	8007384 <quorem+0xb0>
 80073b2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80073b6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80073ba:	b92a      	cbnz	r2, 80073c8 <quorem+0xf4>
 80073bc:	3b04      	subs	r3, #4
 80073be:	429e      	cmp	r6, r3
 80073c0:	461a      	mov	r2, r3
 80073c2:	d30b      	bcc.n	80073dc <quorem+0x108>
 80073c4:	f8c8 4010 	str.w	r4, [r8, #16]
 80073c8:	4628      	mov	r0, r5
 80073ca:	b003      	add	sp, #12
 80073cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073d0:	6812      	ldr	r2, [r2, #0]
 80073d2:	3b04      	subs	r3, #4
 80073d4:	2a00      	cmp	r2, #0
 80073d6:	d1ca      	bne.n	800736e <quorem+0x9a>
 80073d8:	3c01      	subs	r4, #1
 80073da:	e7c5      	b.n	8007368 <quorem+0x94>
 80073dc:	6812      	ldr	r2, [r2, #0]
 80073de:	3b04      	subs	r3, #4
 80073e0:	2a00      	cmp	r2, #0
 80073e2:	d1ef      	bne.n	80073c4 <quorem+0xf0>
 80073e4:	3c01      	subs	r4, #1
 80073e6:	e7ea      	b.n	80073be <quorem+0xea>
 80073e8:	2000      	movs	r0, #0
 80073ea:	e7ee      	b.n	80073ca <quorem+0xf6>
 80073ec:	0000      	movs	r0, r0
	...

080073f0 <_dtoa_r>:
 80073f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f4:	ec57 6b10 	vmov	r6, r7, d0
 80073f8:	b097      	sub	sp, #92	; 0x5c
 80073fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80073fc:	9106      	str	r1, [sp, #24]
 80073fe:	4604      	mov	r4, r0
 8007400:	920b      	str	r2, [sp, #44]	; 0x2c
 8007402:	9312      	str	r3, [sp, #72]	; 0x48
 8007404:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007408:	e9cd 6700 	strd	r6, r7, [sp]
 800740c:	b93d      	cbnz	r5, 800741e <_dtoa_r+0x2e>
 800740e:	2010      	movs	r0, #16
 8007410:	f000 fdb4 	bl	8007f7c <malloc>
 8007414:	6260      	str	r0, [r4, #36]	; 0x24
 8007416:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800741a:	6005      	str	r5, [r0, #0]
 800741c:	60c5      	str	r5, [r0, #12]
 800741e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007420:	6819      	ldr	r1, [r3, #0]
 8007422:	b151      	cbz	r1, 800743a <_dtoa_r+0x4a>
 8007424:	685a      	ldr	r2, [r3, #4]
 8007426:	604a      	str	r2, [r1, #4]
 8007428:	2301      	movs	r3, #1
 800742a:	4093      	lsls	r3, r2
 800742c:	608b      	str	r3, [r1, #8]
 800742e:	4620      	mov	r0, r4
 8007430:	f000 fdeb 	bl	800800a <_Bfree>
 8007434:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007436:	2200      	movs	r2, #0
 8007438:	601a      	str	r2, [r3, #0]
 800743a:	1e3b      	subs	r3, r7, #0
 800743c:	bfbb      	ittet	lt
 800743e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007442:	9301      	strlt	r3, [sp, #4]
 8007444:	2300      	movge	r3, #0
 8007446:	2201      	movlt	r2, #1
 8007448:	bfac      	ite	ge
 800744a:	f8c8 3000 	strge.w	r3, [r8]
 800744e:	f8c8 2000 	strlt.w	r2, [r8]
 8007452:	4baf      	ldr	r3, [pc, #700]	; (8007710 <_dtoa_r+0x320>)
 8007454:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007458:	ea33 0308 	bics.w	r3, r3, r8
 800745c:	d114      	bne.n	8007488 <_dtoa_r+0x98>
 800745e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007460:	f242 730f 	movw	r3, #9999	; 0x270f
 8007464:	6013      	str	r3, [r2, #0]
 8007466:	9b00      	ldr	r3, [sp, #0]
 8007468:	b923      	cbnz	r3, 8007474 <_dtoa_r+0x84>
 800746a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800746e:	2800      	cmp	r0, #0
 8007470:	f000 8542 	beq.w	8007ef8 <_dtoa_r+0xb08>
 8007474:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007476:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8007724 <_dtoa_r+0x334>
 800747a:	2b00      	cmp	r3, #0
 800747c:	f000 8544 	beq.w	8007f08 <_dtoa_r+0xb18>
 8007480:	f10b 0303 	add.w	r3, fp, #3
 8007484:	f000 bd3e 	b.w	8007f04 <_dtoa_r+0xb14>
 8007488:	e9dd 6700 	ldrd	r6, r7, [sp]
 800748c:	2200      	movs	r2, #0
 800748e:	2300      	movs	r3, #0
 8007490:	4630      	mov	r0, r6
 8007492:	4639      	mov	r1, r7
 8007494:	f7f9 fb20 	bl	8000ad8 <__aeabi_dcmpeq>
 8007498:	4681      	mov	r9, r0
 800749a:	b168      	cbz	r0, 80074b8 <_dtoa_r+0xc8>
 800749c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800749e:	2301      	movs	r3, #1
 80074a0:	6013      	str	r3, [r2, #0]
 80074a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	f000 8524 	beq.w	8007ef2 <_dtoa_r+0xb02>
 80074aa:	4b9a      	ldr	r3, [pc, #616]	; (8007714 <_dtoa_r+0x324>)
 80074ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80074ae:	f103 3bff 	add.w	fp, r3, #4294967295
 80074b2:	6013      	str	r3, [r2, #0]
 80074b4:	f000 bd28 	b.w	8007f08 <_dtoa_r+0xb18>
 80074b8:	aa14      	add	r2, sp, #80	; 0x50
 80074ba:	a915      	add	r1, sp, #84	; 0x54
 80074bc:	ec47 6b10 	vmov	d0, r6, r7
 80074c0:	4620      	mov	r0, r4
 80074c2:	f000 fffa 	bl	80084ba <__d2b>
 80074c6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80074ca:	9004      	str	r0, [sp, #16]
 80074cc:	2d00      	cmp	r5, #0
 80074ce:	d07c      	beq.n	80075ca <_dtoa_r+0x1da>
 80074d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80074d4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80074d8:	46b2      	mov	sl, r6
 80074da:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80074de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80074e2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80074e6:	2200      	movs	r2, #0
 80074e8:	4b8b      	ldr	r3, [pc, #556]	; (8007718 <_dtoa_r+0x328>)
 80074ea:	4650      	mov	r0, sl
 80074ec:	4659      	mov	r1, fp
 80074ee:	f7f8 fed3 	bl	8000298 <__aeabi_dsub>
 80074f2:	a381      	add	r3, pc, #516	; (adr r3, 80076f8 <_dtoa_r+0x308>)
 80074f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f8:	f7f9 f886 	bl	8000608 <__aeabi_dmul>
 80074fc:	a380      	add	r3, pc, #512	; (adr r3, 8007700 <_dtoa_r+0x310>)
 80074fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007502:	f7f8 fecb 	bl	800029c <__adddf3>
 8007506:	4606      	mov	r6, r0
 8007508:	4628      	mov	r0, r5
 800750a:	460f      	mov	r7, r1
 800750c:	f7f9 f812 	bl	8000534 <__aeabi_i2d>
 8007510:	a37d      	add	r3, pc, #500	; (adr r3, 8007708 <_dtoa_r+0x318>)
 8007512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007516:	f7f9 f877 	bl	8000608 <__aeabi_dmul>
 800751a:	4602      	mov	r2, r0
 800751c:	460b      	mov	r3, r1
 800751e:	4630      	mov	r0, r6
 8007520:	4639      	mov	r1, r7
 8007522:	f7f8 febb 	bl	800029c <__adddf3>
 8007526:	4606      	mov	r6, r0
 8007528:	460f      	mov	r7, r1
 800752a:	f7f9 fb1d 	bl	8000b68 <__aeabi_d2iz>
 800752e:	2200      	movs	r2, #0
 8007530:	4682      	mov	sl, r0
 8007532:	2300      	movs	r3, #0
 8007534:	4630      	mov	r0, r6
 8007536:	4639      	mov	r1, r7
 8007538:	f7f9 fad8 	bl	8000aec <__aeabi_dcmplt>
 800753c:	b148      	cbz	r0, 8007552 <_dtoa_r+0x162>
 800753e:	4650      	mov	r0, sl
 8007540:	f7f8 fff8 	bl	8000534 <__aeabi_i2d>
 8007544:	4632      	mov	r2, r6
 8007546:	463b      	mov	r3, r7
 8007548:	f7f9 fac6 	bl	8000ad8 <__aeabi_dcmpeq>
 800754c:	b908      	cbnz	r0, 8007552 <_dtoa_r+0x162>
 800754e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007552:	f1ba 0f16 	cmp.w	sl, #22
 8007556:	d859      	bhi.n	800760c <_dtoa_r+0x21c>
 8007558:	4970      	ldr	r1, [pc, #448]	; (800771c <_dtoa_r+0x32c>)
 800755a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800755e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007562:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007566:	f7f9 fadf 	bl	8000b28 <__aeabi_dcmpgt>
 800756a:	2800      	cmp	r0, #0
 800756c:	d050      	beq.n	8007610 <_dtoa_r+0x220>
 800756e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007572:	2300      	movs	r3, #0
 8007574:	930f      	str	r3, [sp, #60]	; 0x3c
 8007576:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007578:	1b5d      	subs	r5, r3, r5
 800757a:	f1b5 0801 	subs.w	r8, r5, #1
 800757e:	bf49      	itett	mi
 8007580:	f1c5 0301 	rsbmi	r3, r5, #1
 8007584:	2300      	movpl	r3, #0
 8007586:	9305      	strmi	r3, [sp, #20]
 8007588:	f04f 0800 	movmi.w	r8, #0
 800758c:	bf58      	it	pl
 800758e:	9305      	strpl	r3, [sp, #20]
 8007590:	f1ba 0f00 	cmp.w	sl, #0
 8007594:	db3e      	blt.n	8007614 <_dtoa_r+0x224>
 8007596:	2300      	movs	r3, #0
 8007598:	44d0      	add	r8, sl
 800759a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800759e:	9307      	str	r3, [sp, #28]
 80075a0:	9b06      	ldr	r3, [sp, #24]
 80075a2:	2b09      	cmp	r3, #9
 80075a4:	f200 8090 	bhi.w	80076c8 <_dtoa_r+0x2d8>
 80075a8:	2b05      	cmp	r3, #5
 80075aa:	bfc4      	itt	gt
 80075ac:	3b04      	subgt	r3, #4
 80075ae:	9306      	strgt	r3, [sp, #24]
 80075b0:	9b06      	ldr	r3, [sp, #24]
 80075b2:	f1a3 0302 	sub.w	r3, r3, #2
 80075b6:	bfcc      	ite	gt
 80075b8:	2500      	movgt	r5, #0
 80075ba:	2501      	movle	r5, #1
 80075bc:	2b03      	cmp	r3, #3
 80075be:	f200 808f 	bhi.w	80076e0 <_dtoa_r+0x2f0>
 80075c2:	e8df f003 	tbb	[pc, r3]
 80075c6:	7f7d      	.short	0x7f7d
 80075c8:	7131      	.short	0x7131
 80075ca:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80075ce:	441d      	add	r5, r3
 80075d0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80075d4:	2820      	cmp	r0, #32
 80075d6:	dd13      	ble.n	8007600 <_dtoa_r+0x210>
 80075d8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80075dc:	9b00      	ldr	r3, [sp, #0]
 80075de:	fa08 f800 	lsl.w	r8, r8, r0
 80075e2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80075e6:	fa23 f000 	lsr.w	r0, r3, r0
 80075ea:	ea48 0000 	orr.w	r0, r8, r0
 80075ee:	f7f8 ff91 	bl	8000514 <__aeabi_ui2d>
 80075f2:	2301      	movs	r3, #1
 80075f4:	4682      	mov	sl, r0
 80075f6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80075fa:	3d01      	subs	r5, #1
 80075fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80075fe:	e772      	b.n	80074e6 <_dtoa_r+0xf6>
 8007600:	9b00      	ldr	r3, [sp, #0]
 8007602:	f1c0 0020 	rsb	r0, r0, #32
 8007606:	fa03 f000 	lsl.w	r0, r3, r0
 800760a:	e7f0      	b.n	80075ee <_dtoa_r+0x1fe>
 800760c:	2301      	movs	r3, #1
 800760e:	e7b1      	b.n	8007574 <_dtoa_r+0x184>
 8007610:	900f      	str	r0, [sp, #60]	; 0x3c
 8007612:	e7b0      	b.n	8007576 <_dtoa_r+0x186>
 8007614:	9b05      	ldr	r3, [sp, #20]
 8007616:	eba3 030a 	sub.w	r3, r3, sl
 800761a:	9305      	str	r3, [sp, #20]
 800761c:	f1ca 0300 	rsb	r3, sl, #0
 8007620:	9307      	str	r3, [sp, #28]
 8007622:	2300      	movs	r3, #0
 8007624:	930e      	str	r3, [sp, #56]	; 0x38
 8007626:	e7bb      	b.n	80075a0 <_dtoa_r+0x1b0>
 8007628:	2301      	movs	r3, #1
 800762a:	930a      	str	r3, [sp, #40]	; 0x28
 800762c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800762e:	2b00      	cmp	r3, #0
 8007630:	dd59      	ble.n	80076e6 <_dtoa_r+0x2f6>
 8007632:	9302      	str	r3, [sp, #8]
 8007634:	4699      	mov	r9, r3
 8007636:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007638:	2200      	movs	r2, #0
 800763a:	6072      	str	r2, [r6, #4]
 800763c:	2204      	movs	r2, #4
 800763e:	f102 0014 	add.w	r0, r2, #20
 8007642:	4298      	cmp	r0, r3
 8007644:	6871      	ldr	r1, [r6, #4]
 8007646:	d953      	bls.n	80076f0 <_dtoa_r+0x300>
 8007648:	4620      	mov	r0, r4
 800764a:	f000 fcaa 	bl	8007fa2 <_Balloc>
 800764e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007650:	6030      	str	r0, [r6, #0]
 8007652:	f1b9 0f0e 	cmp.w	r9, #14
 8007656:	f8d3 b000 	ldr.w	fp, [r3]
 800765a:	f200 80e6 	bhi.w	800782a <_dtoa_r+0x43a>
 800765e:	2d00      	cmp	r5, #0
 8007660:	f000 80e3 	beq.w	800782a <_dtoa_r+0x43a>
 8007664:	ed9d 7b00 	vldr	d7, [sp]
 8007668:	f1ba 0f00 	cmp.w	sl, #0
 800766c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007670:	dd74      	ble.n	800775c <_dtoa_r+0x36c>
 8007672:	4a2a      	ldr	r2, [pc, #168]	; (800771c <_dtoa_r+0x32c>)
 8007674:	f00a 030f 	and.w	r3, sl, #15
 8007678:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800767c:	ed93 7b00 	vldr	d7, [r3]
 8007680:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007684:	06f0      	lsls	r0, r6, #27
 8007686:	ed8d 7b08 	vstr	d7, [sp, #32]
 800768a:	d565      	bpl.n	8007758 <_dtoa_r+0x368>
 800768c:	4b24      	ldr	r3, [pc, #144]	; (8007720 <_dtoa_r+0x330>)
 800768e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007692:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007696:	f7f9 f8e1 	bl	800085c <__aeabi_ddiv>
 800769a:	e9cd 0100 	strd	r0, r1, [sp]
 800769e:	f006 060f 	and.w	r6, r6, #15
 80076a2:	2503      	movs	r5, #3
 80076a4:	4f1e      	ldr	r7, [pc, #120]	; (8007720 <_dtoa_r+0x330>)
 80076a6:	e04c      	b.n	8007742 <_dtoa_r+0x352>
 80076a8:	2301      	movs	r3, #1
 80076aa:	930a      	str	r3, [sp, #40]	; 0x28
 80076ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076ae:	4453      	add	r3, sl
 80076b0:	f103 0901 	add.w	r9, r3, #1
 80076b4:	9302      	str	r3, [sp, #8]
 80076b6:	464b      	mov	r3, r9
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	bfb8      	it	lt
 80076bc:	2301      	movlt	r3, #1
 80076be:	e7ba      	b.n	8007636 <_dtoa_r+0x246>
 80076c0:	2300      	movs	r3, #0
 80076c2:	e7b2      	b.n	800762a <_dtoa_r+0x23a>
 80076c4:	2300      	movs	r3, #0
 80076c6:	e7f0      	b.n	80076aa <_dtoa_r+0x2ba>
 80076c8:	2501      	movs	r5, #1
 80076ca:	2300      	movs	r3, #0
 80076cc:	9306      	str	r3, [sp, #24]
 80076ce:	950a      	str	r5, [sp, #40]	; 0x28
 80076d0:	f04f 33ff 	mov.w	r3, #4294967295
 80076d4:	9302      	str	r3, [sp, #8]
 80076d6:	4699      	mov	r9, r3
 80076d8:	2200      	movs	r2, #0
 80076da:	2312      	movs	r3, #18
 80076dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80076de:	e7aa      	b.n	8007636 <_dtoa_r+0x246>
 80076e0:	2301      	movs	r3, #1
 80076e2:	930a      	str	r3, [sp, #40]	; 0x28
 80076e4:	e7f4      	b.n	80076d0 <_dtoa_r+0x2e0>
 80076e6:	2301      	movs	r3, #1
 80076e8:	9302      	str	r3, [sp, #8]
 80076ea:	4699      	mov	r9, r3
 80076ec:	461a      	mov	r2, r3
 80076ee:	e7f5      	b.n	80076dc <_dtoa_r+0x2ec>
 80076f0:	3101      	adds	r1, #1
 80076f2:	6071      	str	r1, [r6, #4]
 80076f4:	0052      	lsls	r2, r2, #1
 80076f6:	e7a2      	b.n	800763e <_dtoa_r+0x24e>
 80076f8:	636f4361 	.word	0x636f4361
 80076fc:	3fd287a7 	.word	0x3fd287a7
 8007700:	8b60c8b3 	.word	0x8b60c8b3
 8007704:	3fc68a28 	.word	0x3fc68a28
 8007708:	509f79fb 	.word	0x509f79fb
 800770c:	3fd34413 	.word	0x3fd34413
 8007710:	7ff00000 	.word	0x7ff00000
 8007714:	08009b21 	.word	0x08009b21
 8007718:	3ff80000 	.word	0x3ff80000
 800771c:	08009b80 	.word	0x08009b80
 8007720:	08009b58 	.word	0x08009b58
 8007724:	08009b4d 	.word	0x08009b4d
 8007728:	07f1      	lsls	r1, r6, #31
 800772a:	d508      	bpl.n	800773e <_dtoa_r+0x34e>
 800772c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007730:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007734:	f7f8 ff68 	bl	8000608 <__aeabi_dmul>
 8007738:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800773c:	3501      	adds	r5, #1
 800773e:	1076      	asrs	r6, r6, #1
 8007740:	3708      	adds	r7, #8
 8007742:	2e00      	cmp	r6, #0
 8007744:	d1f0      	bne.n	8007728 <_dtoa_r+0x338>
 8007746:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800774a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800774e:	f7f9 f885 	bl	800085c <__aeabi_ddiv>
 8007752:	e9cd 0100 	strd	r0, r1, [sp]
 8007756:	e01a      	b.n	800778e <_dtoa_r+0x39e>
 8007758:	2502      	movs	r5, #2
 800775a:	e7a3      	b.n	80076a4 <_dtoa_r+0x2b4>
 800775c:	f000 80a0 	beq.w	80078a0 <_dtoa_r+0x4b0>
 8007760:	f1ca 0600 	rsb	r6, sl, #0
 8007764:	4b9f      	ldr	r3, [pc, #636]	; (80079e4 <_dtoa_r+0x5f4>)
 8007766:	4fa0      	ldr	r7, [pc, #640]	; (80079e8 <_dtoa_r+0x5f8>)
 8007768:	f006 020f 	and.w	r2, r6, #15
 800776c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007774:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007778:	f7f8 ff46 	bl	8000608 <__aeabi_dmul>
 800777c:	e9cd 0100 	strd	r0, r1, [sp]
 8007780:	1136      	asrs	r6, r6, #4
 8007782:	2300      	movs	r3, #0
 8007784:	2502      	movs	r5, #2
 8007786:	2e00      	cmp	r6, #0
 8007788:	d17f      	bne.n	800788a <_dtoa_r+0x49a>
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1e1      	bne.n	8007752 <_dtoa_r+0x362>
 800778e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007790:	2b00      	cmp	r3, #0
 8007792:	f000 8087 	beq.w	80078a4 <_dtoa_r+0x4b4>
 8007796:	e9dd 6700 	ldrd	r6, r7, [sp]
 800779a:	2200      	movs	r2, #0
 800779c:	4b93      	ldr	r3, [pc, #588]	; (80079ec <_dtoa_r+0x5fc>)
 800779e:	4630      	mov	r0, r6
 80077a0:	4639      	mov	r1, r7
 80077a2:	f7f9 f9a3 	bl	8000aec <__aeabi_dcmplt>
 80077a6:	2800      	cmp	r0, #0
 80077a8:	d07c      	beq.n	80078a4 <_dtoa_r+0x4b4>
 80077aa:	f1b9 0f00 	cmp.w	r9, #0
 80077ae:	d079      	beq.n	80078a4 <_dtoa_r+0x4b4>
 80077b0:	9b02      	ldr	r3, [sp, #8]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	dd35      	ble.n	8007822 <_dtoa_r+0x432>
 80077b6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80077ba:	9308      	str	r3, [sp, #32]
 80077bc:	4639      	mov	r1, r7
 80077be:	2200      	movs	r2, #0
 80077c0:	4b8b      	ldr	r3, [pc, #556]	; (80079f0 <_dtoa_r+0x600>)
 80077c2:	4630      	mov	r0, r6
 80077c4:	f7f8 ff20 	bl	8000608 <__aeabi_dmul>
 80077c8:	e9cd 0100 	strd	r0, r1, [sp]
 80077cc:	9f02      	ldr	r7, [sp, #8]
 80077ce:	3501      	adds	r5, #1
 80077d0:	4628      	mov	r0, r5
 80077d2:	f7f8 feaf 	bl	8000534 <__aeabi_i2d>
 80077d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077da:	f7f8 ff15 	bl	8000608 <__aeabi_dmul>
 80077de:	2200      	movs	r2, #0
 80077e0:	4b84      	ldr	r3, [pc, #528]	; (80079f4 <_dtoa_r+0x604>)
 80077e2:	f7f8 fd5b 	bl	800029c <__adddf3>
 80077e6:	4605      	mov	r5, r0
 80077e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80077ec:	2f00      	cmp	r7, #0
 80077ee:	d15d      	bne.n	80078ac <_dtoa_r+0x4bc>
 80077f0:	2200      	movs	r2, #0
 80077f2:	4b81      	ldr	r3, [pc, #516]	; (80079f8 <_dtoa_r+0x608>)
 80077f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077f8:	f7f8 fd4e 	bl	8000298 <__aeabi_dsub>
 80077fc:	462a      	mov	r2, r5
 80077fe:	4633      	mov	r3, r6
 8007800:	e9cd 0100 	strd	r0, r1, [sp]
 8007804:	f7f9 f990 	bl	8000b28 <__aeabi_dcmpgt>
 8007808:	2800      	cmp	r0, #0
 800780a:	f040 8288 	bne.w	8007d1e <_dtoa_r+0x92e>
 800780e:	462a      	mov	r2, r5
 8007810:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007814:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007818:	f7f9 f968 	bl	8000aec <__aeabi_dcmplt>
 800781c:	2800      	cmp	r0, #0
 800781e:	f040 827c 	bne.w	8007d1a <_dtoa_r+0x92a>
 8007822:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007826:	e9cd 2300 	strd	r2, r3, [sp]
 800782a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800782c:	2b00      	cmp	r3, #0
 800782e:	f2c0 8150 	blt.w	8007ad2 <_dtoa_r+0x6e2>
 8007832:	f1ba 0f0e 	cmp.w	sl, #14
 8007836:	f300 814c 	bgt.w	8007ad2 <_dtoa_r+0x6e2>
 800783a:	4b6a      	ldr	r3, [pc, #424]	; (80079e4 <_dtoa_r+0x5f4>)
 800783c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007840:	ed93 7b00 	vldr	d7, [r3]
 8007844:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007846:	2b00      	cmp	r3, #0
 8007848:	ed8d 7b02 	vstr	d7, [sp, #8]
 800784c:	f280 80d8 	bge.w	8007a00 <_dtoa_r+0x610>
 8007850:	f1b9 0f00 	cmp.w	r9, #0
 8007854:	f300 80d4 	bgt.w	8007a00 <_dtoa_r+0x610>
 8007858:	f040 825e 	bne.w	8007d18 <_dtoa_r+0x928>
 800785c:	2200      	movs	r2, #0
 800785e:	4b66      	ldr	r3, [pc, #408]	; (80079f8 <_dtoa_r+0x608>)
 8007860:	ec51 0b17 	vmov	r0, r1, d7
 8007864:	f7f8 fed0 	bl	8000608 <__aeabi_dmul>
 8007868:	e9dd 2300 	ldrd	r2, r3, [sp]
 800786c:	f7f9 f952 	bl	8000b14 <__aeabi_dcmpge>
 8007870:	464f      	mov	r7, r9
 8007872:	464e      	mov	r6, r9
 8007874:	2800      	cmp	r0, #0
 8007876:	f040 8234 	bne.w	8007ce2 <_dtoa_r+0x8f2>
 800787a:	2331      	movs	r3, #49	; 0x31
 800787c:	f10b 0501 	add.w	r5, fp, #1
 8007880:	f88b 3000 	strb.w	r3, [fp]
 8007884:	f10a 0a01 	add.w	sl, sl, #1
 8007888:	e22f      	b.n	8007cea <_dtoa_r+0x8fa>
 800788a:	07f2      	lsls	r2, r6, #31
 800788c:	d505      	bpl.n	800789a <_dtoa_r+0x4aa>
 800788e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007892:	f7f8 feb9 	bl	8000608 <__aeabi_dmul>
 8007896:	3501      	adds	r5, #1
 8007898:	2301      	movs	r3, #1
 800789a:	1076      	asrs	r6, r6, #1
 800789c:	3708      	adds	r7, #8
 800789e:	e772      	b.n	8007786 <_dtoa_r+0x396>
 80078a0:	2502      	movs	r5, #2
 80078a2:	e774      	b.n	800778e <_dtoa_r+0x39e>
 80078a4:	f8cd a020 	str.w	sl, [sp, #32]
 80078a8:	464f      	mov	r7, r9
 80078aa:	e791      	b.n	80077d0 <_dtoa_r+0x3e0>
 80078ac:	4b4d      	ldr	r3, [pc, #308]	; (80079e4 <_dtoa_r+0x5f4>)
 80078ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80078b2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80078b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d047      	beq.n	800794c <_dtoa_r+0x55c>
 80078bc:	4602      	mov	r2, r0
 80078be:	460b      	mov	r3, r1
 80078c0:	2000      	movs	r0, #0
 80078c2:	494e      	ldr	r1, [pc, #312]	; (80079fc <_dtoa_r+0x60c>)
 80078c4:	f7f8 ffca 	bl	800085c <__aeabi_ddiv>
 80078c8:	462a      	mov	r2, r5
 80078ca:	4633      	mov	r3, r6
 80078cc:	f7f8 fce4 	bl	8000298 <__aeabi_dsub>
 80078d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80078d4:	465d      	mov	r5, fp
 80078d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078da:	f7f9 f945 	bl	8000b68 <__aeabi_d2iz>
 80078de:	4606      	mov	r6, r0
 80078e0:	f7f8 fe28 	bl	8000534 <__aeabi_i2d>
 80078e4:	4602      	mov	r2, r0
 80078e6:	460b      	mov	r3, r1
 80078e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078ec:	f7f8 fcd4 	bl	8000298 <__aeabi_dsub>
 80078f0:	3630      	adds	r6, #48	; 0x30
 80078f2:	f805 6b01 	strb.w	r6, [r5], #1
 80078f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80078fa:	e9cd 0100 	strd	r0, r1, [sp]
 80078fe:	f7f9 f8f5 	bl	8000aec <__aeabi_dcmplt>
 8007902:	2800      	cmp	r0, #0
 8007904:	d163      	bne.n	80079ce <_dtoa_r+0x5de>
 8007906:	e9dd 2300 	ldrd	r2, r3, [sp]
 800790a:	2000      	movs	r0, #0
 800790c:	4937      	ldr	r1, [pc, #220]	; (80079ec <_dtoa_r+0x5fc>)
 800790e:	f7f8 fcc3 	bl	8000298 <__aeabi_dsub>
 8007912:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007916:	f7f9 f8e9 	bl	8000aec <__aeabi_dcmplt>
 800791a:	2800      	cmp	r0, #0
 800791c:	f040 80b7 	bne.w	8007a8e <_dtoa_r+0x69e>
 8007920:	eba5 030b 	sub.w	r3, r5, fp
 8007924:	429f      	cmp	r7, r3
 8007926:	f77f af7c 	ble.w	8007822 <_dtoa_r+0x432>
 800792a:	2200      	movs	r2, #0
 800792c:	4b30      	ldr	r3, [pc, #192]	; (80079f0 <_dtoa_r+0x600>)
 800792e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007932:	f7f8 fe69 	bl	8000608 <__aeabi_dmul>
 8007936:	2200      	movs	r2, #0
 8007938:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800793c:	4b2c      	ldr	r3, [pc, #176]	; (80079f0 <_dtoa_r+0x600>)
 800793e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007942:	f7f8 fe61 	bl	8000608 <__aeabi_dmul>
 8007946:	e9cd 0100 	strd	r0, r1, [sp]
 800794a:	e7c4      	b.n	80078d6 <_dtoa_r+0x4e6>
 800794c:	462a      	mov	r2, r5
 800794e:	4633      	mov	r3, r6
 8007950:	f7f8 fe5a 	bl	8000608 <__aeabi_dmul>
 8007954:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007958:	eb0b 0507 	add.w	r5, fp, r7
 800795c:	465e      	mov	r6, fp
 800795e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007962:	f7f9 f901 	bl	8000b68 <__aeabi_d2iz>
 8007966:	4607      	mov	r7, r0
 8007968:	f7f8 fde4 	bl	8000534 <__aeabi_i2d>
 800796c:	3730      	adds	r7, #48	; 0x30
 800796e:	4602      	mov	r2, r0
 8007970:	460b      	mov	r3, r1
 8007972:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007976:	f7f8 fc8f 	bl	8000298 <__aeabi_dsub>
 800797a:	f806 7b01 	strb.w	r7, [r6], #1
 800797e:	42ae      	cmp	r6, r5
 8007980:	e9cd 0100 	strd	r0, r1, [sp]
 8007984:	f04f 0200 	mov.w	r2, #0
 8007988:	d126      	bne.n	80079d8 <_dtoa_r+0x5e8>
 800798a:	4b1c      	ldr	r3, [pc, #112]	; (80079fc <_dtoa_r+0x60c>)
 800798c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007990:	f7f8 fc84 	bl	800029c <__adddf3>
 8007994:	4602      	mov	r2, r0
 8007996:	460b      	mov	r3, r1
 8007998:	e9dd 0100 	ldrd	r0, r1, [sp]
 800799c:	f7f9 f8c4 	bl	8000b28 <__aeabi_dcmpgt>
 80079a0:	2800      	cmp	r0, #0
 80079a2:	d174      	bne.n	8007a8e <_dtoa_r+0x69e>
 80079a4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80079a8:	2000      	movs	r0, #0
 80079aa:	4914      	ldr	r1, [pc, #80]	; (80079fc <_dtoa_r+0x60c>)
 80079ac:	f7f8 fc74 	bl	8000298 <__aeabi_dsub>
 80079b0:	4602      	mov	r2, r0
 80079b2:	460b      	mov	r3, r1
 80079b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079b8:	f7f9 f898 	bl	8000aec <__aeabi_dcmplt>
 80079bc:	2800      	cmp	r0, #0
 80079be:	f43f af30 	beq.w	8007822 <_dtoa_r+0x432>
 80079c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80079c6:	2b30      	cmp	r3, #48	; 0x30
 80079c8:	f105 32ff 	add.w	r2, r5, #4294967295
 80079cc:	d002      	beq.n	80079d4 <_dtoa_r+0x5e4>
 80079ce:	f8dd a020 	ldr.w	sl, [sp, #32]
 80079d2:	e04a      	b.n	8007a6a <_dtoa_r+0x67a>
 80079d4:	4615      	mov	r5, r2
 80079d6:	e7f4      	b.n	80079c2 <_dtoa_r+0x5d2>
 80079d8:	4b05      	ldr	r3, [pc, #20]	; (80079f0 <_dtoa_r+0x600>)
 80079da:	f7f8 fe15 	bl	8000608 <__aeabi_dmul>
 80079de:	e9cd 0100 	strd	r0, r1, [sp]
 80079e2:	e7bc      	b.n	800795e <_dtoa_r+0x56e>
 80079e4:	08009b80 	.word	0x08009b80
 80079e8:	08009b58 	.word	0x08009b58
 80079ec:	3ff00000 	.word	0x3ff00000
 80079f0:	40240000 	.word	0x40240000
 80079f4:	401c0000 	.word	0x401c0000
 80079f8:	40140000 	.word	0x40140000
 80079fc:	3fe00000 	.word	0x3fe00000
 8007a00:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007a04:	465d      	mov	r5, fp
 8007a06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a0a:	4630      	mov	r0, r6
 8007a0c:	4639      	mov	r1, r7
 8007a0e:	f7f8 ff25 	bl	800085c <__aeabi_ddiv>
 8007a12:	f7f9 f8a9 	bl	8000b68 <__aeabi_d2iz>
 8007a16:	4680      	mov	r8, r0
 8007a18:	f7f8 fd8c 	bl	8000534 <__aeabi_i2d>
 8007a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a20:	f7f8 fdf2 	bl	8000608 <__aeabi_dmul>
 8007a24:	4602      	mov	r2, r0
 8007a26:	460b      	mov	r3, r1
 8007a28:	4630      	mov	r0, r6
 8007a2a:	4639      	mov	r1, r7
 8007a2c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007a30:	f7f8 fc32 	bl	8000298 <__aeabi_dsub>
 8007a34:	f805 6b01 	strb.w	r6, [r5], #1
 8007a38:	eba5 060b 	sub.w	r6, r5, fp
 8007a3c:	45b1      	cmp	r9, r6
 8007a3e:	4602      	mov	r2, r0
 8007a40:	460b      	mov	r3, r1
 8007a42:	d139      	bne.n	8007ab8 <_dtoa_r+0x6c8>
 8007a44:	f7f8 fc2a 	bl	800029c <__adddf3>
 8007a48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a4c:	4606      	mov	r6, r0
 8007a4e:	460f      	mov	r7, r1
 8007a50:	f7f9 f86a 	bl	8000b28 <__aeabi_dcmpgt>
 8007a54:	b9c8      	cbnz	r0, 8007a8a <_dtoa_r+0x69a>
 8007a56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a5a:	4630      	mov	r0, r6
 8007a5c:	4639      	mov	r1, r7
 8007a5e:	f7f9 f83b 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a62:	b110      	cbz	r0, 8007a6a <_dtoa_r+0x67a>
 8007a64:	f018 0f01 	tst.w	r8, #1
 8007a68:	d10f      	bne.n	8007a8a <_dtoa_r+0x69a>
 8007a6a:	9904      	ldr	r1, [sp, #16]
 8007a6c:	4620      	mov	r0, r4
 8007a6e:	f000 facc 	bl	800800a <_Bfree>
 8007a72:	2300      	movs	r3, #0
 8007a74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007a76:	702b      	strb	r3, [r5, #0]
 8007a78:	f10a 0301 	add.w	r3, sl, #1
 8007a7c:	6013      	str	r3, [r2, #0]
 8007a7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	f000 8241 	beq.w	8007f08 <_dtoa_r+0xb18>
 8007a86:	601d      	str	r5, [r3, #0]
 8007a88:	e23e      	b.n	8007f08 <_dtoa_r+0xb18>
 8007a8a:	f8cd a020 	str.w	sl, [sp, #32]
 8007a8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007a92:	2a39      	cmp	r2, #57	; 0x39
 8007a94:	f105 33ff 	add.w	r3, r5, #4294967295
 8007a98:	d108      	bne.n	8007aac <_dtoa_r+0x6bc>
 8007a9a:	459b      	cmp	fp, r3
 8007a9c:	d10a      	bne.n	8007ab4 <_dtoa_r+0x6c4>
 8007a9e:	9b08      	ldr	r3, [sp, #32]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	9308      	str	r3, [sp, #32]
 8007aa4:	2330      	movs	r3, #48	; 0x30
 8007aa6:	f88b 3000 	strb.w	r3, [fp]
 8007aaa:	465b      	mov	r3, fp
 8007aac:	781a      	ldrb	r2, [r3, #0]
 8007aae:	3201      	adds	r2, #1
 8007ab0:	701a      	strb	r2, [r3, #0]
 8007ab2:	e78c      	b.n	80079ce <_dtoa_r+0x5de>
 8007ab4:	461d      	mov	r5, r3
 8007ab6:	e7ea      	b.n	8007a8e <_dtoa_r+0x69e>
 8007ab8:	2200      	movs	r2, #0
 8007aba:	4b9b      	ldr	r3, [pc, #620]	; (8007d28 <_dtoa_r+0x938>)
 8007abc:	f7f8 fda4 	bl	8000608 <__aeabi_dmul>
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	4606      	mov	r6, r0
 8007ac6:	460f      	mov	r7, r1
 8007ac8:	f7f9 f806 	bl	8000ad8 <__aeabi_dcmpeq>
 8007acc:	2800      	cmp	r0, #0
 8007ace:	d09a      	beq.n	8007a06 <_dtoa_r+0x616>
 8007ad0:	e7cb      	b.n	8007a6a <_dtoa_r+0x67a>
 8007ad2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ad4:	2a00      	cmp	r2, #0
 8007ad6:	f000 808b 	beq.w	8007bf0 <_dtoa_r+0x800>
 8007ada:	9a06      	ldr	r2, [sp, #24]
 8007adc:	2a01      	cmp	r2, #1
 8007ade:	dc6e      	bgt.n	8007bbe <_dtoa_r+0x7ce>
 8007ae0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007ae2:	2a00      	cmp	r2, #0
 8007ae4:	d067      	beq.n	8007bb6 <_dtoa_r+0x7c6>
 8007ae6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007aea:	9f07      	ldr	r7, [sp, #28]
 8007aec:	9d05      	ldr	r5, [sp, #20]
 8007aee:	9a05      	ldr	r2, [sp, #20]
 8007af0:	2101      	movs	r1, #1
 8007af2:	441a      	add	r2, r3
 8007af4:	4620      	mov	r0, r4
 8007af6:	9205      	str	r2, [sp, #20]
 8007af8:	4498      	add	r8, r3
 8007afa:	f000 fb26 	bl	800814a <__i2b>
 8007afe:	4606      	mov	r6, r0
 8007b00:	2d00      	cmp	r5, #0
 8007b02:	dd0c      	ble.n	8007b1e <_dtoa_r+0x72e>
 8007b04:	f1b8 0f00 	cmp.w	r8, #0
 8007b08:	dd09      	ble.n	8007b1e <_dtoa_r+0x72e>
 8007b0a:	4545      	cmp	r5, r8
 8007b0c:	9a05      	ldr	r2, [sp, #20]
 8007b0e:	462b      	mov	r3, r5
 8007b10:	bfa8      	it	ge
 8007b12:	4643      	movge	r3, r8
 8007b14:	1ad2      	subs	r2, r2, r3
 8007b16:	9205      	str	r2, [sp, #20]
 8007b18:	1aed      	subs	r5, r5, r3
 8007b1a:	eba8 0803 	sub.w	r8, r8, r3
 8007b1e:	9b07      	ldr	r3, [sp, #28]
 8007b20:	b1eb      	cbz	r3, 8007b5e <_dtoa_r+0x76e>
 8007b22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d067      	beq.n	8007bf8 <_dtoa_r+0x808>
 8007b28:	b18f      	cbz	r7, 8007b4e <_dtoa_r+0x75e>
 8007b2a:	4631      	mov	r1, r6
 8007b2c:	463a      	mov	r2, r7
 8007b2e:	4620      	mov	r0, r4
 8007b30:	f000 fbaa 	bl	8008288 <__pow5mult>
 8007b34:	9a04      	ldr	r2, [sp, #16]
 8007b36:	4601      	mov	r1, r0
 8007b38:	4606      	mov	r6, r0
 8007b3a:	4620      	mov	r0, r4
 8007b3c:	f000 fb0e 	bl	800815c <__multiply>
 8007b40:	9904      	ldr	r1, [sp, #16]
 8007b42:	9008      	str	r0, [sp, #32]
 8007b44:	4620      	mov	r0, r4
 8007b46:	f000 fa60 	bl	800800a <_Bfree>
 8007b4a:	9b08      	ldr	r3, [sp, #32]
 8007b4c:	9304      	str	r3, [sp, #16]
 8007b4e:	9b07      	ldr	r3, [sp, #28]
 8007b50:	1bda      	subs	r2, r3, r7
 8007b52:	d004      	beq.n	8007b5e <_dtoa_r+0x76e>
 8007b54:	9904      	ldr	r1, [sp, #16]
 8007b56:	4620      	mov	r0, r4
 8007b58:	f000 fb96 	bl	8008288 <__pow5mult>
 8007b5c:	9004      	str	r0, [sp, #16]
 8007b5e:	2101      	movs	r1, #1
 8007b60:	4620      	mov	r0, r4
 8007b62:	f000 faf2 	bl	800814a <__i2b>
 8007b66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b68:	4607      	mov	r7, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f000 81d0 	beq.w	8007f10 <_dtoa_r+0xb20>
 8007b70:	461a      	mov	r2, r3
 8007b72:	4601      	mov	r1, r0
 8007b74:	4620      	mov	r0, r4
 8007b76:	f000 fb87 	bl	8008288 <__pow5mult>
 8007b7a:	9b06      	ldr	r3, [sp, #24]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	4607      	mov	r7, r0
 8007b80:	dc40      	bgt.n	8007c04 <_dtoa_r+0x814>
 8007b82:	9b00      	ldr	r3, [sp, #0]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d139      	bne.n	8007bfc <_dtoa_r+0x80c>
 8007b88:	9b01      	ldr	r3, [sp, #4]
 8007b8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d136      	bne.n	8007c00 <_dtoa_r+0x810>
 8007b92:	9b01      	ldr	r3, [sp, #4]
 8007b94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b98:	0d1b      	lsrs	r3, r3, #20
 8007b9a:	051b      	lsls	r3, r3, #20
 8007b9c:	b12b      	cbz	r3, 8007baa <_dtoa_r+0x7ba>
 8007b9e:	9b05      	ldr	r3, [sp, #20]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	9305      	str	r3, [sp, #20]
 8007ba4:	f108 0801 	add.w	r8, r8, #1
 8007ba8:	2301      	movs	r3, #1
 8007baa:	9307      	str	r3, [sp, #28]
 8007bac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d12a      	bne.n	8007c08 <_dtoa_r+0x818>
 8007bb2:	2001      	movs	r0, #1
 8007bb4:	e030      	b.n	8007c18 <_dtoa_r+0x828>
 8007bb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007bb8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007bbc:	e795      	b.n	8007aea <_dtoa_r+0x6fa>
 8007bbe:	9b07      	ldr	r3, [sp, #28]
 8007bc0:	f109 37ff 	add.w	r7, r9, #4294967295
 8007bc4:	42bb      	cmp	r3, r7
 8007bc6:	bfbf      	itttt	lt
 8007bc8:	9b07      	ldrlt	r3, [sp, #28]
 8007bca:	9707      	strlt	r7, [sp, #28]
 8007bcc:	1afa      	sublt	r2, r7, r3
 8007bce:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007bd0:	bfbb      	ittet	lt
 8007bd2:	189b      	addlt	r3, r3, r2
 8007bd4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007bd6:	1bdf      	subge	r7, r3, r7
 8007bd8:	2700      	movlt	r7, #0
 8007bda:	f1b9 0f00 	cmp.w	r9, #0
 8007bde:	bfb5      	itete	lt
 8007be0:	9b05      	ldrlt	r3, [sp, #20]
 8007be2:	9d05      	ldrge	r5, [sp, #20]
 8007be4:	eba3 0509 	sublt.w	r5, r3, r9
 8007be8:	464b      	movge	r3, r9
 8007bea:	bfb8      	it	lt
 8007bec:	2300      	movlt	r3, #0
 8007bee:	e77e      	b.n	8007aee <_dtoa_r+0x6fe>
 8007bf0:	9f07      	ldr	r7, [sp, #28]
 8007bf2:	9d05      	ldr	r5, [sp, #20]
 8007bf4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007bf6:	e783      	b.n	8007b00 <_dtoa_r+0x710>
 8007bf8:	9a07      	ldr	r2, [sp, #28]
 8007bfa:	e7ab      	b.n	8007b54 <_dtoa_r+0x764>
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	e7d4      	b.n	8007baa <_dtoa_r+0x7ba>
 8007c00:	9b00      	ldr	r3, [sp, #0]
 8007c02:	e7d2      	b.n	8007baa <_dtoa_r+0x7ba>
 8007c04:	2300      	movs	r3, #0
 8007c06:	9307      	str	r3, [sp, #28]
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007c0e:	6918      	ldr	r0, [r3, #16]
 8007c10:	f000 fa4d 	bl	80080ae <__hi0bits>
 8007c14:	f1c0 0020 	rsb	r0, r0, #32
 8007c18:	4440      	add	r0, r8
 8007c1a:	f010 001f 	ands.w	r0, r0, #31
 8007c1e:	d047      	beq.n	8007cb0 <_dtoa_r+0x8c0>
 8007c20:	f1c0 0320 	rsb	r3, r0, #32
 8007c24:	2b04      	cmp	r3, #4
 8007c26:	dd3b      	ble.n	8007ca0 <_dtoa_r+0x8b0>
 8007c28:	9b05      	ldr	r3, [sp, #20]
 8007c2a:	f1c0 001c 	rsb	r0, r0, #28
 8007c2e:	4403      	add	r3, r0
 8007c30:	9305      	str	r3, [sp, #20]
 8007c32:	4405      	add	r5, r0
 8007c34:	4480      	add	r8, r0
 8007c36:	9b05      	ldr	r3, [sp, #20]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	dd05      	ble.n	8007c48 <_dtoa_r+0x858>
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	9904      	ldr	r1, [sp, #16]
 8007c40:	4620      	mov	r0, r4
 8007c42:	f000 fb6f 	bl	8008324 <__lshift>
 8007c46:	9004      	str	r0, [sp, #16]
 8007c48:	f1b8 0f00 	cmp.w	r8, #0
 8007c4c:	dd05      	ble.n	8007c5a <_dtoa_r+0x86a>
 8007c4e:	4639      	mov	r1, r7
 8007c50:	4642      	mov	r2, r8
 8007c52:	4620      	mov	r0, r4
 8007c54:	f000 fb66 	bl	8008324 <__lshift>
 8007c58:	4607      	mov	r7, r0
 8007c5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c5c:	b353      	cbz	r3, 8007cb4 <_dtoa_r+0x8c4>
 8007c5e:	4639      	mov	r1, r7
 8007c60:	9804      	ldr	r0, [sp, #16]
 8007c62:	f000 fbb3 	bl	80083cc <__mcmp>
 8007c66:	2800      	cmp	r0, #0
 8007c68:	da24      	bge.n	8007cb4 <_dtoa_r+0x8c4>
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	220a      	movs	r2, #10
 8007c6e:	9904      	ldr	r1, [sp, #16]
 8007c70:	4620      	mov	r0, r4
 8007c72:	f000 f9e1 	bl	8008038 <__multadd>
 8007c76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c78:	9004      	str	r0, [sp, #16]
 8007c7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	f000 814d 	beq.w	8007f1e <_dtoa_r+0xb2e>
 8007c84:	2300      	movs	r3, #0
 8007c86:	4631      	mov	r1, r6
 8007c88:	220a      	movs	r2, #10
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	f000 f9d4 	bl	8008038 <__multadd>
 8007c90:	9b02      	ldr	r3, [sp, #8]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	4606      	mov	r6, r0
 8007c96:	dc4f      	bgt.n	8007d38 <_dtoa_r+0x948>
 8007c98:	9b06      	ldr	r3, [sp, #24]
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	dd4c      	ble.n	8007d38 <_dtoa_r+0x948>
 8007c9e:	e011      	b.n	8007cc4 <_dtoa_r+0x8d4>
 8007ca0:	d0c9      	beq.n	8007c36 <_dtoa_r+0x846>
 8007ca2:	9a05      	ldr	r2, [sp, #20]
 8007ca4:	331c      	adds	r3, #28
 8007ca6:	441a      	add	r2, r3
 8007ca8:	9205      	str	r2, [sp, #20]
 8007caa:	441d      	add	r5, r3
 8007cac:	4498      	add	r8, r3
 8007cae:	e7c2      	b.n	8007c36 <_dtoa_r+0x846>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	e7f6      	b.n	8007ca2 <_dtoa_r+0x8b2>
 8007cb4:	f1b9 0f00 	cmp.w	r9, #0
 8007cb8:	dc38      	bgt.n	8007d2c <_dtoa_r+0x93c>
 8007cba:	9b06      	ldr	r3, [sp, #24]
 8007cbc:	2b02      	cmp	r3, #2
 8007cbe:	dd35      	ble.n	8007d2c <_dtoa_r+0x93c>
 8007cc0:	f8cd 9008 	str.w	r9, [sp, #8]
 8007cc4:	9b02      	ldr	r3, [sp, #8]
 8007cc6:	b963      	cbnz	r3, 8007ce2 <_dtoa_r+0x8f2>
 8007cc8:	4639      	mov	r1, r7
 8007cca:	2205      	movs	r2, #5
 8007ccc:	4620      	mov	r0, r4
 8007cce:	f000 f9b3 	bl	8008038 <__multadd>
 8007cd2:	4601      	mov	r1, r0
 8007cd4:	4607      	mov	r7, r0
 8007cd6:	9804      	ldr	r0, [sp, #16]
 8007cd8:	f000 fb78 	bl	80083cc <__mcmp>
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	f73f adcc 	bgt.w	800787a <_dtoa_r+0x48a>
 8007ce2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ce4:	465d      	mov	r5, fp
 8007ce6:	ea6f 0a03 	mvn.w	sl, r3
 8007cea:	f04f 0900 	mov.w	r9, #0
 8007cee:	4639      	mov	r1, r7
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	f000 f98a 	bl	800800a <_Bfree>
 8007cf6:	2e00      	cmp	r6, #0
 8007cf8:	f43f aeb7 	beq.w	8007a6a <_dtoa_r+0x67a>
 8007cfc:	f1b9 0f00 	cmp.w	r9, #0
 8007d00:	d005      	beq.n	8007d0e <_dtoa_r+0x91e>
 8007d02:	45b1      	cmp	r9, r6
 8007d04:	d003      	beq.n	8007d0e <_dtoa_r+0x91e>
 8007d06:	4649      	mov	r1, r9
 8007d08:	4620      	mov	r0, r4
 8007d0a:	f000 f97e 	bl	800800a <_Bfree>
 8007d0e:	4631      	mov	r1, r6
 8007d10:	4620      	mov	r0, r4
 8007d12:	f000 f97a 	bl	800800a <_Bfree>
 8007d16:	e6a8      	b.n	8007a6a <_dtoa_r+0x67a>
 8007d18:	2700      	movs	r7, #0
 8007d1a:	463e      	mov	r6, r7
 8007d1c:	e7e1      	b.n	8007ce2 <_dtoa_r+0x8f2>
 8007d1e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007d22:	463e      	mov	r6, r7
 8007d24:	e5a9      	b.n	800787a <_dtoa_r+0x48a>
 8007d26:	bf00      	nop
 8007d28:	40240000 	.word	0x40240000
 8007d2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d2e:	f8cd 9008 	str.w	r9, [sp, #8]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	f000 80fa 	beq.w	8007f2c <_dtoa_r+0xb3c>
 8007d38:	2d00      	cmp	r5, #0
 8007d3a:	dd05      	ble.n	8007d48 <_dtoa_r+0x958>
 8007d3c:	4631      	mov	r1, r6
 8007d3e:	462a      	mov	r2, r5
 8007d40:	4620      	mov	r0, r4
 8007d42:	f000 faef 	bl	8008324 <__lshift>
 8007d46:	4606      	mov	r6, r0
 8007d48:	9b07      	ldr	r3, [sp, #28]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d04c      	beq.n	8007de8 <_dtoa_r+0x9f8>
 8007d4e:	6871      	ldr	r1, [r6, #4]
 8007d50:	4620      	mov	r0, r4
 8007d52:	f000 f926 	bl	8007fa2 <_Balloc>
 8007d56:	6932      	ldr	r2, [r6, #16]
 8007d58:	3202      	adds	r2, #2
 8007d5a:	4605      	mov	r5, r0
 8007d5c:	0092      	lsls	r2, r2, #2
 8007d5e:	f106 010c 	add.w	r1, r6, #12
 8007d62:	300c      	adds	r0, #12
 8007d64:	f000 f912 	bl	8007f8c <memcpy>
 8007d68:	2201      	movs	r2, #1
 8007d6a:	4629      	mov	r1, r5
 8007d6c:	4620      	mov	r0, r4
 8007d6e:	f000 fad9 	bl	8008324 <__lshift>
 8007d72:	9b00      	ldr	r3, [sp, #0]
 8007d74:	f8cd b014 	str.w	fp, [sp, #20]
 8007d78:	f003 0301 	and.w	r3, r3, #1
 8007d7c:	46b1      	mov	r9, r6
 8007d7e:	9307      	str	r3, [sp, #28]
 8007d80:	4606      	mov	r6, r0
 8007d82:	4639      	mov	r1, r7
 8007d84:	9804      	ldr	r0, [sp, #16]
 8007d86:	f7ff faa5 	bl	80072d4 <quorem>
 8007d8a:	4649      	mov	r1, r9
 8007d8c:	4605      	mov	r5, r0
 8007d8e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007d92:	9804      	ldr	r0, [sp, #16]
 8007d94:	f000 fb1a 	bl	80083cc <__mcmp>
 8007d98:	4632      	mov	r2, r6
 8007d9a:	9000      	str	r0, [sp, #0]
 8007d9c:	4639      	mov	r1, r7
 8007d9e:	4620      	mov	r0, r4
 8007da0:	f000 fb2e 	bl	8008400 <__mdiff>
 8007da4:	68c3      	ldr	r3, [r0, #12]
 8007da6:	4602      	mov	r2, r0
 8007da8:	bb03      	cbnz	r3, 8007dec <_dtoa_r+0x9fc>
 8007daa:	4601      	mov	r1, r0
 8007dac:	9008      	str	r0, [sp, #32]
 8007dae:	9804      	ldr	r0, [sp, #16]
 8007db0:	f000 fb0c 	bl	80083cc <__mcmp>
 8007db4:	9a08      	ldr	r2, [sp, #32]
 8007db6:	4603      	mov	r3, r0
 8007db8:	4611      	mov	r1, r2
 8007dba:	4620      	mov	r0, r4
 8007dbc:	9308      	str	r3, [sp, #32]
 8007dbe:	f000 f924 	bl	800800a <_Bfree>
 8007dc2:	9b08      	ldr	r3, [sp, #32]
 8007dc4:	b9a3      	cbnz	r3, 8007df0 <_dtoa_r+0xa00>
 8007dc6:	9a06      	ldr	r2, [sp, #24]
 8007dc8:	b992      	cbnz	r2, 8007df0 <_dtoa_r+0xa00>
 8007dca:	9a07      	ldr	r2, [sp, #28]
 8007dcc:	b982      	cbnz	r2, 8007df0 <_dtoa_r+0xa00>
 8007dce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007dd2:	d029      	beq.n	8007e28 <_dtoa_r+0xa38>
 8007dd4:	9b00      	ldr	r3, [sp, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	dd01      	ble.n	8007dde <_dtoa_r+0x9ee>
 8007dda:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007dde:	9b05      	ldr	r3, [sp, #20]
 8007de0:	1c5d      	adds	r5, r3, #1
 8007de2:	f883 8000 	strb.w	r8, [r3]
 8007de6:	e782      	b.n	8007cee <_dtoa_r+0x8fe>
 8007de8:	4630      	mov	r0, r6
 8007dea:	e7c2      	b.n	8007d72 <_dtoa_r+0x982>
 8007dec:	2301      	movs	r3, #1
 8007dee:	e7e3      	b.n	8007db8 <_dtoa_r+0x9c8>
 8007df0:	9a00      	ldr	r2, [sp, #0]
 8007df2:	2a00      	cmp	r2, #0
 8007df4:	db04      	blt.n	8007e00 <_dtoa_r+0xa10>
 8007df6:	d125      	bne.n	8007e44 <_dtoa_r+0xa54>
 8007df8:	9a06      	ldr	r2, [sp, #24]
 8007dfa:	bb1a      	cbnz	r2, 8007e44 <_dtoa_r+0xa54>
 8007dfc:	9a07      	ldr	r2, [sp, #28]
 8007dfe:	bb0a      	cbnz	r2, 8007e44 <_dtoa_r+0xa54>
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	ddec      	ble.n	8007dde <_dtoa_r+0x9ee>
 8007e04:	2201      	movs	r2, #1
 8007e06:	9904      	ldr	r1, [sp, #16]
 8007e08:	4620      	mov	r0, r4
 8007e0a:	f000 fa8b 	bl	8008324 <__lshift>
 8007e0e:	4639      	mov	r1, r7
 8007e10:	9004      	str	r0, [sp, #16]
 8007e12:	f000 fadb 	bl	80083cc <__mcmp>
 8007e16:	2800      	cmp	r0, #0
 8007e18:	dc03      	bgt.n	8007e22 <_dtoa_r+0xa32>
 8007e1a:	d1e0      	bne.n	8007dde <_dtoa_r+0x9ee>
 8007e1c:	f018 0f01 	tst.w	r8, #1
 8007e20:	d0dd      	beq.n	8007dde <_dtoa_r+0x9ee>
 8007e22:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007e26:	d1d8      	bne.n	8007dda <_dtoa_r+0x9ea>
 8007e28:	9b05      	ldr	r3, [sp, #20]
 8007e2a:	9a05      	ldr	r2, [sp, #20]
 8007e2c:	1c5d      	adds	r5, r3, #1
 8007e2e:	2339      	movs	r3, #57	; 0x39
 8007e30:	7013      	strb	r3, [r2, #0]
 8007e32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007e36:	2b39      	cmp	r3, #57	; 0x39
 8007e38:	f105 32ff 	add.w	r2, r5, #4294967295
 8007e3c:	d04f      	beq.n	8007ede <_dtoa_r+0xaee>
 8007e3e:	3301      	adds	r3, #1
 8007e40:	7013      	strb	r3, [r2, #0]
 8007e42:	e754      	b.n	8007cee <_dtoa_r+0x8fe>
 8007e44:	9a05      	ldr	r2, [sp, #20]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	f102 0501 	add.w	r5, r2, #1
 8007e4c:	dd06      	ble.n	8007e5c <_dtoa_r+0xa6c>
 8007e4e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007e52:	d0e9      	beq.n	8007e28 <_dtoa_r+0xa38>
 8007e54:	f108 0801 	add.w	r8, r8, #1
 8007e58:	9b05      	ldr	r3, [sp, #20]
 8007e5a:	e7c2      	b.n	8007de2 <_dtoa_r+0x9f2>
 8007e5c:	9a02      	ldr	r2, [sp, #8]
 8007e5e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007e62:	eba5 030b 	sub.w	r3, r5, fp
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d021      	beq.n	8007eae <_dtoa_r+0xabe>
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	220a      	movs	r2, #10
 8007e6e:	9904      	ldr	r1, [sp, #16]
 8007e70:	4620      	mov	r0, r4
 8007e72:	f000 f8e1 	bl	8008038 <__multadd>
 8007e76:	45b1      	cmp	r9, r6
 8007e78:	9004      	str	r0, [sp, #16]
 8007e7a:	f04f 0300 	mov.w	r3, #0
 8007e7e:	f04f 020a 	mov.w	r2, #10
 8007e82:	4649      	mov	r1, r9
 8007e84:	4620      	mov	r0, r4
 8007e86:	d105      	bne.n	8007e94 <_dtoa_r+0xaa4>
 8007e88:	f000 f8d6 	bl	8008038 <__multadd>
 8007e8c:	4681      	mov	r9, r0
 8007e8e:	4606      	mov	r6, r0
 8007e90:	9505      	str	r5, [sp, #20]
 8007e92:	e776      	b.n	8007d82 <_dtoa_r+0x992>
 8007e94:	f000 f8d0 	bl	8008038 <__multadd>
 8007e98:	4631      	mov	r1, r6
 8007e9a:	4681      	mov	r9, r0
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	220a      	movs	r2, #10
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	f000 f8c9 	bl	8008038 <__multadd>
 8007ea6:	4606      	mov	r6, r0
 8007ea8:	e7f2      	b.n	8007e90 <_dtoa_r+0xaa0>
 8007eaa:	f04f 0900 	mov.w	r9, #0
 8007eae:	2201      	movs	r2, #1
 8007eb0:	9904      	ldr	r1, [sp, #16]
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	f000 fa36 	bl	8008324 <__lshift>
 8007eb8:	4639      	mov	r1, r7
 8007eba:	9004      	str	r0, [sp, #16]
 8007ebc:	f000 fa86 	bl	80083cc <__mcmp>
 8007ec0:	2800      	cmp	r0, #0
 8007ec2:	dcb6      	bgt.n	8007e32 <_dtoa_r+0xa42>
 8007ec4:	d102      	bne.n	8007ecc <_dtoa_r+0xadc>
 8007ec6:	f018 0f01 	tst.w	r8, #1
 8007eca:	d1b2      	bne.n	8007e32 <_dtoa_r+0xa42>
 8007ecc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007ed0:	2b30      	cmp	r3, #48	; 0x30
 8007ed2:	f105 32ff 	add.w	r2, r5, #4294967295
 8007ed6:	f47f af0a 	bne.w	8007cee <_dtoa_r+0x8fe>
 8007eda:	4615      	mov	r5, r2
 8007edc:	e7f6      	b.n	8007ecc <_dtoa_r+0xadc>
 8007ede:	4593      	cmp	fp, r2
 8007ee0:	d105      	bne.n	8007eee <_dtoa_r+0xafe>
 8007ee2:	2331      	movs	r3, #49	; 0x31
 8007ee4:	f10a 0a01 	add.w	sl, sl, #1
 8007ee8:	f88b 3000 	strb.w	r3, [fp]
 8007eec:	e6ff      	b.n	8007cee <_dtoa_r+0x8fe>
 8007eee:	4615      	mov	r5, r2
 8007ef0:	e79f      	b.n	8007e32 <_dtoa_r+0xa42>
 8007ef2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007f58 <_dtoa_r+0xb68>
 8007ef6:	e007      	b.n	8007f08 <_dtoa_r+0xb18>
 8007ef8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007efa:	f8df b060 	ldr.w	fp, [pc, #96]	; 8007f5c <_dtoa_r+0xb6c>
 8007efe:	b11b      	cbz	r3, 8007f08 <_dtoa_r+0xb18>
 8007f00:	f10b 0308 	add.w	r3, fp, #8
 8007f04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007f06:	6013      	str	r3, [r2, #0]
 8007f08:	4658      	mov	r0, fp
 8007f0a:	b017      	add	sp, #92	; 0x5c
 8007f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f10:	9b06      	ldr	r3, [sp, #24]
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	f77f ae35 	ble.w	8007b82 <_dtoa_r+0x792>
 8007f18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f1a:	9307      	str	r3, [sp, #28]
 8007f1c:	e649      	b.n	8007bb2 <_dtoa_r+0x7c2>
 8007f1e:	9b02      	ldr	r3, [sp, #8]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	dc03      	bgt.n	8007f2c <_dtoa_r+0xb3c>
 8007f24:	9b06      	ldr	r3, [sp, #24]
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	f73f aecc 	bgt.w	8007cc4 <_dtoa_r+0x8d4>
 8007f2c:	465d      	mov	r5, fp
 8007f2e:	4639      	mov	r1, r7
 8007f30:	9804      	ldr	r0, [sp, #16]
 8007f32:	f7ff f9cf 	bl	80072d4 <quorem>
 8007f36:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007f3a:	f805 8b01 	strb.w	r8, [r5], #1
 8007f3e:	9a02      	ldr	r2, [sp, #8]
 8007f40:	eba5 030b 	sub.w	r3, r5, fp
 8007f44:	429a      	cmp	r2, r3
 8007f46:	ddb0      	ble.n	8007eaa <_dtoa_r+0xaba>
 8007f48:	2300      	movs	r3, #0
 8007f4a:	220a      	movs	r2, #10
 8007f4c:	9904      	ldr	r1, [sp, #16]
 8007f4e:	4620      	mov	r0, r4
 8007f50:	f000 f872 	bl	8008038 <__multadd>
 8007f54:	9004      	str	r0, [sp, #16]
 8007f56:	e7ea      	b.n	8007f2e <_dtoa_r+0xb3e>
 8007f58:	08009b20 	.word	0x08009b20
 8007f5c:	08009b44 	.word	0x08009b44

08007f60 <_localeconv_r>:
 8007f60:	4b04      	ldr	r3, [pc, #16]	; (8007f74 <_localeconv_r+0x14>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	6a18      	ldr	r0, [r3, #32]
 8007f66:	4b04      	ldr	r3, [pc, #16]	; (8007f78 <_localeconv_r+0x18>)
 8007f68:	2800      	cmp	r0, #0
 8007f6a:	bf08      	it	eq
 8007f6c:	4618      	moveq	r0, r3
 8007f6e:	30f0      	adds	r0, #240	; 0xf0
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	2000017c 	.word	0x2000017c
 8007f78:	200001e0 	.word	0x200001e0

08007f7c <malloc>:
 8007f7c:	4b02      	ldr	r3, [pc, #8]	; (8007f88 <malloc+0xc>)
 8007f7e:	4601      	mov	r1, r0
 8007f80:	6818      	ldr	r0, [r3, #0]
 8007f82:	f000 bb45 	b.w	8008610 <_malloc_r>
 8007f86:	bf00      	nop
 8007f88:	2000017c 	.word	0x2000017c

08007f8c <memcpy>:
 8007f8c:	b510      	push	{r4, lr}
 8007f8e:	1e43      	subs	r3, r0, #1
 8007f90:	440a      	add	r2, r1
 8007f92:	4291      	cmp	r1, r2
 8007f94:	d100      	bne.n	8007f98 <memcpy+0xc>
 8007f96:	bd10      	pop	{r4, pc}
 8007f98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fa0:	e7f7      	b.n	8007f92 <memcpy+0x6>

08007fa2 <_Balloc>:
 8007fa2:	b570      	push	{r4, r5, r6, lr}
 8007fa4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007fa6:	4604      	mov	r4, r0
 8007fa8:	460e      	mov	r6, r1
 8007faa:	b93d      	cbnz	r5, 8007fbc <_Balloc+0x1a>
 8007fac:	2010      	movs	r0, #16
 8007fae:	f7ff ffe5 	bl	8007f7c <malloc>
 8007fb2:	6260      	str	r0, [r4, #36]	; 0x24
 8007fb4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007fb8:	6005      	str	r5, [r0, #0]
 8007fba:	60c5      	str	r5, [r0, #12]
 8007fbc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007fbe:	68eb      	ldr	r3, [r5, #12]
 8007fc0:	b183      	cbz	r3, 8007fe4 <_Balloc+0x42>
 8007fc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007fca:	b9b8      	cbnz	r0, 8007ffc <_Balloc+0x5a>
 8007fcc:	2101      	movs	r1, #1
 8007fce:	fa01 f506 	lsl.w	r5, r1, r6
 8007fd2:	1d6a      	adds	r2, r5, #5
 8007fd4:	0092      	lsls	r2, r2, #2
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	f000 fabe 	bl	8008558 <_calloc_r>
 8007fdc:	b160      	cbz	r0, 8007ff8 <_Balloc+0x56>
 8007fde:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007fe2:	e00e      	b.n	8008002 <_Balloc+0x60>
 8007fe4:	2221      	movs	r2, #33	; 0x21
 8007fe6:	2104      	movs	r1, #4
 8007fe8:	4620      	mov	r0, r4
 8007fea:	f000 fab5 	bl	8008558 <_calloc_r>
 8007fee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ff0:	60e8      	str	r0, [r5, #12]
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d1e4      	bne.n	8007fc2 <_Balloc+0x20>
 8007ff8:	2000      	movs	r0, #0
 8007ffa:	bd70      	pop	{r4, r5, r6, pc}
 8007ffc:	6802      	ldr	r2, [r0, #0]
 8007ffe:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008002:	2300      	movs	r3, #0
 8008004:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008008:	e7f7      	b.n	8007ffa <_Balloc+0x58>

0800800a <_Bfree>:
 800800a:	b570      	push	{r4, r5, r6, lr}
 800800c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800800e:	4606      	mov	r6, r0
 8008010:	460d      	mov	r5, r1
 8008012:	b93c      	cbnz	r4, 8008024 <_Bfree+0x1a>
 8008014:	2010      	movs	r0, #16
 8008016:	f7ff ffb1 	bl	8007f7c <malloc>
 800801a:	6270      	str	r0, [r6, #36]	; 0x24
 800801c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008020:	6004      	str	r4, [r0, #0]
 8008022:	60c4      	str	r4, [r0, #12]
 8008024:	b13d      	cbz	r5, 8008036 <_Bfree+0x2c>
 8008026:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008028:	686a      	ldr	r2, [r5, #4]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008030:	6029      	str	r1, [r5, #0]
 8008032:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008036:	bd70      	pop	{r4, r5, r6, pc}

08008038 <__multadd>:
 8008038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800803c:	690d      	ldr	r5, [r1, #16]
 800803e:	461f      	mov	r7, r3
 8008040:	4606      	mov	r6, r0
 8008042:	460c      	mov	r4, r1
 8008044:	f101 0c14 	add.w	ip, r1, #20
 8008048:	2300      	movs	r3, #0
 800804a:	f8dc 0000 	ldr.w	r0, [ip]
 800804e:	b281      	uxth	r1, r0
 8008050:	fb02 7101 	mla	r1, r2, r1, r7
 8008054:	0c0f      	lsrs	r7, r1, #16
 8008056:	0c00      	lsrs	r0, r0, #16
 8008058:	fb02 7000 	mla	r0, r2, r0, r7
 800805c:	b289      	uxth	r1, r1
 800805e:	3301      	adds	r3, #1
 8008060:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008064:	429d      	cmp	r5, r3
 8008066:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800806a:	f84c 1b04 	str.w	r1, [ip], #4
 800806e:	dcec      	bgt.n	800804a <__multadd+0x12>
 8008070:	b1d7      	cbz	r7, 80080a8 <__multadd+0x70>
 8008072:	68a3      	ldr	r3, [r4, #8]
 8008074:	42ab      	cmp	r3, r5
 8008076:	dc12      	bgt.n	800809e <__multadd+0x66>
 8008078:	6861      	ldr	r1, [r4, #4]
 800807a:	4630      	mov	r0, r6
 800807c:	3101      	adds	r1, #1
 800807e:	f7ff ff90 	bl	8007fa2 <_Balloc>
 8008082:	6922      	ldr	r2, [r4, #16]
 8008084:	3202      	adds	r2, #2
 8008086:	f104 010c 	add.w	r1, r4, #12
 800808a:	4680      	mov	r8, r0
 800808c:	0092      	lsls	r2, r2, #2
 800808e:	300c      	adds	r0, #12
 8008090:	f7ff ff7c 	bl	8007f8c <memcpy>
 8008094:	4621      	mov	r1, r4
 8008096:	4630      	mov	r0, r6
 8008098:	f7ff ffb7 	bl	800800a <_Bfree>
 800809c:	4644      	mov	r4, r8
 800809e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80080a2:	3501      	adds	r5, #1
 80080a4:	615f      	str	r7, [r3, #20]
 80080a6:	6125      	str	r5, [r4, #16]
 80080a8:	4620      	mov	r0, r4
 80080aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080080ae <__hi0bits>:
 80080ae:	0c02      	lsrs	r2, r0, #16
 80080b0:	0412      	lsls	r2, r2, #16
 80080b2:	4603      	mov	r3, r0
 80080b4:	b9b2      	cbnz	r2, 80080e4 <__hi0bits+0x36>
 80080b6:	0403      	lsls	r3, r0, #16
 80080b8:	2010      	movs	r0, #16
 80080ba:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80080be:	bf04      	itt	eq
 80080c0:	021b      	lsleq	r3, r3, #8
 80080c2:	3008      	addeq	r0, #8
 80080c4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80080c8:	bf04      	itt	eq
 80080ca:	011b      	lsleq	r3, r3, #4
 80080cc:	3004      	addeq	r0, #4
 80080ce:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80080d2:	bf04      	itt	eq
 80080d4:	009b      	lsleq	r3, r3, #2
 80080d6:	3002      	addeq	r0, #2
 80080d8:	2b00      	cmp	r3, #0
 80080da:	db06      	blt.n	80080ea <__hi0bits+0x3c>
 80080dc:	005b      	lsls	r3, r3, #1
 80080de:	d503      	bpl.n	80080e8 <__hi0bits+0x3a>
 80080e0:	3001      	adds	r0, #1
 80080e2:	4770      	bx	lr
 80080e4:	2000      	movs	r0, #0
 80080e6:	e7e8      	b.n	80080ba <__hi0bits+0xc>
 80080e8:	2020      	movs	r0, #32
 80080ea:	4770      	bx	lr

080080ec <__lo0bits>:
 80080ec:	6803      	ldr	r3, [r0, #0]
 80080ee:	f013 0207 	ands.w	r2, r3, #7
 80080f2:	4601      	mov	r1, r0
 80080f4:	d00b      	beq.n	800810e <__lo0bits+0x22>
 80080f6:	07da      	lsls	r2, r3, #31
 80080f8:	d423      	bmi.n	8008142 <__lo0bits+0x56>
 80080fa:	0798      	lsls	r0, r3, #30
 80080fc:	bf49      	itett	mi
 80080fe:	085b      	lsrmi	r3, r3, #1
 8008100:	089b      	lsrpl	r3, r3, #2
 8008102:	2001      	movmi	r0, #1
 8008104:	600b      	strmi	r3, [r1, #0]
 8008106:	bf5c      	itt	pl
 8008108:	600b      	strpl	r3, [r1, #0]
 800810a:	2002      	movpl	r0, #2
 800810c:	4770      	bx	lr
 800810e:	b298      	uxth	r0, r3
 8008110:	b9a8      	cbnz	r0, 800813e <__lo0bits+0x52>
 8008112:	0c1b      	lsrs	r3, r3, #16
 8008114:	2010      	movs	r0, #16
 8008116:	f013 0fff 	tst.w	r3, #255	; 0xff
 800811a:	bf04      	itt	eq
 800811c:	0a1b      	lsreq	r3, r3, #8
 800811e:	3008      	addeq	r0, #8
 8008120:	071a      	lsls	r2, r3, #28
 8008122:	bf04      	itt	eq
 8008124:	091b      	lsreq	r3, r3, #4
 8008126:	3004      	addeq	r0, #4
 8008128:	079a      	lsls	r2, r3, #30
 800812a:	bf04      	itt	eq
 800812c:	089b      	lsreq	r3, r3, #2
 800812e:	3002      	addeq	r0, #2
 8008130:	07da      	lsls	r2, r3, #31
 8008132:	d402      	bmi.n	800813a <__lo0bits+0x4e>
 8008134:	085b      	lsrs	r3, r3, #1
 8008136:	d006      	beq.n	8008146 <__lo0bits+0x5a>
 8008138:	3001      	adds	r0, #1
 800813a:	600b      	str	r3, [r1, #0]
 800813c:	4770      	bx	lr
 800813e:	4610      	mov	r0, r2
 8008140:	e7e9      	b.n	8008116 <__lo0bits+0x2a>
 8008142:	2000      	movs	r0, #0
 8008144:	4770      	bx	lr
 8008146:	2020      	movs	r0, #32
 8008148:	4770      	bx	lr

0800814a <__i2b>:
 800814a:	b510      	push	{r4, lr}
 800814c:	460c      	mov	r4, r1
 800814e:	2101      	movs	r1, #1
 8008150:	f7ff ff27 	bl	8007fa2 <_Balloc>
 8008154:	2201      	movs	r2, #1
 8008156:	6144      	str	r4, [r0, #20]
 8008158:	6102      	str	r2, [r0, #16]
 800815a:	bd10      	pop	{r4, pc}

0800815c <__multiply>:
 800815c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008160:	4614      	mov	r4, r2
 8008162:	690a      	ldr	r2, [r1, #16]
 8008164:	6923      	ldr	r3, [r4, #16]
 8008166:	429a      	cmp	r2, r3
 8008168:	bfb8      	it	lt
 800816a:	460b      	movlt	r3, r1
 800816c:	4688      	mov	r8, r1
 800816e:	bfbc      	itt	lt
 8008170:	46a0      	movlt	r8, r4
 8008172:	461c      	movlt	r4, r3
 8008174:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008178:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800817c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008180:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008184:	eb07 0609 	add.w	r6, r7, r9
 8008188:	42b3      	cmp	r3, r6
 800818a:	bfb8      	it	lt
 800818c:	3101      	addlt	r1, #1
 800818e:	f7ff ff08 	bl	8007fa2 <_Balloc>
 8008192:	f100 0514 	add.w	r5, r0, #20
 8008196:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800819a:	462b      	mov	r3, r5
 800819c:	2200      	movs	r2, #0
 800819e:	4573      	cmp	r3, lr
 80081a0:	d316      	bcc.n	80081d0 <__multiply+0x74>
 80081a2:	f104 0214 	add.w	r2, r4, #20
 80081a6:	f108 0114 	add.w	r1, r8, #20
 80081aa:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80081ae:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80081b2:	9300      	str	r3, [sp, #0]
 80081b4:	9b00      	ldr	r3, [sp, #0]
 80081b6:	9201      	str	r2, [sp, #4]
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d80c      	bhi.n	80081d6 <__multiply+0x7a>
 80081bc:	2e00      	cmp	r6, #0
 80081be:	dd03      	ble.n	80081c8 <__multiply+0x6c>
 80081c0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d05d      	beq.n	8008284 <__multiply+0x128>
 80081c8:	6106      	str	r6, [r0, #16]
 80081ca:	b003      	add	sp, #12
 80081cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081d0:	f843 2b04 	str.w	r2, [r3], #4
 80081d4:	e7e3      	b.n	800819e <__multiply+0x42>
 80081d6:	f8b2 b000 	ldrh.w	fp, [r2]
 80081da:	f1bb 0f00 	cmp.w	fp, #0
 80081de:	d023      	beq.n	8008228 <__multiply+0xcc>
 80081e0:	4689      	mov	r9, r1
 80081e2:	46ac      	mov	ip, r5
 80081e4:	f04f 0800 	mov.w	r8, #0
 80081e8:	f859 4b04 	ldr.w	r4, [r9], #4
 80081ec:	f8dc a000 	ldr.w	sl, [ip]
 80081f0:	b2a3      	uxth	r3, r4
 80081f2:	fa1f fa8a 	uxth.w	sl, sl
 80081f6:	fb0b a303 	mla	r3, fp, r3, sl
 80081fa:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80081fe:	f8dc 4000 	ldr.w	r4, [ip]
 8008202:	4443      	add	r3, r8
 8008204:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008208:	fb0b 840a 	mla	r4, fp, sl, r8
 800820c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008210:	46e2      	mov	sl, ip
 8008212:	b29b      	uxth	r3, r3
 8008214:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008218:	454f      	cmp	r7, r9
 800821a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800821e:	f84a 3b04 	str.w	r3, [sl], #4
 8008222:	d82b      	bhi.n	800827c <__multiply+0x120>
 8008224:	f8cc 8004 	str.w	r8, [ip, #4]
 8008228:	9b01      	ldr	r3, [sp, #4]
 800822a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800822e:	3204      	adds	r2, #4
 8008230:	f1ba 0f00 	cmp.w	sl, #0
 8008234:	d020      	beq.n	8008278 <__multiply+0x11c>
 8008236:	682b      	ldr	r3, [r5, #0]
 8008238:	4689      	mov	r9, r1
 800823a:	46a8      	mov	r8, r5
 800823c:	f04f 0b00 	mov.w	fp, #0
 8008240:	f8b9 c000 	ldrh.w	ip, [r9]
 8008244:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008248:	fb0a 440c 	mla	r4, sl, ip, r4
 800824c:	445c      	add	r4, fp
 800824e:	46c4      	mov	ip, r8
 8008250:	b29b      	uxth	r3, r3
 8008252:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008256:	f84c 3b04 	str.w	r3, [ip], #4
 800825a:	f859 3b04 	ldr.w	r3, [r9], #4
 800825e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008262:	0c1b      	lsrs	r3, r3, #16
 8008264:	fb0a b303 	mla	r3, sl, r3, fp
 8008268:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800826c:	454f      	cmp	r7, r9
 800826e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008272:	d805      	bhi.n	8008280 <__multiply+0x124>
 8008274:	f8c8 3004 	str.w	r3, [r8, #4]
 8008278:	3504      	adds	r5, #4
 800827a:	e79b      	b.n	80081b4 <__multiply+0x58>
 800827c:	46d4      	mov	ip, sl
 800827e:	e7b3      	b.n	80081e8 <__multiply+0x8c>
 8008280:	46e0      	mov	r8, ip
 8008282:	e7dd      	b.n	8008240 <__multiply+0xe4>
 8008284:	3e01      	subs	r6, #1
 8008286:	e799      	b.n	80081bc <__multiply+0x60>

08008288 <__pow5mult>:
 8008288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800828c:	4615      	mov	r5, r2
 800828e:	f012 0203 	ands.w	r2, r2, #3
 8008292:	4606      	mov	r6, r0
 8008294:	460f      	mov	r7, r1
 8008296:	d007      	beq.n	80082a8 <__pow5mult+0x20>
 8008298:	3a01      	subs	r2, #1
 800829a:	4c21      	ldr	r4, [pc, #132]	; (8008320 <__pow5mult+0x98>)
 800829c:	2300      	movs	r3, #0
 800829e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80082a2:	f7ff fec9 	bl	8008038 <__multadd>
 80082a6:	4607      	mov	r7, r0
 80082a8:	10ad      	asrs	r5, r5, #2
 80082aa:	d035      	beq.n	8008318 <__pow5mult+0x90>
 80082ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80082ae:	b93c      	cbnz	r4, 80082c0 <__pow5mult+0x38>
 80082b0:	2010      	movs	r0, #16
 80082b2:	f7ff fe63 	bl	8007f7c <malloc>
 80082b6:	6270      	str	r0, [r6, #36]	; 0x24
 80082b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80082bc:	6004      	str	r4, [r0, #0]
 80082be:	60c4      	str	r4, [r0, #12]
 80082c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80082c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80082c8:	b94c      	cbnz	r4, 80082de <__pow5mult+0x56>
 80082ca:	f240 2171 	movw	r1, #625	; 0x271
 80082ce:	4630      	mov	r0, r6
 80082d0:	f7ff ff3b 	bl	800814a <__i2b>
 80082d4:	2300      	movs	r3, #0
 80082d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80082da:	4604      	mov	r4, r0
 80082dc:	6003      	str	r3, [r0, #0]
 80082de:	f04f 0800 	mov.w	r8, #0
 80082e2:	07eb      	lsls	r3, r5, #31
 80082e4:	d50a      	bpl.n	80082fc <__pow5mult+0x74>
 80082e6:	4639      	mov	r1, r7
 80082e8:	4622      	mov	r2, r4
 80082ea:	4630      	mov	r0, r6
 80082ec:	f7ff ff36 	bl	800815c <__multiply>
 80082f0:	4639      	mov	r1, r7
 80082f2:	4681      	mov	r9, r0
 80082f4:	4630      	mov	r0, r6
 80082f6:	f7ff fe88 	bl	800800a <_Bfree>
 80082fa:	464f      	mov	r7, r9
 80082fc:	106d      	asrs	r5, r5, #1
 80082fe:	d00b      	beq.n	8008318 <__pow5mult+0x90>
 8008300:	6820      	ldr	r0, [r4, #0]
 8008302:	b938      	cbnz	r0, 8008314 <__pow5mult+0x8c>
 8008304:	4622      	mov	r2, r4
 8008306:	4621      	mov	r1, r4
 8008308:	4630      	mov	r0, r6
 800830a:	f7ff ff27 	bl	800815c <__multiply>
 800830e:	6020      	str	r0, [r4, #0]
 8008310:	f8c0 8000 	str.w	r8, [r0]
 8008314:	4604      	mov	r4, r0
 8008316:	e7e4      	b.n	80082e2 <__pow5mult+0x5a>
 8008318:	4638      	mov	r0, r7
 800831a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800831e:	bf00      	nop
 8008320:	08009c48 	.word	0x08009c48

08008324 <__lshift>:
 8008324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008328:	460c      	mov	r4, r1
 800832a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800832e:	6923      	ldr	r3, [r4, #16]
 8008330:	6849      	ldr	r1, [r1, #4]
 8008332:	eb0a 0903 	add.w	r9, sl, r3
 8008336:	68a3      	ldr	r3, [r4, #8]
 8008338:	4607      	mov	r7, r0
 800833a:	4616      	mov	r6, r2
 800833c:	f109 0501 	add.w	r5, r9, #1
 8008340:	42ab      	cmp	r3, r5
 8008342:	db32      	blt.n	80083aa <__lshift+0x86>
 8008344:	4638      	mov	r0, r7
 8008346:	f7ff fe2c 	bl	8007fa2 <_Balloc>
 800834a:	2300      	movs	r3, #0
 800834c:	4680      	mov	r8, r0
 800834e:	f100 0114 	add.w	r1, r0, #20
 8008352:	461a      	mov	r2, r3
 8008354:	4553      	cmp	r3, sl
 8008356:	db2b      	blt.n	80083b0 <__lshift+0x8c>
 8008358:	6920      	ldr	r0, [r4, #16]
 800835a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800835e:	f104 0314 	add.w	r3, r4, #20
 8008362:	f016 021f 	ands.w	r2, r6, #31
 8008366:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800836a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800836e:	d025      	beq.n	80083bc <__lshift+0x98>
 8008370:	f1c2 0e20 	rsb	lr, r2, #32
 8008374:	2000      	movs	r0, #0
 8008376:	681e      	ldr	r6, [r3, #0]
 8008378:	468a      	mov	sl, r1
 800837a:	4096      	lsls	r6, r2
 800837c:	4330      	orrs	r0, r6
 800837e:	f84a 0b04 	str.w	r0, [sl], #4
 8008382:	f853 0b04 	ldr.w	r0, [r3], #4
 8008386:	459c      	cmp	ip, r3
 8008388:	fa20 f00e 	lsr.w	r0, r0, lr
 800838c:	d814      	bhi.n	80083b8 <__lshift+0x94>
 800838e:	6048      	str	r0, [r1, #4]
 8008390:	b108      	cbz	r0, 8008396 <__lshift+0x72>
 8008392:	f109 0502 	add.w	r5, r9, #2
 8008396:	3d01      	subs	r5, #1
 8008398:	4638      	mov	r0, r7
 800839a:	f8c8 5010 	str.w	r5, [r8, #16]
 800839e:	4621      	mov	r1, r4
 80083a0:	f7ff fe33 	bl	800800a <_Bfree>
 80083a4:	4640      	mov	r0, r8
 80083a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083aa:	3101      	adds	r1, #1
 80083ac:	005b      	lsls	r3, r3, #1
 80083ae:	e7c7      	b.n	8008340 <__lshift+0x1c>
 80083b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80083b4:	3301      	adds	r3, #1
 80083b6:	e7cd      	b.n	8008354 <__lshift+0x30>
 80083b8:	4651      	mov	r1, sl
 80083ba:	e7dc      	b.n	8008376 <__lshift+0x52>
 80083bc:	3904      	subs	r1, #4
 80083be:	f853 2b04 	ldr.w	r2, [r3], #4
 80083c2:	f841 2f04 	str.w	r2, [r1, #4]!
 80083c6:	459c      	cmp	ip, r3
 80083c8:	d8f9      	bhi.n	80083be <__lshift+0x9a>
 80083ca:	e7e4      	b.n	8008396 <__lshift+0x72>

080083cc <__mcmp>:
 80083cc:	6903      	ldr	r3, [r0, #16]
 80083ce:	690a      	ldr	r2, [r1, #16]
 80083d0:	1a9b      	subs	r3, r3, r2
 80083d2:	b530      	push	{r4, r5, lr}
 80083d4:	d10c      	bne.n	80083f0 <__mcmp+0x24>
 80083d6:	0092      	lsls	r2, r2, #2
 80083d8:	3014      	adds	r0, #20
 80083da:	3114      	adds	r1, #20
 80083dc:	1884      	adds	r4, r0, r2
 80083de:	4411      	add	r1, r2
 80083e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80083e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80083e8:	4295      	cmp	r5, r2
 80083ea:	d003      	beq.n	80083f4 <__mcmp+0x28>
 80083ec:	d305      	bcc.n	80083fa <__mcmp+0x2e>
 80083ee:	2301      	movs	r3, #1
 80083f0:	4618      	mov	r0, r3
 80083f2:	bd30      	pop	{r4, r5, pc}
 80083f4:	42a0      	cmp	r0, r4
 80083f6:	d3f3      	bcc.n	80083e0 <__mcmp+0x14>
 80083f8:	e7fa      	b.n	80083f0 <__mcmp+0x24>
 80083fa:	f04f 33ff 	mov.w	r3, #4294967295
 80083fe:	e7f7      	b.n	80083f0 <__mcmp+0x24>

08008400 <__mdiff>:
 8008400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008404:	460d      	mov	r5, r1
 8008406:	4607      	mov	r7, r0
 8008408:	4611      	mov	r1, r2
 800840a:	4628      	mov	r0, r5
 800840c:	4614      	mov	r4, r2
 800840e:	f7ff ffdd 	bl	80083cc <__mcmp>
 8008412:	1e06      	subs	r6, r0, #0
 8008414:	d108      	bne.n	8008428 <__mdiff+0x28>
 8008416:	4631      	mov	r1, r6
 8008418:	4638      	mov	r0, r7
 800841a:	f7ff fdc2 	bl	8007fa2 <_Balloc>
 800841e:	2301      	movs	r3, #1
 8008420:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008428:	bfa4      	itt	ge
 800842a:	4623      	movge	r3, r4
 800842c:	462c      	movge	r4, r5
 800842e:	4638      	mov	r0, r7
 8008430:	6861      	ldr	r1, [r4, #4]
 8008432:	bfa6      	itte	ge
 8008434:	461d      	movge	r5, r3
 8008436:	2600      	movge	r6, #0
 8008438:	2601      	movlt	r6, #1
 800843a:	f7ff fdb2 	bl	8007fa2 <_Balloc>
 800843e:	692b      	ldr	r3, [r5, #16]
 8008440:	60c6      	str	r6, [r0, #12]
 8008442:	6926      	ldr	r6, [r4, #16]
 8008444:	f105 0914 	add.w	r9, r5, #20
 8008448:	f104 0214 	add.w	r2, r4, #20
 800844c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008450:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008454:	f100 0514 	add.w	r5, r0, #20
 8008458:	f04f 0e00 	mov.w	lr, #0
 800845c:	f852 ab04 	ldr.w	sl, [r2], #4
 8008460:	f859 4b04 	ldr.w	r4, [r9], #4
 8008464:	fa1e f18a 	uxtah	r1, lr, sl
 8008468:	b2a3      	uxth	r3, r4
 800846a:	1ac9      	subs	r1, r1, r3
 800846c:	0c23      	lsrs	r3, r4, #16
 800846e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008472:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008476:	b289      	uxth	r1, r1
 8008478:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800847c:	45c8      	cmp	r8, r9
 800847e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008482:	4694      	mov	ip, r2
 8008484:	f845 3b04 	str.w	r3, [r5], #4
 8008488:	d8e8      	bhi.n	800845c <__mdiff+0x5c>
 800848a:	45bc      	cmp	ip, r7
 800848c:	d304      	bcc.n	8008498 <__mdiff+0x98>
 800848e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008492:	b183      	cbz	r3, 80084b6 <__mdiff+0xb6>
 8008494:	6106      	str	r6, [r0, #16]
 8008496:	e7c5      	b.n	8008424 <__mdiff+0x24>
 8008498:	f85c 1b04 	ldr.w	r1, [ip], #4
 800849c:	fa1e f381 	uxtah	r3, lr, r1
 80084a0:	141a      	asrs	r2, r3, #16
 80084a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084ac:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80084b0:	f845 3b04 	str.w	r3, [r5], #4
 80084b4:	e7e9      	b.n	800848a <__mdiff+0x8a>
 80084b6:	3e01      	subs	r6, #1
 80084b8:	e7e9      	b.n	800848e <__mdiff+0x8e>

080084ba <__d2b>:
 80084ba:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80084be:	460e      	mov	r6, r1
 80084c0:	2101      	movs	r1, #1
 80084c2:	ec59 8b10 	vmov	r8, r9, d0
 80084c6:	4615      	mov	r5, r2
 80084c8:	f7ff fd6b 	bl	8007fa2 <_Balloc>
 80084cc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80084d0:	4607      	mov	r7, r0
 80084d2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80084d6:	bb34      	cbnz	r4, 8008526 <__d2b+0x6c>
 80084d8:	9301      	str	r3, [sp, #4]
 80084da:	f1b8 0300 	subs.w	r3, r8, #0
 80084de:	d027      	beq.n	8008530 <__d2b+0x76>
 80084e0:	a802      	add	r0, sp, #8
 80084e2:	f840 3d08 	str.w	r3, [r0, #-8]!
 80084e6:	f7ff fe01 	bl	80080ec <__lo0bits>
 80084ea:	9900      	ldr	r1, [sp, #0]
 80084ec:	b1f0      	cbz	r0, 800852c <__d2b+0x72>
 80084ee:	9a01      	ldr	r2, [sp, #4]
 80084f0:	f1c0 0320 	rsb	r3, r0, #32
 80084f4:	fa02 f303 	lsl.w	r3, r2, r3
 80084f8:	430b      	orrs	r3, r1
 80084fa:	40c2      	lsrs	r2, r0
 80084fc:	617b      	str	r3, [r7, #20]
 80084fe:	9201      	str	r2, [sp, #4]
 8008500:	9b01      	ldr	r3, [sp, #4]
 8008502:	61bb      	str	r3, [r7, #24]
 8008504:	2b00      	cmp	r3, #0
 8008506:	bf14      	ite	ne
 8008508:	2102      	movne	r1, #2
 800850a:	2101      	moveq	r1, #1
 800850c:	6139      	str	r1, [r7, #16]
 800850e:	b1c4      	cbz	r4, 8008542 <__d2b+0x88>
 8008510:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008514:	4404      	add	r4, r0
 8008516:	6034      	str	r4, [r6, #0]
 8008518:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800851c:	6028      	str	r0, [r5, #0]
 800851e:	4638      	mov	r0, r7
 8008520:	b003      	add	sp, #12
 8008522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008526:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800852a:	e7d5      	b.n	80084d8 <__d2b+0x1e>
 800852c:	6179      	str	r1, [r7, #20]
 800852e:	e7e7      	b.n	8008500 <__d2b+0x46>
 8008530:	a801      	add	r0, sp, #4
 8008532:	f7ff fddb 	bl	80080ec <__lo0bits>
 8008536:	9b01      	ldr	r3, [sp, #4]
 8008538:	617b      	str	r3, [r7, #20]
 800853a:	2101      	movs	r1, #1
 800853c:	6139      	str	r1, [r7, #16]
 800853e:	3020      	adds	r0, #32
 8008540:	e7e5      	b.n	800850e <__d2b+0x54>
 8008542:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008546:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800854a:	6030      	str	r0, [r6, #0]
 800854c:	6918      	ldr	r0, [r3, #16]
 800854e:	f7ff fdae 	bl	80080ae <__hi0bits>
 8008552:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008556:	e7e1      	b.n	800851c <__d2b+0x62>

08008558 <_calloc_r>:
 8008558:	b538      	push	{r3, r4, r5, lr}
 800855a:	fb02 f401 	mul.w	r4, r2, r1
 800855e:	4621      	mov	r1, r4
 8008560:	f000 f856 	bl	8008610 <_malloc_r>
 8008564:	4605      	mov	r5, r0
 8008566:	b118      	cbz	r0, 8008570 <_calloc_r+0x18>
 8008568:	4622      	mov	r2, r4
 800856a:	2100      	movs	r1, #0
 800856c:	f7fe fa2e 	bl	80069cc <memset>
 8008570:	4628      	mov	r0, r5
 8008572:	bd38      	pop	{r3, r4, r5, pc}

08008574 <_free_r>:
 8008574:	b538      	push	{r3, r4, r5, lr}
 8008576:	4605      	mov	r5, r0
 8008578:	2900      	cmp	r1, #0
 800857a:	d045      	beq.n	8008608 <_free_r+0x94>
 800857c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008580:	1f0c      	subs	r4, r1, #4
 8008582:	2b00      	cmp	r3, #0
 8008584:	bfb8      	it	lt
 8008586:	18e4      	addlt	r4, r4, r3
 8008588:	f000 fa29 	bl	80089de <__malloc_lock>
 800858c:	4a1f      	ldr	r2, [pc, #124]	; (800860c <_free_r+0x98>)
 800858e:	6813      	ldr	r3, [r2, #0]
 8008590:	4610      	mov	r0, r2
 8008592:	b933      	cbnz	r3, 80085a2 <_free_r+0x2e>
 8008594:	6063      	str	r3, [r4, #4]
 8008596:	6014      	str	r4, [r2, #0]
 8008598:	4628      	mov	r0, r5
 800859a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800859e:	f000 ba1f 	b.w	80089e0 <__malloc_unlock>
 80085a2:	42a3      	cmp	r3, r4
 80085a4:	d90c      	bls.n	80085c0 <_free_r+0x4c>
 80085a6:	6821      	ldr	r1, [r4, #0]
 80085a8:	1862      	adds	r2, r4, r1
 80085aa:	4293      	cmp	r3, r2
 80085ac:	bf04      	itt	eq
 80085ae:	681a      	ldreq	r2, [r3, #0]
 80085b0:	685b      	ldreq	r3, [r3, #4]
 80085b2:	6063      	str	r3, [r4, #4]
 80085b4:	bf04      	itt	eq
 80085b6:	1852      	addeq	r2, r2, r1
 80085b8:	6022      	streq	r2, [r4, #0]
 80085ba:	6004      	str	r4, [r0, #0]
 80085bc:	e7ec      	b.n	8008598 <_free_r+0x24>
 80085be:	4613      	mov	r3, r2
 80085c0:	685a      	ldr	r2, [r3, #4]
 80085c2:	b10a      	cbz	r2, 80085c8 <_free_r+0x54>
 80085c4:	42a2      	cmp	r2, r4
 80085c6:	d9fa      	bls.n	80085be <_free_r+0x4a>
 80085c8:	6819      	ldr	r1, [r3, #0]
 80085ca:	1858      	adds	r0, r3, r1
 80085cc:	42a0      	cmp	r0, r4
 80085ce:	d10b      	bne.n	80085e8 <_free_r+0x74>
 80085d0:	6820      	ldr	r0, [r4, #0]
 80085d2:	4401      	add	r1, r0
 80085d4:	1858      	adds	r0, r3, r1
 80085d6:	4282      	cmp	r2, r0
 80085d8:	6019      	str	r1, [r3, #0]
 80085da:	d1dd      	bne.n	8008598 <_free_r+0x24>
 80085dc:	6810      	ldr	r0, [r2, #0]
 80085de:	6852      	ldr	r2, [r2, #4]
 80085e0:	605a      	str	r2, [r3, #4]
 80085e2:	4401      	add	r1, r0
 80085e4:	6019      	str	r1, [r3, #0]
 80085e6:	e7d7      	b.n	8008598 <_free_r+0x24>
 80085e8:	d902      	bls.n	80085f0 <_free_r+0x7c>
 80085ea:	230c      	movs	r3, #12
 80085ec:	602b      	str	r3, [r5, #0]
 80085ee:	e7d3      	b.n	8008598 <_free_r+0x24>
 80085f0:	6820      	ldr	r0, [r4, #0]
 80085f2:	1821      	adds	r1, r4, r0
 80085f4:	428a      	cmp	r2, r1
 80085f6:	bf04      	itt	eq
 80085f8:	6811      	ldreq	r1, [r2, #0]
 80085fa:	6852      	ldreq	r2, [r2, #4]
 80085fc:	6062      	str	r2, [r4, #4]
 80085fe:	bf04      	itt	eq
 8008600:	1809      	addeq	r1, r1, r0
 8008602:	6021      	streq	r1, [r4, #0]
 8008604:	605c      	str	r4, [r3, #4]
 8008606:	e7c7      	b.n	8008598 <_free_r+0x24>
 8008608:	bd38      	pop	{r3, r4, r5, pc}
 800860a:	bf00      	nop
 800860c:	20000448 	.word	0x20000448

08008610 <_malloc_r>:
 8008610:	b570      	push	{r4, r5, r6, lr}
 8008612:	1ccd      	adds	r5, r1, #3
 8008614:	f025 0503 	bic.w	r5, r5, #3
 8008618:	3508      	adds	r5, #8
 800861a:	2d0c      	cmp	r5, #12
 800861c:	bf38      	it	cc
 800861e:	250c      	movcc	r5, #12
 8008620:	2d00      	cmp	r5, #0
 8008622:	4606      	mov	r6, r0
 8008624:	db01      	blt.n	800862a <_malloc_r+0x1a>
 8008626:	42a9      	cmp	r1, r5
 8008628:	d903      	bls.n	8008632 <_malloc_r+0x22>
 800862a:	230c      	movs	r3, #12
 800862c:	6033      	str	r3, [r6, #0]
 800862e:	2000      	movs	r0, #0
 8008630:	bd70      	pop	{r4, r5, r6, pc}
 8008632:	f000 f9d4 	bl	80089de <__malloc_lock>
 8008636:	4a21      	ldr	r2, [pc, #132]	; (80086bc <_malloc_r+0xac>)
 8008638:	6814      	ldr	r4, [r2, #0]
 800863a:	4621      	mov	r1, r4
 800863c:	b991      	cbnz	r1, 8008664 <_malloc_r+0x54>
 800863e:	4c20      	ldr	r4, [pc, #128]	; (80086c0 <_malloc_r+0xb0>)
 8008640:	6823      	ldr	r3, [r4, #0]
 8008642:	b91b      	cbnz	r3, 800864c <_malloc_r+0x3c>
 8008644:	4630      	mov	r0, r6
 8008646:	f000 f98f 	bl	8008968 <_sbrk_r>
 800864a:	6020      	str	r0, [r4, #0]
 800864c:	4629      	mov	r1, r5
 800864e:	4630      	mov	r0, r6
 8008650:	f000 f98a 	bl	8008968 <_sbrk_r>
 8008654:	1c43      	adds	r3, r0, #1
 8008656:	d124      	bne.n	80086a2 <_malloc_r+0x92>
 8008658:	230c      	movs	r3, #12
 800865a:	6033      	str	r3, [r6, #0]
 800865c:	4630      	mov	r0, r6
 800865e:	f000 f9bf 	bl	80089e0 <__malloc_unlock>
 8008662:	e7e4      	b.n	800862e <_malloc_r+0x1e>
 8008664:	680b      	ldr	r3, [r1, #0]
 8008666:	1b5b      	subs	r3, r3, r5
 8008668:	d418      	bmi.n	800869c <_malloc_r+0x8c>
 800866a:	2b0b      	cmp	r3, #11
 800866c:	d90f      	bls.n	800868e <_malloc_r+0x7e>
 800866e:	600b      	str	r3, [r1, #0]
 8008670:	50cd      	str	r5, [r1, r3]
 8008672:	18cc      	adds	r4, r1, r3
 8008674:	4630      	mov	r0, r6
 8008676:	f000 f9b3 	bl	80089e0 <__malloc_unlock>
 800867a:	f104 000b 	add.w	r0, r4, #11
 800867e:	1d23      	adds	r3, r4, #4
 8008680:	f020 0007 	bic.w	r0, r0, #7
 8008684:	1ac3      	subs	r3, r0, r3
 8008686:	d0d3      	beq.n	8008630 <_malloc_r+0x20>
 8008688:	425a      	negs	r2, r3
 800868a:	50e2      	str	r2, [r4, r3]
 800868c:	e7d0      	b.n	8008630 <_malloc_r+0x20>
 800868e:	428c      	cmp	r4, r1
 8008690:	684b      	ldr	r3, [r1, #4]
 8008692:	bf16      	itet	ne
 8008694:	6063      	strne	r3, [r4, #4]
 8008696:	6013      	streq	r3, [r2, #0]
 8008698:	460c      	movne	r4, r1
 800869a:	e7eb      	b.n	8008674 <_malloc_r+0x64>
 800869c:	460c      	mov	r4, r1
 800869e:	6849      	ldr	r1, [r1, #4]
 80086a0:	e7cc      	b.n	800863c <_malloc_r+0x2c>
 80086a2:	1cc4      	adds	r4, r0, #3
 80086a4:	f024 0403 	bic.w	r4, r4, #3
 80086a8:	42a0      	cmp	r0, r4
 80086aa:	d005      	beq.n	80086b8 <_malloc_r+0xa8>
 80086ac:	1a21      	subs	r1, r4, r0
 80086ae:	4630      	mov	r0, r6
 80086b0:	f000 f95a 	bl	8008968 <_sbrk_r>
 80086b4:	3001      	adds	r0, #1
 80086b6:	d0cf      	beq.n	8008658 <_malloc_r+0x48>
 80086b8:	6025      	str	r5, [r4, #0]
 80086ba:	e7db      	b.n	8008674 <_malloc_r+0x64>
 80086bc:	20000448 	.word	0x20000448
 80086c0:	2000044c 	.word	0x2000044c

080086c4 <__ssputs_r>:
 80086c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086c8:	688e      	ldr	r6, [r1, #8]
 80086ca:	429e      	cmp	r6, r3
 80086cc:	4682      	mov	sl, r0
 80086ce:	460c      	mov	r4, r1
 80086d0:	4690      	mov	r8, r2
 80086d2:	4699      	mov	r9, r3
 80086d4:	d837      	bhi.n	8008746 <__ssputs_r+0x82>
 80086d6:	898a      	ldrh	r2, [r1, #12]
 80086d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80086dc:	d031      	beq.n	8008742 <__ssputs_r+0x7e>
 80086de:	6825      	ldr	r5, [r4, #0]
 80086e0:	6909      	ldr	r1, [r1, #16]
 80086e2:	1a6f      	subs	r7, r5, r1
 80086e4:	6965      	ldr	r5, [r4, #20]
 80086e6:	2302      	movs	r3, #2
 80086e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80086ec:	fb95 f5f3 	sdiv	r5, r5, r3
 80086f0:	f109 0301 	add.w	r3, r9, #1
 80086f4:	443b      	add	r3, r7
 80086f6:	429d      	cmp	r5, r3
 80086f8:	bf38      	it	cc
 80086fa:	461d      	movcc	r5, r3
 80086fc:	0553      	lsls	r3, r2, #21
 80086fe:	d530      	bpl.n	8008762 <__ssputs_r+0x9e>
 8008700:	4629      	mov	r1, r5
 8008702:	f7ff ff85 	bl	8008610 <_malloc_r>
 8008706:	4606      	mov	r6, r0
 8008708:	b950      	cbnz	r0, 8008720 <__ssputs_r+0x5c>
 800870a:	230c      	movs	r3, #12
 800870c:	f8ca 3000 	str.w	r3, [sl]
 8008710:	89a3      	ldrh	r3, [r4, #12]
 8008712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008716:	81a3      	strh	r3, [r4, #12]
 8008718:	f04f 30ff 	mov.w	r0, #4294967295
 800871c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008720:	463a      	mov	r2, r7
 8008722:	6921      	ldr	r1, [r4, #16]
 8008724:	f7ff fc32 	bl	8007f8c <memcpy>
 8008728:	89a3      	ldrh	r3, [r4, #12]
 800872a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800872e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008732:	81a3      	strh	r3, [r4, #12]
 8008734:	6126      	str	r6, [r4, #16]
 8008736:	6165      	str	r5, [r4, #20]
 8008738:	443e      	add	r6, r7
 800873a:	1bed      	subs	r5, r5, r7
 800873c:	6026      	str	r6, [r4, #0]
 800873e:	60a5      	str	r5, [r4, #8]
 8008740:	464e      	mov	r6, r9
 8008742:	454e      	cmp	r6, r9
 8008744:	d900      	bls.n	8008748 <__ssputs_r+0x84>
 8008746:	464e      	mov	r6, r9
 8008748:	4632      	mov	r2, r6
 800874a:	4641      	mov	r1, r8
 800874c:	6820      	ldr	r0, [r4, #0]
 800874e:	f000 f92d 	bl	80089ac <memmove>
 8008752:	68a3      	ldr	r3, [r4, #8]
 8008754:	1b9b      	subs	r3, r3, r6
 8008756:	60a3      	str	r3, [r4, #8]
 8008758:	6823      	ldr	r3, [r4, #0]
 800875a:	441e      	add	r6, r3
 800875c:	6026      	str	r6, [r4, #0]
 800875e:	2000      	movs	r0, #0
 8008760:	e7dc      	b.n	800871c <__ssputs_r+0x58>
 8008762:	462a      	mov	r2, r5
 8008764:	f000 f93d 	bl	80089e2 <_realloc_r>
 8008768:	4606      	mov	r6, r0
 800876a:	2800      	cmp	r0, #0
 800876c:	d1e2      	bne.n	8008734 <__ssputs_r+0x70>
 800876e:	6921      	ldr	r1, [r4, #16]
 8008770:	4650      	mov	r0, sl
 8008772:	f7ff feff 	bl	8008574 <_free_r>
 8008776:	e7c8      	b.n	800870a <__ssputs_r+0x46>

08008778 <_svfiprintf_r>:
 8008778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800877c:	461d      	mov	r5, r3
 800877e:	898b      	ldrh	r3, [r1, #12]
 8008780:	061f      	lsls	r7, r3, #24
 8008782:	b09d      	sub	sp, #116	; 0x74
 8008784:	4680      	mov	r8, r0
 8008786:	460c      	mov	r4, r1
 8008788:	4616      	mov	r6, r2
 800878a:	d50f      	bpl.n	80087ac <_svfiprintf_r+0x34>
 800878c:	690b      	ldr	r3, [r1, #16]
 800878e:	b96b      	cbnz	r3, 80087ac <_svfiprintf_r+0x34>
 8008790:	2140      	movs	r1, #64	; 0x40
 8008792:	f7ff ff3d 	bl	8008610 <_malloc_r>
 8008796:	6020      	str	r0, [r4, #0]
 8008798:	6120      	str	r0, [r4, #16]
 800879a:	b928      	cbnz	r0, 80087a8 <_svfiprintf_r+0x30>
 800879c:	230c      	movs	r3, #12
 800879e:	f8c8 3000 	str.w	r3, [r8]
 80087a2:	f04f 30ff 	mov.w	r0, #4294967295
 80087a6:	e0c8      	b.n	800893a <_svfiprintf_r+0x1c2>
 80087a8:	2340      	movs	r3, #64	; 0x40
 80087aa:	6163      	str	r3, [r4, #20]
 80087ac:	2300      	movs	r3, #0
 80087ae:	9309      	str	r3, [sp, #36]	; 0x24
 80087b0:	2320      	movs	r3, #32
 80087b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087b6:	2330      	movs	r3, #48	; 0x30
 80087b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087bc:	9503      	str	r5, [sp, #12]
 80087be:	f04f 0b01 	mov.w	fp, #1
 80087c2:	4637      	mov	r7, r6
 80087c4:	463d      	mov	r5, r7
 80087c6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80087ca:	b10b      	cbz	r3, 80087d0 <_svfiprintf_r+0x58>
 80087cc:	2b25      	cmp	r3, #37	; 0x25
 80087ce:	d13e      	bne.n	800884e <_svfiprintf_r+0xd6>
 80087d0:	ebb7 0a06 	subs.w	sl, r7, r6
 80087d4:	d00b      	beq.n	80087ee <_svfiprintf_r+0x76>
 80087d6:	4653      	mov	r3, sl
 80087d8:	4632      	mov	r2, r6
 80087da:	4621      	mov	r1, r4
 80087dc:	4640      	mov	r0, r8
 80087de:	f7ff ff71 	bl	80086c4 <__ssputs_r>
 80087e2:	3001      	adds	r0, #1
 80087e4:	f000 80a4 	beq.w	8008930 <_svfiprintf_r+0x1b8>
 80087e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087ea:	4453      	add	r3, sl
 80087ec:	9309      	str	r3, [sp, #36]	; 0x24
 80087ee:	783b      	ldrb	r3, [r7, #0]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	f000 809d 	beq.w	8008930 <_svfiprintf_r+0x1b8>
 80087f6:	2300      	movs	r3, #0
 80087f8:	f04f 32ff 	mov.w	r2, #4294967295
 80087fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008800:	9304      	str	r3, [sp, #16]
 8008802:	9307      	str	r3, [sp, #28]
 8008804:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008808:	931a      	str	r3, [sp, #104]	; 0x68
 800880a:	462f      	mov	r7, r5
 800880c:	2205      	movs	r2, #5
 800880e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008812:	4850      	ldr	r0, [pc, #320]	; (8008954 <_svfiprintf_r+0x1dc>)
 8008814:	f7f7 fcec 	bl	80001f0 <memchr>
 8008818:	9b04      	ldr	r3, [sp, #16]
 800881a:	b9d0      	cbnz	r0, 8008852 <_svfiprintf_r+0xda>
 800881c:	06d9      	lsls	r1, r3, #27
 800881e:	bf44      	itt	mi
 8008820:	2220      	movmi	r2, #32
 8008822:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008826:	071a      	lsls	r2, r3, #28
 8008828:	bf44      	itt	mi
 800882a:	222b      	movmi	r2, #43	; 0x2b
 800882c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008830:	782a      	ldrb	r2, [r5, #0]
 8008832:	2a2a      	cmp	r2, #42	; 0x2a
 8008834:	d015      	beq.n	8008862 <_svfiprintf_r+0xea>
 8008836:	9a07      	ldr	r2, [sp, #28]
 8008838:	462f      	mov	r7, r5
 800883a:	2000      	movs	r0, #0
 800883c:	250a      	movs	r5, #10
 800883e:	4639      	mov	r1, r7
 8008840:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008844:	3b30      	subs	r3, #48	; 0x30
 8008846:	2b09      	cmp	r3, #9
 8008848:	d94d      	bls.n	80088e6 <_svfiprintf_r+0x16e>
 800884a:	b1b8      	cbz	r0, 800887c <_svfiprintf_r+0x104>
 800884c:	e00f      	b.n	800886e <_svfiprintf_r+0xf6>
 800884e:	462f      	mov	r7, r5
 8008850:	e7b8      	b.n	80087c4 <_svfiprintf_r+0x4c>
 8008852:	4a40      	ldr	r2, [pc, #256]	; (8008954 <_svfiprintf_r+0x1dc>)
 8008854:	1a80      	subs	r0, r0, r2
 8008856:	fa0b f000 	lsl.w	r0, fp, r0
 800885a:	4318      	orrs	r0, r3
 800885c:	9004      	str	r0, [sp, #16]
 800885e:	463d      	mov	r5, r7
 8008860:	e7d3      	b.n	800880a <_svfiprintf_r+0x92>
 8008862:	9a03      	ldr	r2, [sp, #12]
 8008864:	1d11      	adds	r1, r2, #4
 8008866:	6812      	ldr	r2, [r2, #0]
 8008868:	9103      	str	r1, [sp, #12]
 800886a:	2a00      	cmp	r2, #0
 800886c:	db01      	blt.n	8008872 <_svfiprintf_r+0xfa>
 800886e:	9207      	str	r2, [sp, #28]
 8008870:	e004      	b.n	800887c <_svfiprintf_r+0x104>
 8008872:	4252      	negs	r2, r2
 8008874:	f043 0302 	orr.w	r3, r3, #2
 8008878:	9207      	str	r2, [sp, #28]
 800887a:	9304      	str	r3, [sp, #16]
 800887c:	783b      	ldrb	r3, [r7, #0]
 800887e:	2b2e      	cmp	r3, #46	; 0x2e
 8008880:	d10c      	bne.n	800889c <_svfiprintf_r+0x124>
 8008882:	787b      	ldrb	r3, [r7, #1]
 8008884:	2b2a      	cmp	r3, #42	; 0x2a
 8008886:	d133      	bne.n	80088f0 <_svfiprintf_r+0x178>
 8008888:	9b03      	ldr	r3, [sp, #12]
 800888a:	1d1a      	adds	r2, r3, #4
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	9203      	str	r2, [sp, #12]
 8008890:	2b00      	cmp	r3, #0
 8008892:	bfb8      	it	lt
 8008894:	f04f 33ff 	movlt.w	r3, #4294967295
 8008898:	3702      	adds	r7, #2
 800889a:	9305      	str	r3, [sp, #20]
 800889c:	4d2e      	ldr	r5, [pc, #184]	; (8008958 <_svfiprintf_r+0x1e0>)
 800889e:	7839      	ldrb	r1, [r7, #0]
 80088a0:	2203      	movs	r2, #3
 80088a2:	4628      	mov	r0, r5
 80088a4:	f7f7 fca4 	bl	80001f0 <memchr>
 80088a8:	b138      	cbz	r0, 80088ba <_svfiprintf_r+0x142>
 80088aa:	2340      	movs	r3, #64	; 0x40
 80088ac:	1b40      	subs	r0, r0, r5
 80088ae:	fa03 f000 	lsl.w	r0, r3, r0
 80088b2:	9b04      	ldr	r3, [sp, #16]
 80088b4:	4303      	orrs	r3, r0
 80088b6:	3701      	adds	r7, #1
 80088b8:	9304      	str	r3, [sp, #16]
 80088ba:	7839      	ldrb	r1, [r7, #0]
 80088bc:	4827      	ldr	r0, [pc, #156]	; (800895c <_svfiprintf_r+0x1e4>)
 80088be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088c2:	2206      	movs	r2, #6
 80088c4:	1c7e      	adds	r6, r7, #1
 80088c6:	f7f7 fc93 	bl	80001f0 <memchr>
 80088ca:	2800      	cmp	r0, #0
 80088cc:	d038      	beq.n	8008940 <_svfiprintf_r+0x1c8>
 80088ce:	4b24      	ldr	r3, [pc, #144]	; (8008960 <_svfiprintf_r+0x1e8>)
 80088d0:	bb13      	cbnz	r3, 8008918 <_svfiprintf_r+0x1a0>
 80088d2:	9b03      	ldr	r3, [sp, #12]
 80088d4:	3307      	adds	r3, #7
 80088d6:	f023 0307 	bic.w	r3, r3, #7
 80088da:	3308      	adds	r3, #8
 80088dc:	9303      	str	r3, [sp, #12]
 80088de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088e0:	444b      	add	r3, r9
 80088e2:	9309      	str	r3, [sp, #36]	; 0x24
 80088e4:	e76d      	b.n	80087c2 <_svfiprintf_r+0x4a>
 80088e6:	fb05 3202 	mla	r2, r5, r2, r3
 80088ea:	2001      	movs	r0, #1
 80088ec:	460f      	mov	r7, r1
 80088ee:	e7a6      	b.n	800883e <_svfiprintf_r+0xc6>
 80088f0:	2300      	movs	r3, #0
 80088f2:	3701      	adds	r7, #1
 80088f4:	9305      	str	r3, [sp, #20]
 80088f6:	4619      	mov	r1, r3
 80088f8:	250a      	movs	r5, #10
 80088fa:	4638      	mov	r0, r7
 80088fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008900:	3a30      	subs	r2, #48	; 0x30
 8008902:	2a09      	cmp	r2, #9
 8008904:	d903      	bls.n	800890e <_svfiprintf_r+0x196>
 8008906:	2b00      	cmp	r3, #0
 8008908:	d0c8      	beq.n	800889c <_svfiprintf_r+0x124>
 800890a:	9105      	str	r1, [sp, #20]
 800890c:	e7c6      	b.n	800889c <_svfiprintf_r+0x124>
 800890e:	fb05 2101 	mla	r1, r5, r1, r2
 8008912:	2301      	movs	r3, #1
 8008914:	4607      	mov	r7, r0
 8008916:	e7f0      	b.n	80088fa <_svfiprintf_r+0x182>
 8008918:	ab03      	add	r3, sp, #12
 800891a:	9300      	str	r3, [sp, #0]
 800891c:	4622      	mov	r2, r4
 800891e:	4b11      	ldr	r3, [pc, #68]	; (8008964 <_svfiprintf_r+0x1ec>)
 8008920:	a904      	add	r1, sp, #16
 8008922:	4640      	mov	r0, r8
 8008924:	f7fe f8ee 	bl	8006b04 <_printf_float>
 8008928:	f1b0 3fff 	cmp.w	r0, #4294967295
 800892c:	4681      	mov	r9, r0
 800892e:	d1d6      	bne.n	80088de <_svfiprintf_r+0x166>
 8008930:	89a3      	ldrh	r3, [r4, #12]
 8008932:	065b      	lsls	r3, r3, #25
 8008934:	f53f af35 	bmi.w	80087a2 <_svfiprintf_r+0x2a>
 8008938:	9809      	ldr	r0, [sp, #36]	; 0x24
 800893a:	b01d      	add	sp, #116	; 0x74
 800893c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008940:	ab03      	add	r3, sp, #12
 8008942:	9300      	str	r3, [sp, #0]
 8008944:	4622      	mov	r2, r4
 8008946:	4b07      	ldr	r3, [pc, #28]	; (8008964 <_svfiprintf_r+0x1ec>)
 8008948:	a904      	add	r1, sp, #16
 800894a:	4640      	mov	r0, r8
 800894c:	f7fe fb90 	bl	8007070 <_printf_i>
 8008950:	e7ea      	b.n	8008928 <_svfiprintf_r+0x1b0>
 8008952:	bf00      	nop
 8008954:	08009c54 	.word	0x08009c54
 8008958:	08009c5a 	.word	0x08009c5a
 800895c:	08009c5e 	.word	0x08009c5e
 8008960:	08006b05 	.word	0x08006b05
 8008964:	080086c5 	.word	0x080086c5

08008968 <_sbrk_r>:
 8008968:	b538      	push	{r3, r4, r5, lr}
 800896a:	4c06      	ldr	r4, [pc, #24]	; (8008984 <_sbrk_r+0x1c>)
 800896c:	2300      	movs	r3, #0
 800896e:	4605      	mov	r5, r0
 8008970:	4608      	mov	r0, r1
 8008972:	6023      	str	r3, [r4, #0]
 8008974:	f7fa f896 	bl	8002aa4 <_sbrk>
 8008978:	1c43      	adds	r3, r0, #1
 800897a:	d102      	bne.n	8008982 <_sbrk_r+0x1a>
 800897c:	6823      	ldr	r3, [r4, #0]
 800897e:	b103      	cbz	r3, 8008982 <_sbrk_r+0x1a>
 8008980:	602b      	str	r3, [r5, #0]
 8008982:	bd38      	pop	{r3, r4, r5, pc}
 8008984:	20000614 	.word	0x20000614

08008988 <__ascii_mbtowc>:
 8008988:	b082      	sub	sp, #8
 800898a:	b901      	cbnz	r1, 800898e <__ascii_mbtowc+0x6>
 800898c:	a901      	add	r1, sp, #4
 800898e:	b142      	cbz	r2, 80089a2 <__ascii_mbtowc+0x1a>
 8008990:	b14b      	cbz	r3, 80089a6 <__ascii_mbtowc+0x1e>
 8008992:	7813      	ldrb	r3, [r2, #0]
 8008994:	600b      	str	r3, [r1, #0]
 8008996:	7812      	ldrb	r2, [r2, #0]
 8008998:	1c10      	adds	r0, r2, #0
 800899a:	bf18      	it	ne
 800899c:	2001      	movne	r0, #1
 800899e:	b002      	add	sp, #8
 80089a0:	4770      	bx	lr
 80089a2:	4610      	mov	r0, r2
 80089a4:	e7fb      	b.n	800899e <__ascii_mbtowc+0x16>
 80089a6:	f06f 0001 	mvn.w	r0, #1
 80089aa:	e7f8      	b.n	800899e <__ascii_mbtowc+0x16>

080089ac <memmove>:
 80089ac:	4288      	cmp	r0, r1
 80089ae:	b510      	push	{r4, lr}
 80089b0:	eb01 0302 	add.w	r3, r1, r2
 80089b4:	d807      	bhi.n	80089c6 <memmove+0x1a>
 80089b6:	1e42      	subs	r2, r0, #1
 80089b8:	4299      	cmp	r1, r3
 80089ba:	d00a      	beq.n	80089d2 <memmove+0x26>
 80089bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089c0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80089c4:	e7f8      	b.n	80089b8 <memmove+0xc>
 80089c6:	4283      	cmp	r3, r0
 80089c8:	d9f5      	bls.n	80089b6 <memmove+0xa>
 80089ca:	1881      	adds	r1, r0, r2
 80089cc:	1ad2      	subs	r2, r2, r3
 80089ce:	42d3      	cmn	r3, r2
 80089d0:	d100      	bne.n	80089d4 <memmove+0x28>
 80089d2:	bd10      	pop	{r4, pc}
 80089d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089d8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80089dc:	e7f7      	b.n	80089ce <memmove+0x22>

080089de <__malloc_lock>:
 80089de:	4770      	bx	lr

080089e0 <__malloc_unlock>:
 80089e0:	4770      	bx	lr

080089e2 <_realloc_r>:
 80089e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089e4:	4607      	mov	r7, r0
 80089e6:	4614      	mov	r4, r2
 80089e8:	460e      	mov	r6, r1
 80089ea:	b921      	cbnz	r1, 80089f6 <_realloc_r+0x14>
 80089ec:	4611      	mov	r1, r2
 80089ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80089f2:	f7ff be0d 	b.w	8008610 <_malloc_r>
 80089f6:	b922      	cbnz	r2, 8008a02 <_realloc_r+0x20>
 80089f8:	f7ff fdbc 	bl	8008574 <_free_r>
 80089fc:	4625      	mov	r5, r4
 80089fe:	4628      	mov	r0, r5
 8008a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a02:	f000 f821 	bl	8008a48 <_malloc_usable_size_r>
 8008a06:	42a0      	cmp	r0, r4
 8008a08:	d20f      	bcs.n	8008a2a <_realloc_r+0x48>
 8008a0a:	4621      	mov	r1, r4
 8008a0c:	4638      	mov	r0, r7
 8008a0e:	f7ff fdff 	bl	8008610 <_malloc_r>
 8008a12:	4605      	mov	r5, r0
 8008a14:	2800      	cmp	r0, #0
 8008a16:	d0f2      	beq.n	80089fe <_realloc_r+0x1c>
 8008a18:	4631      	mov	r1, r6
 8008a1a:	4622      	mov	r2, r4
 8008a1c:	f7ff fab6 	bl	8007f8c <memcpy>
 8008a20:	4631      	mov	r1, r6
 8008a22:	4638      	mov	r0, r7
 8008a24:	f7ff fda6 	bl	8008574 <_free_r>
 8008a28:	e7e9      	b.n	80089fe <_realloc_r+0x1c>
 8008a2a:	4635      	mov	r5, r6
 8008a2c:	e7e7      	b.n	80089fe <_realloc_r+0x1c>

08008a2e <__ascii_wctomb>:
 8008a2e:	b149      	cbz	r1, 8008a44 <__ascii_wctomb+0x16>
 8008a30:	2aff      	cmp	r2, #255	; 0xff
 8008a32:	bf85      	ittet	hi
 8008a34:	238a      	movhi	r3, #138	; 0x8a
 8008a36:	6003      	strhi	r3, [r0, #0]
 8008a38:	700a      	strbls	r2, [r1, #0]
 8008a3a:	f04f 30ff 	movhi.w	r0, #4294967295
 8008a3e:	bf98      	it	ls
 8008a40:	2001      	movls	r0, #1
 8008a42:	4770      	bx	lr
 8008a44:	4608      	mov	r0, r1
 8008a46:	4770      	bx	lr

08008a48 <_malloc_usable_size_r>:
 8008a48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a4c:	1f18      	subs	r0, r3, #4
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	bfbc      	itt	lt
 8008a52:	580b      	ldrlt	r3, [r1, r0]
 8008a54:	18c0      	addlt	r0, r0, r3
 8008a56:	4770      	bx	lr

08008a58 <sin>:
 8008a58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a5a:	ec51 0b10 	vmov	r0, r1, d0
 8008a5e:	4a20      	ldr	r2, [pc, #128]	; (8008ae0 <sin+0x88>)
 8008a60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008a64:	4293      	cmp	r3, r2
 8008a66:	dc07      	bgt.n	8008a78 <sin+0x20>
 8008a68:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8008ad8 <sin+0x80>
 8008a6c:	2000      	movs	r0, #0
 8008a6e:	f000 fe37 	bl	80096e0 <__kernel_sin>
 8008a72:	ec51 0b10 	vmov	r0, r1, d0
 8008a76:	e007      	b.n	8008a88 <sin+0x30>
 8008a78:	4a1a      	ldr	r2, [pc, #104]	; (8008ae4 <sin+0x8c>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	dd09      	ble.n	8008a92 <sin+0x3a>
 8008a7e:	ee10 2a10 	vmov	r2, s0
 8008a82:	460b      	mov	r3, r1
 8008a84:	f7f7 fc08 	bl	8000298 <__aeabi_dsub>
 8008a88:	ec41 0b10 	vmov	d0, r0, r1
 8008a8c:	b005      	add	sp, #20
 8008a8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008a92:	4668      	mov	r0, sp
 8008a94:	f000 f828 	bl	8008ae8 <__ieee754_rem_pio2>
 8008a98:	f000 0003 	and.w	r0, r0, #3
 8008a9c:	2801      	cmp	r0, #1
 8008a9e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008aa2:	ed9d 0b00 	vldr	d0, [sp]
 8008aa6:	d004      	beq.n	8008ab2 <sin+0x5a>
 8008aa8:	2802      	cmp	r0, #2
 8008aaa:	d005      	beq.n	8008ab8 <sin+0x60>
 8008aac:	b970      	cbnz	r0, 8008acc <sin+0x74>
 8008aae:	2001      	movs	r0, #1
 8008ab0:	e7dd      	b.n	8008a6e <sin+0x16>
 8008ab2:	f000 fa0d 	bl	8008ed0 <__kernel_cos>
 8008ab6:	e7dc      	b.n	8008a72 <sin+0x1a>
 8008ab8:	2001      	movs	r0, #1
 8008aba:	f000 fe11 	bl	80096e0 <__kernel_sin>
 8008abe:	ec53 2b10 	vmov	r2, r3, d0
 8008ac2:	ee10 0a10 	vmov	r0, s0
 8008ac6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008aca:	e7dd      	b.n	8008a88 <sin+0x30>
 8008acc:	f000 fa00 	bl	8008ed0 <__kernel_cos>
 8008ad0:	e7f5      	b.n	8008abe <sin+0x66>
 8008ad2:	bf00      	nop
 8008ad4:	f3af 8000 	nop.w
	...
 8008ae0:	3fe921fb 	.word	0x3fe921fb
 8008ae4:	7fefffff 	.word	0x7fefffff

08008ae8 <__ieee754_rem_pio2>:
 8008ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aec:	ec57 6b10 	vmov	r6, r7, d0
 8008af0:	4bc3      	ldr	r3, [pc, #780]	; (8008e00 <__ieee754_rem_pio2+0x318>)
 8008af2:	b08d      	sub	sp, #52	; 0x34
 8008af4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008af8:	4598      	cmp	r8, r3
 8008afa:	4604      	mov	r4, r0
 8008afc:	9704      	str	r7, [sp, #16]
 8008afe:	dc07      	bgt.n	8008b10 <__ieee754_rem_pio2+0x28>
 8008b00:	2200      	movs	r2, #0
 8008b02:	2300      	movs	r3, #0
 8008b04:	ed84 0b00 	vstr	d0, [r4]
 8008b08:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008b0c:	2500      	movs	r5, #0
 8008b0e:	e027      	b.n	8008b60 <__ieee754_rem_pio2+0x78>
 8008b10:	4bbc      	ldr	r3, [pc, #752]	; (8008e04 <__ieee754_rem_pio2+0x31c>)
 8008b12:	4598      	cmp	r8, r3
 8008b14:	dc75      	bgt.n	8008c02 <__ieee754_rem_pio2+0x11a>
 8008b16:	9b04      	ldr	r3, [sp, #16]
 8008b18:	4dbb      	ldr	r5, [pc, #748]	; (8008e08 <__ieee754_rem_pio2+0x320>)
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	ee10 0a10 	vmov	r0, s0
 8008b20:	a3a9      	add	r3, pc, #676	; (adr r3, 8008dc8 <__ieee754_rem_pio2+0x2e0>)
 8008b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b26:	4639      	mov	r1, r7
 8008b28:	dd36      	ble.n	8008b98 <__ieee754_rem_pio2+0xb0>
 8008b2a:	f7f7 fbb5 	bl	8000298 <__aeabi_dsub>
 8008b2e:	45a8      	cmp	r8, r5
 8008b30:	4606      	mov	r6, r0
 8008b32:	460f      	mov	r7, r1
 8008b34:	d018      	beq.n	8008b68 <__ieee754_rem_pio2+0x80>
 8008b36:	a3a6      	add	r3, pc, #664	; (adr r3, 8008dd0 <__ieee754_rem_pio2+0x2e8>)
 8008b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3c:	f7f7 fbac 	bl	8000298 <__aeabi_dsub>
 8008b40:	4602      	mov	r2, r0
 8008b42:	460b      	mov	r3, r1
 8008b44:	e9c4 2300 	strd	r2, r3, [r4]
 8008b48:	4630      	mov	r0, r6
 8008b4a:	4639      	mov	r1, r7
 8008b4c:	f7f7 fba4 	bl	8000298 <__aeabi_dsub>
 8008b50:	a39f      	add	r3, pc, #636	; (adr r3, 8008dd0 <__ieee754_rem_pio2+0x2e8>)
 8008b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b56:	f7f7 fb9f 	bl	8000298 <__aeabi_dsub>
 8008b5a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008b5e:	2501      	movs	r5, #1
 8008b60:	4628      	mov	r0, r5
 8008b62:	b00d      	add	sp, #52	; 0x34
 8008b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b68:	a39b      	add	r3, pc, #620	; (adr r3, 8008dd8 <__ieee754_rem_pio2+0x2f0>)
 8008b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b6e:	f7f7 fb93 	bl	8000298 <__aeabi_dsub>
 8008b72:	a39b      	add	r3, pc, #620	; (adr r3, 8008de0 <__ieee754_rem_pio2+0x2f8>)
 8008b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b78:	4606      	mov	r6, r0
 8008b7a:	460f      	mov	r7, r1
 8008b7c:	f7f7 fb8c 	bl	8000298 <__aeabi_dsub>
 8008b80:	4602      	mov	r2, r0
 8008b82:	460b      	mov	r3, r1
 8008b84:	e9c4 2300 	strd	r2, r3, [r4]
 8008b88:	4630      	mov	r0, r6
 8008b8a:	4639      	mov	r1, r7
 8008b8c:	f7f7 fb84 	bl	8000298 <__aeabi_dsub>
 8008b90:	a393      	add	r3, pc, #588	; (adr r3, 8008de0 <__ieee754_rem_pio2+0x2f8>)
 8008b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b96:	e7de      	b.n	8008b56 <__ieee754_rem_pio2+0x6e>
 8008b98:	f7f7 fb80 	bl	800029c <__adddf3>
 8008b9c:	45a8      	cmp	r8, r5
 8008b9e:	4606      	mov	r6, r0
 8008ba0:	460f      	mov	r7, r1
 8008ba2:	d016      	beq.n	8008bd2 <__ieee754_rem_pio2+0xea>
 8008ba4:	a38a      	add	r3, pc, #552	; (adr r3, 8008dd0 <__ieee754_rem_pio2+0x2e8>)
 8008ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008baa:	f7f7 fb77 	bl	800029c <__adddf3>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	e9c4 2300 	strd	r2, r3, [r4]
 8008bb6:	4630      	mov	r0, r6
 8008bb8:	4639      	mov	r1, r7
 8008bba:	f7f7 fb6d 	bl	8000298 <__aeabi_dsub>
 8008bbe:	a384      	add	r3, pc, #528	; (adr r3, 8008dd0 <__ieee754_rem_pio2+0x2e8>)
 8008bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc4:	f7f7 fb6a 	bl	800029c <__adddf3>
 8008bc8:	f04f 35ff 	mov.w	r5, #4294967295
 8008bcc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008bd0:	e7c6      	b.n	8008b60 <__ieee754_rem_pio2+0x78>
 8008bd2:	a381      	add	r3, pc, #516	; (adr r3, 8008dd8 <__ieee754_rem_pio2+0x2f0>)
 8008bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd8:	f7f7 fb60 	bl	800029c <__adddf3>
 8008bdc:	a380      	add	r3, pc, #512	; (adr r3, 8008de0 <__ieee754_rem_pio2+0x2f8>)
 8008bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be2:	4606      	mov	r6, r0
 8008be4:	460f      	mov	r7, r1
 8008be6:	f7f7 fb59 	bl	800029c <__adddf3>
 8008bea:	4602      	mov	r2, r0
 8008bec:	460b      	mov	r3, r1
 8008bee:	e9c4 2300 	strd	r2, r3, [r4]
 8008bf2:	4630      	mov	r0, r6
 8008bf4:	4639      	mov	r1, r7
 8008bf6:	f7f7 fb4f 	bl	8000298 <__aeabi_dsub>
 8008bfa:	a379      	add	r3, pc, #484	; (adr r3, 8008de0 <__ieee754_rem_pio2+0x2f8>)
 8008bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c00:	e7e0      	b.n	8008bc4 <__ieee754_rem_pio2+0xdc>
 8008c02:	4b82      	ldr	r3, [pc, #520]	; (8008e0c <__ieee754_rem_pio2+0x324>)
 8008c04:	4598      	cmp	r8, r3
 8008c06:	f300 80d0 	bgt.w	8008daa <__ieee754_rem_pio2+0x2c2>
 8008c0a:	f000 fe23 	bl	8009854 <fabs>
 8008c0e:	ec57 6b10 	vmov	r6, r7, d0
 8008c12:	ee10 0a10 	vmov	r0, s0
 8008c16:	a374      	add	r3, pc, #464	; (adr r3, 8008de8 <__ieee754_rem_pio2+0x300>)
 8008c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1c:	4639      	mov	r1, r7
 8008c1e:	f7f7 fcf3 	bl	8000608 <__aeabi_dmul>
 8008c22:	2200      	movs	r2, #0
 8008c24:	4b7a      	ldr	r3, [pc, #488]	; (8008e10 <__ieee754_rem_pio2+0x328>)
 8008c26:	f7f7 fb39 	bl	800029c <__adddf3>
 8008c2a:	f7f7 ff9d 	bl	8000b68 <__aeabi_d2iz>
 8008c2e:	4605      	mov	r5, r0
 8008c30:	f7f7 fc80 	bl	8000534 <__aeabi_i2d>
 8008c34:	a364      	add	r3, pc, #400	; (adr r3, 8008dc8 <__ieee754_rem_pio2+0x2e0>)
 8008c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c3e:	f7f7 fce3 	bl	8000608 <__aeabi_dmul>
 8008c42:	4602      	mov	r2, r0
 8008c44:	460b      	mov	r3, r1
 8008c46:	4630      	mov	r0, r6
 8008c48:	4639      	mov	r1, r7
 8008c4a:	f7f7 fb25 	bl	8000298 <__aeabi_dsub>
 8008c4e:	a360      	add	r3, pc, #384	; (adr r3, 8008dd0 <__ieee754_rem_pio2+0x2e8>)
 8008c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c54:	4682      	mov	sl, r0
 8008c56:	468b      	mov	fp, r1
 8008c58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c5c:	f7f7 fcd4 	bl	8000608 <__aeabi_dmul>
 8008c60:	2d1f      	cmp	r5, #31
 8008c62:	4606      	mov	r6, r0
 8008c64:	460f      	mov	r7, r1
 8008c66:	dc0c      	bgt.n	8008c82 <__ieee754_rem_pio2+0x19a>
 8008c68:	1e6a      	subs	r2, r5, #1
 8008c6a:	4b6a      	ldr	r3, [pc, #424]	; (8008e14 <__ieee754_rem_pio2+0x32c>)
 8008c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c70:	4543      	cmp	r3, r8
 8008c72:	d006      	beq.n	8008c82 <__ieee754_rem_pio2+0x19a>
 8008c74:	4632      	mov	r2, r6
 8008c76:	463b      	mov	r3, r7
 8008c78:	4650      	mov	r0, sl
 8008c7a:	4659      	mov	r1, fp
 8008c7c:	f7f7 fb0c 	bl	8000298 <__aeabi_dsub>
 8008c80:	e00e      	b.n	8008ca0 <__ieee754_rem_pio2+0x1b8>
 8008c82:	4632      	mov	r2, r6
 8008c84:	463b      	mov	r3, r7
 8008c86:	4650      	mov	r0, sl
 8008c88:	4659      	mov	r1, fp
 8008c8a:	f7f7 fb05 	bl	8000298 <__aeabi_dsub>
 8008c8e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008c92:	9305      	str	r3, [sp, #20]
 8008c94:	9a05      	ldr	r2, [sp, #20]
 8008c96:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008c9a:	1ad3      	subs	r3, r2, r3
 8008c9c:	2b10      	cmp	r3, #16
 8008c9e:	dc02      	bgt.n	8008ca6 <__ieee754_rem_pio2+0x1be>
 8008ca0:	e9c4 0100 	strd	r0, r1, [r4]
 8008ca4:	e039      	b.n	8008d1a <__ieee754_rem_pio2+0x232>
 8008ca6:	a34c      	add	r3, pc, #304	; (adr r3, 8008dd8 <__ieee754_rem_pio2+0x2f0>)
 8008ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cb0:	f7f7 fcaa 	bl	8000608 <__aeabi_dmul>
 8008cb4:	4606      	mov	r6, r0
 8008cb6:	460f      	mov	r7, r1
 8008cb8:	4602      	mov	r2, r0
 8008cba:	460b      	mov	r3, r1
 8008cbc:	4650      	mov	r0, sl
 8008cbe:	4659      	mov	r1, fp
 8008cc0:	f7f7 faea 	bl	8000298 <__aeabi_dsub>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	4680      	mov	r8, r0
 8008cca:	4689      	mov	r9, r1
 8008ccc:	4650      	mov	r0, sl
 8008cce:	4659      	mov	r1, fp
 8008cd0:	f7f7 fae2 	bl	8000298 <__aeabi_dsub>
 8008cd4:	4632      	mov	r2, r6
 8008cd6:	463b      	mov	r3, r7
 8008cd8:	f7f7 fade 	bl	8000298 <__aeabi_dsub>
 8008cdc:	a340      	add	r3, pc, #256	; (adr r3, 8008de0 <__ieee754_rem_pio2+0x2f8>)
 8008cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce2:	4606      	mov	r6, r0
 8008ce4:	460f      	mov	r7, r1
 8008ce6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cea:	f7f7 fc8d 	bl	8000608 <__aeabi_dmul>
 8008cee:	4632      	mov	r2, r6
 8008cf0:	463b      	mov	r3, r7
 8008cf2:	f7f7 fad1 	bl	8000298 <__aeabi_dsub>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	4606      	mov	r6, r0
 8008cfc:	460f      	mov	r7, r1
 8008cfe:	4640      	mov	r0, r8
 8008d00:	4649      	mov	r1, r9
 8008d02:	f7f7 fac9 	bl	8000298 <__aeabi_dsub>
 8008d06:	9a05      	ldr	r2, [sp, #20]
 8008d08:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008d0c:	1ad3      	subs	r3, r2, r3
 8008d0e:	2b31      	cmp	r3, #49	; 0x31
 8008d10:	dc20      	bgt.n	8008d54 <__ieee754_rem_pio2+0x26c>
 8008d12:	e9c4 0100 	strd	r0, r1, [r4]
 8008d16:	46c2      	mov	sl, r8
 8008d18:	46cb      	mov	fp, r9
 8008d1a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008d1e:	4650      	mov	r0, sl
 8008d20:	4642      	mov	r2, r8
 8008d22:	464b      	mov	r3, r9
 8008d24:	4659      	mov	r1, fp
 8008d26:	f7f7 fab7 	bl	8000298 <__aeabi_dsub>
 8008d2a:	463b      	mov	r3, r7
 8008d2c:	4632      	mov	r2, r6
 8008d2e:	f7f7 fab3 	bl	8000298 <__aeabi_dsub>
 8008d32:	9b04      	ldr	r3, [sp, #16]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008d3a:	f6bf af11 	bge.w	8008b60 <__ieee754_rem_pio2+0x78>
 8008d3e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008d42:	6063      	str	r3, [r4, #4]
 8008d44:	f8c4 8000 	str.w	r8, [r4]
 8008d48:	60a0      	str	r0, [r4, #8]
 8008d4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d4e:	60e3      	str	r3, [r4, #12]
 8008d50:	426d      	negs	r5, r5
 8008d52:	e705      	b.n	8008b60 <__ieee754_rem_pio2+0x78>
 8008d54:	a326      	add	r3, pc, #152	; (adr r3, 8008df0 <__ieee754_rem_pio2+0x308>)
 8008d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d5e:	f7f7 fc53 	bl	8000608 <__aeabi_dmul>
 8008d62:	4606      	mov	r6, r0
 8008d64:	460f      	mov	r7, r1
 8008d66:	4602      	mov	r2, r0
 8008d68:	460b      	mov	r3, r1
 8008d6a:	4640      	mov	r0, r8
 8008d6c:	4649      	mov	r1, r9
 8008d6e:	f7f7 fa93 	bl	8000298 <__aeabi_dsub>
 8008d72:	4602      	mov	r2, r0
 8008d74:	460b      	mov	r3, r1
 8008d76:	4682      	mov	sl, r0
 8008d78:	468b      	mov	fp, r1
 8008d7a:	4640      	mov	r0, r8
 8008d7c:	4649      	mov	r1, r9
 8008d7e:	f7f7 fa8b 	bl	8000298 <__aeabi_dsub>
 8008d82:	4632      	mov	r2, r6
 8008d84:	463b      	mov	r3, r7
 8008d86:	f7f7 fa87 	bl	8000298 <__aeabi_dsub>
 8008d8a:	a31b      	add	r3, pc, #108	; (adr r3, 8008df8 <__ieee754_rem_pio2+0x310>)
 8008d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d90:	4606      	mov	r6, r0
 8008d92:	460f      	mov	r7, r1
 8008d94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d98:	f7f7 fc36 	bl	8000608 <__aeabi_dmul>
 8008d9c:	4632      	mov	r2, r6
 8008d9e:	463b      	mov	r3, r7
 8008da0:	f7f7 fa7a 	bl	8000298 <__aeabi_dsub>
 8008da4:	4606      	mov	r6, r0
 8008da6:	460f      	mov	r7, r1
 8008da8:	e764      	b.n	8008c74 <__ieee754_rem_pio2+0x18c>
 8008daa:	4b1b      	ldr	r3, [pc, #108]	; (8008e18 <__ieee754_rem_pio2+0x330>)
 8008dac:	4598      	cmp	r8, r3
 8008dae:	dd35      	ble.n	8008e1c <__ieee754_rem_pio2+0x334>
 8008db0:	ee10 2a10 	vmov	r2, s0
 8008db4:	463b      	mov	r3, r7
 8008db6:	4630      	mov	r0, r6
 8008db8:	4639      	mov	r1, r7
 8008dba:	f7f7 fa6d 	bl	8000298 <__aeabi_dsub>
 8008dbe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008dc2:	e9c4 0100 	strd	r0, r1, [r4]
 8008dc6:	e6a1      	b.n	8008b0c <__ieee754_rem_pio2+0x24>
 8008dc8:	54400000 	.word	0x54400000
 8008dcc:	3ff921fb 	.word	0x3ff921fb
 8008dd0:	1a626331 	.word	0x1a626331
 8008dd4:	3dd0b461 	.word	0x3dd0b461
 8008dd8:	1a600000 	.word	0x1a600000
 8008ddc:	3dd0b461 	.word	0x3dd0b461
 8008de0:	2e037073 	.word	0x2e037073
 8008de4:	3ba3198a 	.word	0x3ba3198a
 8008de8:	6dc9c883 	.word	0x6dc9c883
 8008dec:	3fe45f30 	.word	0x3fe45f30
 8008df0:	2e000000 	.word	0x2e000000
 8008df4:	3ba3198a 	.word	0x3ba3198a
 8008df8:	252049c1 	.word	0x252049c1
 8008dfc:	397b839a 	.word	0x397b839a
 8008e00:	3fe921fb 	.word	0x3fe921fb
 8008e04:	4002d97b 	.word	0x4002d97b
 8008e08:	3ff921fb 	.word	0x3ff921fb
 8008e0c:	413921fb 	.word	0x413921fb
 8008e10:	3fe00000 	.word	0x3fe00000
 8008e14:	08009d70 	.word	0x08009d70
 8008e18:	7fefffff 	.word	0x7fefffff
 8008e1c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8008e20:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8008e24:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8008e28:	4630      	mov	r0, r6
 8008e2a:	460f      	mov	r7, r1
 8008e2c:	f7f7 fe9c 	bl	8000b68 <__aeabi_d2iz>
 8008e30:	f7f7 fb80 	bl	8000534 <__aeabi_i2d>
 8008e34:	4602      	mov	r2, r0
 8008e36:	460b      	mov	r3, r1
 8008e38:	4630      	mov	r0, r6
 8008e3a:	4639      	mov	r1, r7
 8008e3c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008e40:	f7f7 fa2a 	bl	8000298 <__aeabi_dsub>
 8008e44:	2200      	movs	r2, #0
 8008e46:	4b1f      	ldr	r3, [pc, #124]	; (8008ec4 <__ieee754_rem_pio2+0x3dc>)
 8008e48:	f7f7 fbde 	bl	8000608 <__aeabi_dmul>
 8008e4c:	460f      	mov	r7, r1
 8008e4e:	4606      	mov	r6, r0
 8008e50:	f7f7 fe8a 	bl	8000b68 <__aeabi_d2iz>
 8008e54:	f7f7 fb6e 	bl	8000534 <__aeabi_i2d>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	460b      	mov	r3, r1
 8008e5c:	4630      	mov	r0, r6
 8008e5e:	4639      	mov	r1, r7
 8008e60:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008e64:	f7f7 fa18 	bl	8000298 <__aeabi_dsub>
 8008e68:	2200      	movs	r2, #0
 8008e6a:	4b16      	ldr	r3, [pc, #88]	; (8008ec4 <__ieee754_rem_pio2+0x3dc>)
 8008e6c:	f7f7 fbcc 	bl	8000608 <__aeabi_dmul>
 8008e70:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008e74:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8008e78:	f04f 0803 	mov.w	r8, #3
 8008e7c:	2600      	movs	r6, #0
 8008e7e:	2700      	movs	r7, #0
 8008e80:	4632      	mov	r2, r6
 8008e82:	463b      	mov	r3, r7
 8008e84:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8008e88:	f108 3aff 	add.w	sl, r8, #4294967295
 8008e8c:	f7f7 fe24 	bl	8000ad8 <__aeabi_dcmpeq>
 8008e90:	b9b0      	cbnz	r0, 8008ec0 <__ieee754_rem_pio2+0x3d8>
 8008e92:	4b0d      	ldr	r3, [pc, #52]	; (8008ec8 <__ieee754_rem_pio2+0x3e0>)
 8008e94:	9301      	str	r3, [sp, #4]
 8008e96:	2302      	movs	r3, #2
 8008e98:	9300      	str	r3, [sp, #0]
 8008e9a:	462a      	mov	r2, r5
 8008e9c:	4643      	mov	r3, r8
 8008e9e:	4621      	mov	r1, r4
 8008ea0:	a806      	add	r0, sp, #24
 8008ea2:	f000 f8dd 	bl	8009060 <__kernel_rem_pio2>
 8008ea6:	9b04      	ldr	r3, [sp, #16]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	4605      	mov	r5, r0
 8008eac:	f6bf ae58 	bge.w	8008b60 <__ieee754_rem_pio2+0x78>
 8008eb0:	6863      	ldr	r3, [r4, #4]
 8008eb2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008eb6:	6063      	str	r3, [r4, #4]
 8008eb8:	68e3      	ldr	r3, [r4, #12]
 8008eba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008ebe:	e746      	b.n	8008d4e <__ieee754_rem_pio2+0x266>
 8008ec0:	46d0      	mov	r8, sl
 8008ec2:	e7dd      	b.n	8008e80 <__ieee754_rem_pio2+0x398>
 8008ec4:	41700000 	.word	0x41700000
 8008ec8:	08009df0 	.word	0x08009df0
 8008ecc:	00000000 	.word	0x00000000

08008ed0 <__kernel_cos>:
 8008ed0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ed4:	ec59 8b10 	vmov	r8, r9, d0
 8008ed8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8008edc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8008ee0:	ed2d 8b02 	vpush	{d8}
 8008ee4:	eeb0 8a41 	vmov.f32	s16, s2
 8008ee8:	eef0 8a61 	vmov.f32	s17, s3
 8008eec:	da07      	bge.n	8008efe <__kernel_cos+0x2e>
 8008eee:	ee10 0a10 	vmov	r0, s0
 8008ef2:	4649      	mov	r1, r9
 8008ef4:	f7f7 fe38 	bl	8000b68 <__aeabi_d2iz>
 8008ef8:	2800      	cmp	r0, #0
 8008efa:	f000 8089 	beq.w	8009010 <__kernel_cos+0x140>
 8008efe:	4642      	mov	r2, r8
 8008f00:	464b      	mov	r3, r9
 8008f02:	4640      	mov	r0, r8
 8008f04:	4649      	mov	r1, r9
 8008f06:	f7f7 fb7f 	bl	8000608 <__aeabi_dmul>
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	4b4e      	ldr	r3, [pc, #312]	; (8009048 <__kernel_cos+0x178>)
 8008f0e:	4604      	mov	r4, r0
 8008f10:	460d      	mov	r5, r1
 8008f12:	f7f7 fb79 	bl	8000608 <__aeabi_dmul>
 8008f16:	a340      	add	r3, pc, #256	; (adr r3, 8009018 <__kernel_cos+0x148>)
 8008f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f1c:	4682      	mov	sl, r0
 8008f1e:	468b      	mov	fp, r1
 8008f20:	4620      	mov	r0, r4
 8008f22:	4629      	mov	r1, r5
 8008f24:	f7f7 fb70 	bl	8000608 <__aeabi_dmul>
 8008f28:	a33d      	add	r3, pc, #244	; (adr r3, 8009020 <__kernel_cos+0x150>)
 8008f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f2e:	f7f7 f9b5 	bl	800029c <__adddf3>
 8008f32:	4622      	mov	r2, r4
 8008f34:	462b      	mov	r3, r5
 8008f36:	f7f7 fb67 	bl	8000608 <__aeabi_dmul>
 8008f3a:	a33b      	add	r3, pc, #236	; (adr r3, 8009028 <__kernel_cos+0x158>)
 8008f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f40:	f7f7 f9aa 	bl	8000298 <__aeabi_dsub>
 8008f44:	4622      	mov	r2, r4
 8008f46:	462b      	mov	r3, r5
 8008f48:	f7f7 fb5e 	bl	8000608 <__aeabi_dmul>
 8008f4c:	a338      	add	r3, pc, #224	; (adr r3, 8009030 <__kernel_cos+0x160>)
 8008f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f52:	f7f7 f9a3 	bl	800029c <__adddf3>
 8008f56:	4622      	mov	r2, r4
 8008f58:	462b      	mov	r3, r5
 8008f5a:	f7f7 fb55 	bl	8000608 <__aeabi_dmul>
 8008f5e:	a336      	add	r3, pc, #216	; (adr r3, 8009038 <__kernel_cos+0x168>)
 8008f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f64:	f7f7 f998 	bl	8000298 <__aeabi_dsub>
 8008f68:	4622      	mov	r2, r4
 8008f6a:	462b      	mov	r3, r5
 8008f6c:	f7f7 fb4c 	bl	8000608 <__aeabi_dmul>
 8008f70:	a333      	add	r3, pc, #204	; (adr r3, 8009040 <__kernel_cos+0x170>)
 8008f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f76:	f7f7 f991 	bl	800029c <__adddf3>
 8008f7a:	4622      	mov	r2, r4
 8008f7c:	462b      	mov	r3, r5
 8008f7e:	f7f7 fb43 	bl	8000608 <__aeabi_dmul>
 8008f82:	4622      	mov	r2, r4
 8008f84:	462b      	mov	r3, r5
 8008f86:	f7f7 fb3f 	bl	8000608 <__aeabi_dmul>
 8008f8a:	ec53 2b18 	vmov	r2, r3, d8
 8008f8e:	4604      	mov	r4, r0
 8008f90:	460d      	mov	r5, r1
 8008f92:	4640      	mov	r0, r8
 8008f94:	4649      	mov	r1, r9
 8008f96:	f7f7 fb37 	bl	8000608 <__aeabi_dmul>
 8008f9a:	460b      	mov	r3, r1
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	4629      	mov	r1, r5
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	f7f7 f979 	bl	8000298 <__aeabi_dsub>
 8008fa6:	4b29      	ldr	r3, [pc, #164]	; (800904c <__kernel_cos+0x17c>)
 8008fa8:	429e      	cmp	r6, r3
 8008faa:	4680      	mov	r8, r0
 8008fac:	4689      	mov	r9, r1
 8008fae:	dc11      	bgt.n	8008fd4 <__kernel_cos+0x104>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	4650      	mov	r0, sl
 8008fb6:	4659      	mov	r1, fp
 8008fb8:	f7f7 f96e 	bl	8000298 <__aeabi_dsub>
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	4924      	ldr	r1, [pc, #144]	; (8009050 <__kernel_cos+0x180>)
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	2000      	movs	r0, #0
 8008fc4:	f7f7 f968 	bl	8000298 <__aeabi_dsub>
 8008fc8:	ecbd 8b02 	vpop	{d8}
 8008fcc:	ec41 0b10 	vmov	d0, r0, r1
 8008fd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fd4:	4b1f      	ldr	r3, [pc, #124]	; (8009054 <__kernel_cos+0x184>)
 8008fd6:	491e      	ldr	r1, [pc, #120]	; (8009050 <__kernel_cos+0x180>)
 8008fd8:	429e      	cmp	r6, r3
 8008fda:	bfcc      	ite	gt
 8008fdc:	4d1e      	ldrgt	r5, [pc, #120]	; (8009058 <__kernel_cos+0x188>)
 8008fde:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8008fe2:	2400      	movs	r4, #0
 8008fe4:	4622      	mov	r2, r4
 8008fe6:	462b      	mov	r3, r5
 8008fe8:	2000      	movs	r0, #0
 8008fea:	f7f7 f955 	bl	8000298 <__aeabi_dsub>
 8008fee:	4622      	mov	r2, r4
 8008ff0:	4606      	mov	r6, r0
 8008ff2:	460f      	mov	r7, r1
 8008ff4:	462b      	mov	r3, r5
 8008ff6:	4650      	mov	r0, sl
 8008ff8:	4659      	mov	r1, fp
 8008ffa:	f7f7 f94d 	bl	8000298 <__aeabi_dsub>
 8008ffe:	4642      	mov	r2, r8
 8009000:	464b      	mov	r3, r9
 8009002:	f7f7 f949 	bl	8000298 <__aeabi_dsub>
 8009006:	4602      	mov	r2, r0
 8009008:	460b      	mov	r3, r1
 800900a:	4630      	mov	r0, r6
 800900c:	4639      	mov	r1, r7
 800900e:	e7d9      	b.n	8008fc4 <__kernel_cos+0xf4>
 8009010:	2000      	movs	r0, #0
 8009012:	490f      	ldr	r1, [pc, #60]	; (8009050 <__kernel_cos+0x180>)
 8009014:	e7d8      	b.n	8008fc8 <__kernel_cos+0xf8>
 8009016:	bf00      	nop
 8009018:	be8838d4 	.word	0xbe8838d4
 800901c:	bda8fae9 	.word	0xbda8fae9
 8009020:	bdb4b1c4 	.word	0xbdb4b1c4
 8009024:	3e21ee9e 	.word	0x3e21ee9e
 8009028:	809c52ad 	.word	0x809c52ad
 800902c:	3e927e4f 	.word	0x3e927e4f
 8009030:	19cb1590 	.word	0x19cb1590
 8009034:	3efa01a0 	.word	0x3efa01a0
 8009038:	16c15177 	.word	0x16c15177
 800903c:	3f56c16c 	.word	0x3f56c16c
 8009040:	5555554c 	.word	0x5555554c
 8009044:	3fa55555 	.word	0x3fa55555
 8009048:	3fe00000 	.word	0x3fe00000
 800904c:	3fd33332 	.word	0x3fd33332
 8009050:	3ff00000 	.word	0x3ff00000
 8009054:	3fe90000 	.word	0x3fe90000
 8009058:	3fd20000 	.word	0x3fd20000
 800905c:	00000000 	.word	0x00000000

08009060 <__kernel_rem_pio2>:
 8009060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009064:	ed2d 8b02 	vpush	{d8}
 8009068:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800906c:	1ed4      	subs	r4, r2, #3
 800906e:	9308      	str	r3, [sp, #32]
 8009070:	9101      	str	r1, [sp, #4]
 8009072:	4bc5      	ldr	r3, [pc, #788]	; (8009388 <__kernel_rem_pio2+0x328>)
 8009074:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8009076:	9009      	str	r0, [sp, #36]	; 0x24
 8009078:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800907c:	9304      	str	r3, [sp, #16]
 800907e:	9b08      	ldr	r3, [sp, #32]
 8009080:	3b01      	subs	r3, #1
 8009082:	9307      	str	r3, [sp, #28]
 8009084:	2318      	movs	r3, #24
 8009086:	fb94 f4f3 	sdiv	r4, r4, r3
 800908a:	f06f 0317 	mvn.w	r3, #23
 800908e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8009092:	fb04 3303 	mla	r3, r4, r3, r3
 8009096:	eb03 0a02 	add.w	sl, r3, r2
 800909a:	9b04      	ldr	r3, [sp, #16]
 800909c:	9a07      	ldr	r2, [sp, #28]
 800909e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8009378 <__kernel_rem_pio2+0x318>
 80090a2:	eb03 0802 	add.w	r8, r3, r2
 80090a6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80090a8:	1aa7      	subs	r7, r4, r2
 80090aa:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80090ae:	ae22      	add	r6, sp, #136	; 0x88
 80090b0:	2500      	movs	r5, #0
 80090b2:	4545      	cmp	r5, r8
 80090b4:	dd13      	ble.n	80090de <__kernel_rem_pio2+0x7e>
 80090b6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8009378 <__kernel_rem_pio2+0x318>
 80090ba:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80090be:	2600      	movs	r6, #0
 80090c0:	9b04      	ldr	r3, [sp, #16]
 80090c2:	429e      	cmp	r6, r3
 80090c4:	dc32      	bgt.n	800912c <__kernel_rem_pio2+0xcc>
 80090c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090c8:	9302      	str	r3, [sp, #8]
 80090ca:	9b08      	ldr	r3, [sp, #32]
 80090cc:	199d      	adds	r5, r3, r6
 80090ce:	ab22      	add	r3, sp, #136	; 0x88
 80090d0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80090d4:	9306      	str	r3, [sp, #24]
 80090d6:	ec59 8b18 	vmov	r8, r9, d8
 80090da:	2700      	movs	r7, #0
 80090dc:	e01f      	b.n	800911e <__kernel_rem_pio2+0xbe>
 80090de:	42ef      	cmn	r7, r5
 80090e0:	d407      	bmi.n	80090f2 <__kernel_rem_pio2+0x92>
 80090e2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80090e6:	f7f7 fa25 	bl	8000534 <__aeabi_i2d>
 80090ea:	e8e6 0102 	strd	r0, r1, [r6], #8
 80090ee:	3501      	adds	r5, #1
 80090f0:	e7df      	b.n	80090b2 <__kernel_rem_pio2+0x52>
 80090f2:	ec51 0b18 	vmov	r0, r1, d8
 80090f6:	e7f8      	b.n	80090ea <__kernel_rem_pio2+0x8a>
 80090f8:	9906      	ldr	r1, [sp, #24]
 80090fa:	9d02      	ldr	r5, [sp, #8]
 80090fc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8009100:	9106      	str	r1, [sp, #24]
 8009102:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8009106:	9502      	str	r5, [sp, #8]
 8009108:	f7f7 fa7e 	bl	8000608 <__aeabi_dmul>
 800910c:	4602      	mov	r2, r0
 800910e:	460b      	mov	r3, r1
 8009110:	4640      	mov	r0, r8
 8009112:	4649      	mov	r1, r9
 8009114:	f7f7 f8c2 	bl	800029c <__adddf3>
 8009118:	3701      	adds	r7, #1
 800911a:	4680      	mov	r8, r0
 800911c:	4689      	mov	r9, r1
 800911e:	9b07      	ldr	r3, [sp, #28]
 8009120:	429f      	cmp	r7, r3
 8009122:	dde9      	ble.n	80090f8 <__kernel_rem_pio2+0x98>
 8009124:	e8eb 8902 	strd	r8, r9, [fp], #8
 8009128:	3601      	adds	r6, #1
 800912a:	e7c9      	b.n	80090c0 <__kernel_rem_pio2+0x60>
 800912c:	9b04      	ldr	r3, [sp, #16]
 800912e:	aa0e      	add	r2, sp, #56	; 0x38
 8009130:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009134:	930c      	str	r3, [sp, #48]	; 0x30
 8009136:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009138:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800913c:	9c04      	ldr	r4, [sp, #16]
 800913e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009140:	ab9a      	add	r3, sp, #616	; 0x268
 8009142:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8009146:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800914a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800914e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8009152:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8009156:	ab9a      	add	r3, sp, #616	; 0x268
 8009158:	445b      	add	r3, fp
 800915a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800915e:	2500      	movs	r5, #0
 8009160:	1b63      	subs	r3, r4, r5
 8009162:	2b00      	cmp	r3, #0
 8009164:	dc78      	bgt.n	8009258 <__kernel_rem_pio2+0x1f8>
 8009166:	4650      	mov	r0, sl
 8009168:	ec49 8b10 	vmov	d0, r8, r9
 800916c:	f000 fc00 	bl	8009970 <scalbn>
 8009170:	ec57 6b10 	vmov	r6, r7, d0
 8009174:	2200      	movs	r2, #0
 8009176:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800917a:	ee10 0a10 	vmov	r0, s0
 800917e:	4639      	mov	r1, r7
 8009180:	f7f7 fa42 	bl	8000608 <__aeabi_dmul>
 8009184:	ec41 0b10 	vmov	d0, r0, r1
 8009188:	f000 fb6e 	bl	8009868 <floor>
 800918c:	2200      	movs	r2, #0
 800918e:	ec51 0b10 	vmov	r0, r1, d0
 8009192:	4b7e      	ldr	r3, [pc, #504]	; (800938c <__kernel_rem_pio2+0x32c>)
 8009194:	f7f7 fa38 	bl	8000608 <__aeabi_dmul>
 8009198:	4602      	mov	r2, r0
 800919a:	460b      	mov	r3, r1
 800919c:	4630      	mov	r0, r6
 800919e:	4639      	mov	r1, r7
 80091a0:	f7f7 f87a 	bl	8000298 <__aeabi_dsub>
 80091a4:	460f      	mov	r7, r1
 80091a6:	4606      	mov	r6, r0
 80091a8:	f7f7 fcde 	bl	8000b68 <__aeabi_d2iz>
 80091ac:	9006      	str	r0, [sp, #24]
 80091ae:	f7f7 f9c1 	bl	8000534 <__aeabi_i2d>
 80091b2:	4602      	mov	r2, r0
 80091b4:	460b      	mov	r3, r1
 80091b6:	4630      	mov	r0, r6
 80091b8:	4639      	mov	r1, r7
 80091ba:	f7f7 f86d 	bl	8000298 <__aeabi_dsub>
 80091be:	f1ba 0f00 	cmp.w	sl, #0
 80091c2:	4606      	mov	r6, r0
 80091c4:	460f      	mov	r7, r1
 80091c6:	dd6c      	ble.n	80092a2 <__kernel_rem_pio2+0x242>
 80091c8:	1e62      	subs	r2, r4, #1
 80091ca:	ab0e      	add	r3, sp, #56	; 0x38
 80091cc:	f1ca 0118 	rsb	r1, sl, #24
 80091d0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80091d4:	9d06      	ldr	r5, [sp, #24]
 80091d6:	fa40 f301 	asr.w	r3, r0, r1
 80091da:	441d      	add	r5, r3
 80091dc:	408b      	lsls	r3, r1
 80091de:	1ac0      	subs	r0, r0, r3
 80091e0:	ab0e      	add	r3, sp, #56	; 0x38
 80091e2:	9506      	str	r5, [sp, #24]
 80091e4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80091e8:	f1ca 0317 	rsb	r3, sl, #23
 80091ec:	fa40 f303 	asr.w	r3, r0, r3
 80091f0:	9302      	str	r3, [sp, #8]
 80091f2:	9b02      	ldr	r3, [sp, #8]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	dd62      	ble.n	80092be <__kernel_rem_pio2+0x25e>
 80091f8:	9b06      	ldr	r3, [sp, #24]
 80091fa:	2200      	movs	r2, #0
 80091fc:	3301      	adds	r3, #1
 80091fe:	9306      	str	r3, [sp, #24]
 8009200:	4615      	mov	r5, r2
 8009202:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009206:	4294      	cmp	r4, r2
 8009208:	f300 8095 	bgt.w	8009336 <__kernel_rem_pio2+0x2d6>
 800920c:	f1ba 0f00 	cmp.w	sl, #0
 8009210:	dd07      	ble.n	8009222 <__kernel_rem_pio2+0x1c2>
 8009212:	f1ba 0f01 	cmp.w	sl, #1
 8009216:	f000 80a2 	beq.w	800935e <__kernel_rem_pio2+0x2fe>
 800921a:	f1ba 0f02 	cmp.w	sl, #2
 800921e:	f000 80c1 	beq.w	80093a4 <__kernel_rem_pio2+0x344>
 8009222:	9b02      	ldr	r3, [sp, #8]
 8009224:	2b02      	cmp	r3, #2
 8009226:	d14a      	bne.n	80092be <__kernel_rem_pio2+0x25e>
 8009228:	4632      	mov	r2, r6
 800922a:	463b      	mov	r3, r7
 800922c:	2000      	movs	r0, #0
 800922e:	4958      	ldr	r1, [pc, #352]	; (8009390 <__kernel_rem_pio2+0x330>)
 8009230:	f7f7 f832 	bl	8000298 <__aeabi_dsub>
 8009234:	4606      	mov	r6, r0
 8009236:	460f      	mov	r7, r1
 8009238:	2d00      	cmp	r5, #0
 800923a:	d040      	beq.n	80092be <__kernel_rem_pio2+0x25e>
 800923c:	4650      	mov	r0, sl
 800923e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8009380 <__kernel_rem_pio2+0x320>
 8009242:	f000 fb95 	bl	8009970 <scalbn>
 8009246:	4630      	mov	r0, r6
 8009248:	4639      	mov	r1, r7
 800924a:	ec53 2b10 	vmov	r2, r3, d0
 800924e:	f7f7 f823 	bl	8000298 <__aeabi_dsub>
 8009252:	4606      	mov	r6, r0
 8009254:	460f      	mov	r7, r1
 8009256:	e032      	b.n	80092be <__kernel_rem_pio2+0x25e>
 8009258:	2200      	movs	r2, #0
 800925a:	4b4e      	ldr	r3, [pc, #312]	; (8009394 <__kernel_rem_pio2+0x334>)
 800925c:	4640      	mov	r0, r8
 800925e:	4649      	mov	r1, r9
 8009260:	f7f7 f9d2 	bl	8000608 <__aeabi_dmul>
 8009264:	f7f7 fc80 	bl	8000b68 <__aeabi_d2iz>
 8009268:	f7f7 f964 	bl	8000534 <__aeabi_i2d>
 800926c:	2200      	movs	r2, #0
 800926e:	4b4a      	ldr	r3, [pc, #296]	; (8009398 <__kernel_rem_pio2+0x338>)
 8009270:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009274:	f7f7 f9c8 	bl	8000608 <__aeabi_dmul>
 8009278:	4602      	mov	r2, r0
 800927a:	460b      	mov	r3, r1
 800927c:	4640      	mov	r0, r8
 800927e:	4649      	mov	r1, r9
 8009280:	f7f7 f80a 	bl	8000298 <__aeabi_dsub>
 8009284:	f7f7 fc70 	bl	8000b68 <__aeabi_d2iz>
 8009288:	ab0e      	add	r3, sp, #56	; 0x38
 800928a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800928e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8009292:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009296:	f7f7 f801 	bl	800029c <__adddf3>
 800929a:	3501      	adds	r5, #1
 800929c:	4680      	mov	r8, r0
 800929e:	4689      	mov	r9, r1
 80092a0:	e75e      	b.n	8009160 <__kernel_rem_pio2+0x100>
 80092a2:	d105      	bne.n	80092b0 <__kernel_rem_pio2+0x250>
 80092a4:	1e63      	subs	r3, r4, #1
 80092a6:	aa0e      	add	r2, sp, #56	; 0x38
 80092a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80092ac:	15c3      	asrs	r3, r0, #23
 80092ae:	e79f      	b.n	80091f0 <__kernel_rem_pio2+0x190>
 80092b0:	2200      	movs	r2, #0
 80092b2:	4b3a      	ldr	r3, [pc, #232]	; (800939c <__kernel_rem_pio2+0x33c>)
 80092b4:	f7f7 fc2e 	bl	8000b14 <__aeabi_dcmpge>
 80092b8:	2800      	cmp	r0, #0
 80092ba:	d139      	bne.n	8009330 <__kernel_rem_pio2+0x2d0>
 80092bc:	9002      	str	r0, [sp, #8]
 80092be:	2200      	movs	r2, #0
 80092c0:	2300      	movs	r3, #0
 80092c2:	4630      	mov	r0, r6
 80092c4:	4639      	mov	r1, r7
 80092c6:	f7f7 fc07 	bl	8000ad8 <__aeabi_dcmpeq>
 80092ca:	2800      	cmp	r0, #0
 80092cc:	f000 80c7 	beq.w	800945e <__kernel_rem_pio2+0x3fe>
 80092d0:	1e65      	subs	r5, r4, #1
 80092d2:	462b      	mov	r3, r5
 80092d4:	2200      	movs	r2, #0
 80092d6:	9904      	ldr	r1, [sp, #16]
 80092d8:	428b      	cmp	r3, r1
 80092da:	da6a      	bge.n	80093b2 <__kernel_rem_pio2+0x352>
 80092dc:	2a00      	cmp	r2, #0
 80092de:	f000 8088 	beq.w	80093f2 <__kernel_rem_pio2+0x392>
 80092e2:	ab0e      	add	r3, sp, #56	; 0x38
 80092e4:	f1aa 0a18 	sub.w	sl, sl, #24
 80092e8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	f000 80b4 	beq.w	800945a <__kernel_rem_pio2+0x3fa>
 80092f2:	4650      	mov	r0, sl
 80092f4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8009380 <__kernel_rem_pio2+0x320>
 80092f8:	f000 fb3a 	bl	8009970 <scalbn>
 80092fc:	00ec      	lsls	r4, r5, #3
 80092fe:	ab72      	add	r3, sp, #456	; 0x1c8
 8009300:	191e      	adds	r6, r3, r4
 8009302:	ec59 8b10 	vmov	r8, r9, d0
 8009306:	f106 0a08 	add.w	sl, r6, #8
 800930a:	462f      	mov	r7, r5
 800930c:	2f00      	cmp	r7, #0
 800930e:	f280 80df 	bge.w	80094d0 <__kernel_rem_pio2+0x470>
 8009312:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8009378 <__kernel_rem_pio2+0x318>
 8009316:	f04f 0a00 	mov.w	sl, #0
 800931a:	eba5 030a 	sub.w	r3, r5, sl
 800931e:	2b00      	cmp	r3, #0
 8009320:	f2c0 810a 	blt.w	8009538 <__kernel_rem_pio2+0x4d8>
 8009324:	f8df b078 	ldr.w	fp, [pc, #120]	; 80093a0 <__kernel_rem_pio2+0x340>
 8009328:	ec59 8b18 	vmov	r8, r9, d8
 800932c:	2700      	movs	r7, #0
 800932e:	e0f5      	b.n	800951c <__kernel_rem_pio2+0x4bc>
 8009330:	2302      	movs	r3, #2
 8009332:	9302      	str	r3, [sp, #8]
 8009334:	e760      	b.n	80091f8 <__kernel_rem_pio2+0x198>
 8009336:	ab0e      	add	r3, sp, #56	; 0x38
 8009338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800933c:	b94d      	cbnz	r5, 8009352 <__kernel_rem_pio2+0x2f2>
 800933e:	b12b      	cbz	r3, 800934c <__kernel_rem_pio2+0x2ec>
 8009340:	a80e      	add	r0, sp, #56	; 0x38
 8009342:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009346:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800934a:	2301      	movs	r3, #1
 800934c:	3201      	adds	r2, #1
 800934e:	461d      	mov	r5, r3
 8009350:	e759      	b.n	8009206 <__kernel_rem_pio2+0x1a6>
 8009352:	a80e      	add	r0, sp, #56	; 0x38
 8009354:	1acb      	subs	r3, r1, r3
 8009356:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800935a:	462b      	mov	r3, r5
 800935c:	e7f6      	b.n	800934c <__kernel_rem_pio2+0x2ec>
 800935e:	1e62      	subs	r2, r4, #1
 8009360:	ab0e      	add	r3, sp, #56	; 0x38
 8009362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009366:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800936a:	a90e      	add	r1, sp, #56	; 0x38
 800936c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009370:	e757      	b.n	8009222 <__kernel_rem_pio2+0x1c2>
 8009372:	bf00      	nop
 8009374:	f3af 8000 	nop.w
	...
 8009384:	3ff00000 	.word	0x3ff00000
 8009388:	08009f38 	.word	0x08009f38
 800938c:	40200000 	.word	0x40200000
 8009390:	3ff00000 	.word	0x3ff00000
 8009394:	3e700000 	.word	0x3e700000
 8009398:	41700000 	.word	0x41700000
 800939c:	3fe00000 	.word	0x3fe00000
 80093a0:	08009ef8 	.word	0x08009ef8
 80093a4:	1e62      	subs	r2, r4, #1
 80093a6:	ab0e      	add	r3, sp, #56	; 0x38
 80093a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093ac:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80093b0:	e7db      	b.n	800936a <__kernel_rem_pio2+0x30a>
 80093b2:	a90e      	add	r1, sp, #56	; 0x38
 80093b4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80093b8:	3b01      	subs	r3, #1
 80093ba:	430a      	orrs	r2, r1
 80093bc:	e78b      	b.n	80092d6 <__kernel_rem_pio2+0x276>
 80093be:	3301      	adds	r3, #1
 80093c0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80093c4:	2900      	cmp	r1, #0
 80093c6:	d0fa      	beq.n	80093be <__kernel_rem_pio2+0x35e>
 80093c8:	9a08      	ldr	r2, [sp, #32]
 80093ca:	4422      	add	r2, r4
 80093cc:	00d2      	lsls	r2, r2, #3
 80093ce:	a922      	add	r1, sp, #136	; 0x88
 80093d0:	18e3      	adds	r3, r4, r3
 80093d2:	9206      	str	r2, [sp, #24]
 80093d4:	440a      	add	r2, r1
 80093d6:	9302      	str	r3, [sp, #8]
 80093d8:	f10b 0108 	add.w	r1, fp, #8
 80093dc:	f102 0308 	add.w	r3, r2, #8
 80093e0:	1c66      	adds	r6, r4, #1
 80093e2:	910a      	str	r1, [sp, #40]	; 0x28
 80093e4:	2500      	movs	r5, #0
 80093e6:	930d      	str	r3, [sp, #52]	; 0x34
 80093e8:	9b02      	ldr	r3, [sp, #8]
 80093ea:	42b3      	cmp	r3, r6
 80093ec:	da04      	bge.n	80093f8 <__kernel_rem_pio2+0x398>
 80093ee:	461c      	mov	r4, r3
 80093f0:	e6a6      	b.n	8009140 <__kernel_rem_pio2+0xe0>
 80093f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093f4:	2301      	movs	r3, #1
 80093f6:	e7e3      	b.n	80093c0 <__kernel_rem_pio2+0x360>
 80093f8:	9b06      	ldr	r3, [sp, #24]
 80093fa:	18ef      	adds	r7, r5, r3
 80093fc:	ab22      	add	r3, sp, #136	; 0x88
 80093fe:	441f      	add	r7, r3
 8009400:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009402:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009406:	f7f7 f895 	bl	8000534 <__aeabi_i2d>
 800940a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800940c:	461c      	mov	r4, r3
 800940e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009410:	e9c7 0100 	strd	r0, r1, [r7]
 8009414:	eb03 0b05 	add.w	fp, r3, r5
 8009418:	2700      	movs	r7, #0
 800941a:	f04f 0800 	mov.w	r8, #0
 800941e:	f04f 0900 	mov.w	r9, #0
 8009422:	9b07      	ldr	r3, [sp, #28]
 8009424:	429f      	cmp	r7, r3
 8009426:	dd08      	ble.n	800943a <__kernel_rem_pio2+0x3da>
 8009428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800942a:	aa72      	add	r2, sp, #456	; 0x1c8
 800942c:	18eb      	adds	r3, r5, r3
 800942e:	4413      	add	r3, r2
 8009430:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8009434:	3601      	adds	r6, #1
 8009436:	3508      	adds	r5, #8
 8009438:	e7d6      	b.n	80093e8 <__kernel_rem_pio2+0x388>
 800943a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800943e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8009442:	f7f7 f8e1 	bl	8000608 <__aeabi_dmul>
 8009446:	4602      	mov	r2, r0
 8009448:	460b      	mov	r3, r1
 800944a:	4640      	mov	r0, r8
 800944c:	4649      	mov	r1, r9
 800944e:	f7f6 ff25 	bl	800029c <__adddf3>
 8009452:	3701      	adds	r7, #1
 8009454:	4680      	mov	r8, r0
 8009456:	4689      	mov	r9, r1
 8009458:	e7e3      	b.n	8009422 <__kernel_rem_pio2+0x3c2>
 800945a:	3d01      	subs	r5, #1
 800945c:	e741      	b.n	80092e2 <__kernel_rem_pio2+0x282>
 800945e:	f1ca 0000 	rsb	r0, sl, #0
 8009462:	ec47 6b10 	vmov	d0, r6, r7
 8009466:	f000 fa83 	bl	8009970 <scalbn>
 800946a:	ec57 6b10 	vmov	r6, r7, d0
 800946e:	2200      	movs	r2, #0
 8009470:	4b99      	ldr	r3, [pc, #612]	; (80096d8 <__kernel_rem_pio2+0x678>)
 8009472:	ee10 0a10 	vmov	r0, s0
 8009476:	4639      	mov	r1, r7
 8009478:	f7f7 fb4c 	bl	8000b14 <__aeabi_dcmpge>
 800947c:	b1f8      	cbz	r0, 80094be <__kernel_rem_pio2+0x45e>
 800947e:	2200      	movs	r2, #0
 8009480:	4b96      	ldr	r3, [pc, #600]	; (80096dc <__kernel_rem_pio2+0x67c>)
 8009482:	4630      	mov	r0, r6
 8009484:	4639      	mov	r1, r7
 8009486:	f7f7 f8bf 	bl	8000608 <__aeabi_dmul>
 800948a:	f7f7 fb6d 	bl	8000b68 <__aeabi_d2iz>
 800948e:	4680      	mov	r8, r0
 8009490:	f7f7 f850 	bl	8000534 <__aeabi_i2d>
 8009494:	2200      	movs	r2, #0
 8009496:	4b90      	ldr	r3, [pc, #576]	; (80096d8 <__kernel_rem_pio2+0x678>)
 8009498:	f7f7 f8b6 	bl	8000608 <__aeabi_dmul>
 800949c:	460b      	mov	r3, r1
 800949e:	4602      	mov	r2, r0
 80094a0:	4639      	mov	r1, r7
 80094a2:	4630      	mov	r0, r6
 80094a4:	f7f6 fef8 	bl	8000298 <__aeabi_dsub>
 80094a8:	f7f7 fb5e 	bl	8000b68 <__aeabi_d2iz>
 80094ac:	1c65      	adds	r5, r4, #1
 80094ae:	ab0e      	add	r3, sp, #56	; 0x38
 80094b0:	f10a 0a18 	add.w	sl, sl, #24
 80094b4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80094b8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80094bc:	e719      	b.n	80092f2 <__kernel_rem_pio2+0x292>
 80094be:	4630      	mov	r0, r6
 80094c0:	4639      	mov	r1, r7
 80094c2:	f7f7 fb51 	bl	8000b68 <__aeabi_d2iz>
 80094c6:	ab0e      	add	r3, sp, #56	; 0x38
 80094c8:	4625      	mov	r5, r4
 80094ca:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80094ce:	e710      	b.n	80092f2 <__kernel_rem_pio2+0x292>
 80094d0:	ab0e      	add	r3, sp, #56	; 0x38
 80094d2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80094d6:	f7f7 f82d 	bl	8000534 <__aeabi_i2d>
 80094da:	4642      	mov	r2, r8
 80094dc:	464b      	mov	r3, r9
 80094de:	f7f7 f893 	bl	8000608 <__aeabi_dmul>
 80094e2:	2200      	movs	r2, #0
 80094e4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80094e8:	4b7c      	ldr	r3, [pc, #496]	; (80096dc <__kernel_rem_pio2+0x67c>)
 80094ea:	4640      	mov	r0, r8
 80094ec:	4649      	mov	r1, r9
 80094ee:	f7f7 f88b 	bl	8000608 <__aeabi_dmul>
 80094f2:	3f01      	subs	r7, #1
 80094f4:	4680      	mov	r8, r0
 80094f6:	4689      	mov	r9, r1
 80094f8:	e708      	b.n	800930c <__kernel_rem_pio2+0x2ac>
 80094fa:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80094fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009502:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8009506:	f7f7 f87f 	bl	8000608 <__aeabi_dmul>
 800950a:	4602      	mov	r2, r0
 800950c:	460b      	mov	r3, r1
 800950e:	4640      	mov	r0, r8
 8009510:	4649      	mov	r1, r9
 8009512:	f7f6 fec3 	bl	800029c <__adddf3>
 8009516:	3701      	adds	r7, #1
 8009518:	4680      	mov	r8, r0
 800951a:	4689      	mov	r9, r1
 800951c:	9b04      	ldr	r3, [sp, #16]
 800951e:	429f      	cmp	r7, r3
 8009520:	dc01      	bgt.n	8009526 <__kernel_rem_pio2+0x4c6>
 8009522:	45ba      	cmp	sl, r7
 8009524:	dae9      	bge.n	80094fa <__kernel_rem_pio2+0x49a>
 8009526:	ab4a      	add	r3, sp, #296	; 0x128
 8009528:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800952c:	e9c3 8900 	strd	r8, r9, [r3]
 8009530:	f10a 0a01 	add.w	sl, sl, #1
 8009534:	3e08      	subs	r6, #8
 8009536:	e6f0      	b.n	800931a <__kernel_rem_pio2+0x2ba>
 8009538:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800953a:	2b03      	cmp	r3, #3
 800953c:	d85b      	bhi.n	80095f6 <__kernel_rem_pio2+0x596>
 800953e:	e8df f003 	tbb	[pc, r3]
 8009542:	264a      	.short	0x264a
 8009544:	0226      	.short	0x0226
 8009546:	ab9a      	add	r3, sp, #616	; 0x268
 8009548:	441c      	add	r4, r3
 800954a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800954e:	46a2      	mov	sl, r4
 8009550:	46ab      	mov	fp, r5
 8009552:	f1bb 0f00 	cmp.w	fp, #0
 8009556:	dc6c      	bgt.n	8009632 <__kernel_rem_pio2+0x5d2>
 8009558:	46a2      	mov	sl, r4
 800955a:	46ab      	mov	fp, r5
 800955c:	f1bb 0f01 	cmp.w	fp, #1
 8009560:	f300 8086 	bgt.w	8009670 <__kernel_rem_pio2+0x610>
 8009564:	2000      	movs	r0, #0
 8009566:	2100      	movs	r1, #0
 8009568:	2d01      	cmp	r5, #1
 800956a:	f300 80a0 	bgt.w	80096ae <__kernel_rem_pio2+0x64e>
 800956e:	9b02      	ldr	r3, [sp, #8]
 8009570:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8009574:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8009578:	2b00      	cmp	r3, #0
 800957a:	f040 809e 	bne.w	80096ba <__kernel_rem_pio2+0x65a>
 800957e:	9b01      	ldr	r3, [sp, #4]
 8009580:	e9c3 7800 	strd	r7, r8, [r3]
 8009584:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8009588:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800958c:	e033      	b.n	80095f6 <__kernel_rem_pio2+0x596>
 800958e:	3408      	adds	r4, #8
 8009590:	ab4a      	add	r3, sp, #296	; 0x128
 8009592:	441c      	add	r4, r3
 8009594:	462e      	mov	r6, r5
 8009596:	2000      	movs	r0, #0
 8009598:	2100      	movs	r1, #0
 800959a:	2e00      	cmp	r6, #0
 800959c:	da3a      	bge.n	8009614 <__kernel_rem_pio2+0x5b4>
 800959e:	9b02      	ldr	r3, [sp, #8]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d03d      	beq.n	8009620 <__kernel_rem_pio2+0x5c0>
 80095a4:	4602      	mov	r2, r0
 80095a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80095aa:	9c01      	ldr	r4, [sp, #4]
 80095ac:	e9c4 2300 	strd	r2, r3, [r4]
 80095b0:	4602      	mov	r2, r0
 80095b2:	460b      	mov	r3, r1
 80095b4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80095b8:	f7f6 fe6e 	bl	8000298 <__aeabi_dsub>
 80095bc:	ae4c      	add	r6, sp, #304	; 0x130
 80095be:	2401      	movs	r4, #1
 80095c0:	42a5      	cmp	r5, r4
 80095c2:	da30      	bge.n	8009626 <__kernel_rem_pio2+0x5c6>
 80095c4:	9b02      	ldr	r3, [sp, #8]
 80095c6:	b113      	cbz	r3, 80095ce <__kernel_rem_pio2+0x56e>
 80095c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80095cc:	4619      	mov	r1, r3
 80095ce:	9b01      	ldr	r3, [sp, #4]
 80095d0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80095d4:	e00f      	b.n	80095f6 <__kernel_rem_pio2+0x596>
 80095d6:	ab9a      	add	r3, sp, #616	; 0x268
 80095d8:	441c      	add	r4, r3
 80095da:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80095de:	2000      	movs	r0, #0
 80095e0:	2100      	movs	r1, #0
 80095e2:	2d00      	cmp	r5, #0
 80095e4:	da10      	bge.n	8009608 <__kernel_rem_pio2+0x5a8>
 80095e6:	9b02      	ldr	r3, [sp, #8]
 80095e8:	b113      	cbz	r3, 80095f0 <__kernel_rem_pio2+0x590>
 80095ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80095ee:	4619      	mov	r1, r3
 80095f0:	9b01      	ldr	r3, [sp, #4]
 80095f2:	e9c3 0100 	strd	r0, r1, [r3]
 80095f6:	9b06      	ldr	r3, [sp, #24]
 80095f8:	f003 0007 	and.w	r0, r3, #7
 80095fc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8009600:	ecbd 8b02 	vpop	{d8}
 8009604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009608:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800960c:	f7f6 fe46 	bl	800029c <__adddf3>
 8009610:	3d01      	subs	r5, #1
 8009612:	e7e6      	b.n	80095e2 <__kernel_rem_pio2+0x582>
 8009614:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009618:	f7f6 fe40 	bl	800029c <__adddf3>
 800961c:	3e01      	subs	r6, #1
 800961e:	e7bc      	b.n	800959a <__kernel_rem_pio2+0x53a>
 8009620:	4602      	mov	r2, r0
 8009622:	460b      	mov	r3, r1
 8009624:	e7c1      	b.n	80095aa <__kernel_rem_pio2+0x54a>
 8009626:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800962a:	f7f6 fe37 	bl	800029c <__adddf3>
 800962e:	3401      	adds	r4, #1
 8009630:	e7c6      	b.n	80095c0 <__kernel_rem_pio2+0x560>
 8009632:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8009636:	ed3a 7b02 	vldmdb	sl!, {d7}
 800963a:	4640      	mov	r0, r8
 800963c:	ec53 2b17 	vmov	r2, r3, d7
 8009640:	4649      	mov	r1, r9
 8009642:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009646:	f7f6 fe29 	bl	800029c <__adddf3>
 800964a:	4602      	mov	r2, r0
 800964c:	460b      	mov	r3, r1
 800964e:	4606      	mov	r6, r0
 8009650:	460f      	mov	r7, r1
 8009652:	4640      	mov	r0, r8
 8009654:	4649      	mov	r1, r9
 8009656:	f7f6 fe1f 	bl	8000298 <__aeabi_dsub>
 800965a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800965e:	f7f6 fe1d 	bl	800029c <__adddf3>
 8009662:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009666:	e9ca 0100 	strd	r0, r1, [sl]
 800966a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800966e:	e770      	b.n	8009552 <__kernel_rem_pio2+0x4f2>
 8009670:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8009674:	ed3a 7b02 	vldmdb	sl!, {d7}
 8009678:	4630      	mov	r0, r6
 800967a:	ec53 2b17 	vmov	r2, r3, d7
 800967e:	4639      	mov	r1, r7
 8009680:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009684:	f7f6 fe0a 	bl	800029c <__adddf3>
 8009688:	4602      	mov	r2, r0
 800968a:	460b      	mov	r3, r1
 800968c:	4680      	mov	r8, r0
 800968e:	4689      	mov	r9, r1
 8009690:	4630      	mov	r0, r6
 8009692:	4639      	mov	r1, r7
 8009694:	f7f6 fe00 	bl	8000298 <__aeabi_dsub>
 8009698:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800969c:	f7f6 fdfe 	bl	800029c <__adddf3>
 80096a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80096a4:	e9ca 0100 	strd	r0, r1, [sl]
 80096a8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80096ac:	e756      	b.n	800955c <__kernel_rem_pio2+0x4fc>
 80096ae:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80096b2:	f7f6 fdf3 	bl	800029c <__adddf3>
 80096b6:	3d01      	subs	r5, #1
 80096b8:	e756      	b.n	8009568 <__kernel_rem_pio2+0x508>
 80096ba:	9b01      	ldr	r3, [sp, #4]
 80096bc:	9a01      	ldr	r2, [sp, #4]
 80096be:	601f      	str	r7, [r3, #0]
 80096c0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80096c4:	605c      	str	r4, [r3, #4]
 80096c6:	609d      	str	r5, [r3, #8]
 80096c8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80096cc:	60d3      	str	r3, [r2, #12]
 80096ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80096d2:	6110      	str	r0, [r2, #16]
 80096d4:	6153      	str	r3, [r2, #20]
 80096d6:	e78e      	b.n	80095f6 <__kernel_rem_pio2+0x596>
 80096d8:	41700000 	.word	0x41700000
 80096dc:	3e700000 	.word	0x3e700000

080096e0 <__kernel_sin>:
 80096e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096e4:	ec55 4b10 	vmov	r4, r5, d0
 80096e8:	b085      	sub	sp, #20
 80096ea:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80096ee:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80096f2:	ed8d 1b00 	vstr	d1, [sp]
 80096f6:	9002      	str	r0, [sp, #8]
 80096f8:	da06      	bge.n	8009708 <__kernel_sin+0x28>
 80096fa:	ee10 0a10 	vmov	r0, s0
 80096fe:	4629      	mov	r1, r5
 8009700:	f7f7 fa32 	bl	8000b68 <__aeabi_d2iz>
 8009704:	2800      	cmp	r0, #0
 8009706:	d051      	beq.n	80097ac <__kernel_sin+0xcc>
 8009708:	4622      	mov	r2, r4
 800970a:	462b      	mov	r3, r5
 800970c:	4620      	mov	r0, r4
 800970e:	4629      	mov	r1, r5
 8009710:	f7f6 ff7a 	bl	8000608 <__aeabi_dmul>
 8009714:	4682      	mov	sl, r0
 8009716:	468b      	mov	fp, r1
 8009718:	4602      	mov	r2, r0
 800971a:	460b      	mov	r3, r1
 800971c:	4620      	mov	r0, r4
 800971e:	4629      	mov	r1, r5
 8009720:	f7f6 ff72 	bl	8000608 <__aeabi_dmul>
 8009724:	a341      	add	r3, pc, #260	; (adr r3, 800982c <__kernel_sin+0x14c>)
 8009726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972a:	4680      	mov	r8, r0
 800972c:	4689      	mov	r9, r1
 800972e:	4650      	mov	r0, sl
 8009730:	4659      	mov	r1, fp
 8009732:	f7f6 ff69 	bl	8000608 <__aeabi_dmul>
 8009736:	a33f      	add	r3, pc, #252	; (adr r3, 8009834 <__kernel_sin+0x154>)
 8009738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800973c:	f7f6 fdac 	bl	8000298 <__aeabi_dsub>
 8009740:	4652      	mov	r2, sl
 8009742:	465b      	mov	r3, fp
 8009744:	f7f6 ff60 	bl	8000608 <__aeabi_dmul>
 8009748:	a33c      	add	r3, pc, #240	; (adr r3, 800983c <__kernel_sin+0x15c>)
 800974a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800974e:	f7f6 fda5 	bl	800029c <__adddf3>
 8009752:	4652      	mov	r2, sl
 8009754:	465b      	mov	r3, fp
 8009756:	f7f6 ff57 	bl	8000608 <__aeabi_dmul>
 800975a:	a33a      	add	r3, pc, #232	; (adr r3, 8009844 <__kernel_sin+0x164>)
 800975c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009760:	f7f6 fd9a 	bl	8000298 <__aeabi_dsub>
 8009764:	4652      	mov	r2, sl
 8009766:	465b      	mov	r3, fp
 8009768:	f7f6 ff4e 	bl	8000608 <__aeabi_dmul>
 800976c:	a337      	add	r3, pc, #220	; (adr r3, 800984c <__kernel_sin+0x16c>)
 800976e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009772:	f7f6 fd93 	bl	800029c <__adddf3>
 8009776:	9b02      	ldr	r3, [sp, #8]
 8009778:	4606      	mov	r6, r0
 800977a:	460f      	mov	r7, r1
 800977c:	b9db      	cbnz	r3, 80097b6 <__kernel_sin+0xd6>
 800977e:	4602      	mov	r2, r0
 8009780:	460b      	mov	r3, r1
 8009782:	4650      	mov	r0, sl
 8009784:	4659      	mov	r1, fp
 8009786:	f7f6 ff3f 	bl	8000608 <__aeabi_dmul>
 800978a:	a325      	add	r3, pc, #148	; (adr r3, 8009820 <__kernel_sin+0x140>)
 800978c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009790:	f7f6 fd82 	bl	8000298 <__aeabi_dsub>
 8009794:	4642      	mov	r2, r8
 8009796:	464b      	mov	r3, r9
 8009798:	f7f6 ff36 	bl	8000608 <__aeabi_dmul>
 800979c:	4602      	mov	r2, r0
 800979e:	460b      	mov	r3, r1
 80097a0:	4620      	mov	r0, r4
 80097a2:	4629      	mov	r1, r5
 80097a4:	f7f6 fd7a 	bl	800029c <__adddf3>
 80097a8:	4604      	mov	r4, r0
 80097aa:	460d      	mov	r5, r1
 80097ac:	ec45 4b10 	vmov	d0, r4, r5
 80097b0:	b005      	add	sp, #20
 80097b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097b6:	2200      	movs	r2, #0
 80097b8:	4b1b      	ldr	r3, [pc, #108]	; (8009828 <__kernel_sin+0x148>)
 80097ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80097be:	f7f6 ff23 	bl	8000608 <__aeabi_dmul>
 80097c2:	4632      	mov	r2, r6
 80097c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097c8:	463b      	mov	r3, r7
 80097ca:	4640      	mov	r0, r8
 80097cc:	4649      	mov	r1, r9
 80097ce:	f7f6 ff1b 	bl	8000608 <__aeabi_dmul>
 80097d2:	4602      	mov	r2, r0
 80097d4:	460b      	mov	r3, r1
 80097d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097da:	f7f6 fd5d 	bl	8000298 <__aeabi_dsub>
 80097de:	4652      	mov	r2, sl
 80097e0:	465b      	mov	r3, fp
 80097e2:	f7f6 ff11 	bl	8000608 <__aeabi_dmul>
 80097e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097ea:	f7f6 fd55 	bl	8000298 <__aeabi_dsub>
 80097ee:	a30c      	add	r3, pc, #48	; (adr r3, 8009820 <__kernel_sin+0x140>)
 80097f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f4:	4606      	mov	r6, r0
 80097f6:	460f      	mov	r7, r1
 80097f8:	4640      	mov	r0, r8
 80097fa:	4649      	mov	r1, r9
 80097fc:	f7f6 ff04 	bl	8000608 <__aeabi_dmul>
 8009800:	4602      	mov	r2, r0
 8009802:	460b      	mov	r3, r1
 8009804:	4630      	mov	r0, r6
 8009806:	4639      	mov	r1, r7
 8009808:	f7f6 fd48 	bl	800029c <__adddf3>
 800980c:	4602      	mov	r2, r0
 800980e:	460b      	mov	r3, r1
 8009810:	4620      	mov	r0, r4
 8009812:	4629      	mov	r1, r5
 8009814:	f7f6 fd40 	bl	8000298 <__aeabi_dsub>
 8009818:	e7c6      	b.n	80097a8 <__kernel_sin+0xc8>
 800981a:	bf00      	nop
 800981c:	f3af 8000 	nop.w
 8009820:	55555549 	.word	0x55555549
 8009824:	3fc55555 	.word	0x3fc55555
 8009828:	3fe00000 	.word	0x3fe00000
 800982c:	5acfd57c 	.word	0x5acfd57c
 8009830:	3de5d93a 	.word	0x3de5d93a
 8009834:	8a2b9ceb 	.word	0x8a2b9ceb
 8009838:	3e5ae5e6 	.word	0x3e5ae5e6
 800983c:	57b1fe7d 	.word	0x57b1fe7d
 8009840:	3ec71de3 	.word	0x3ec71de3
 8009844:	19c161d5 	.word	0x19c161d5
 8009848:	3f2a01a0 	.word	0x3f2a01a0
 800984c:	1110f8a6 	.word	0x1110f8a6
 8009850:	3f811111 	.word	0x3f811111

08009854 <fabs>:
 8009854:	ec51 0b10 	vmov	r0, r1, d0
 8009858:	ee10 2a10 	vmov	r2, s0
 800985c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009860:	ec43 2b10 	vmov	d0, r2, r3
 8009864:	4770      	bx	lr
	...

08009868 <floor>:
 8009868:	ec51 0b10 	vmov	r0, r1, d0
 800986c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009870:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009874:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009878:	2e13      	cmp	r6, #19
 800987a:	460c      	mov	r4, r1
 800987c:	ee10 5a10 	vmov	r5, s0
 8009880:	4680      	mov	r8, r0
 8009882:	dc34      	bgt.n	80098ee <floor+0x86>
 8009884:	2e00      	cmp	r6, #0
 8009886:	da16      	bge.n	80098b6 <floor+0x4e>
 8009888:	a335      	add	r3, pc, #212	; (adr r3, 8009960 <floor+0xf8>)
 800988a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988e:	f7f6 fd05 	bl	800029c <__adddf3>
 8009892:	2200      	movs	r2, #0
 8009894:	2300      	movs	r3, #0
 8009896:	f7f7 f947 	bl	8000b28 <__aeabi_dcmpgt>
 800989a:	b148      	cbz	r0, 80098b0 <floor+0x48>
 800989c:	2c00      	cmp	r4, #0
 800989e:	da59      	bge.n	8009954 <floor+0xec>
 80098a0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80098a4:	4a30      	ldr	r2, [pc, #192]	; (8009968 <floor+0x100>)
 80098a6:	432b      	orrs	r3, r5
 80098a8:	2500      	movs	r5, #0
 80098aa:	42ab      	cmp	r3, r5
 80098ac:	bf18      	it	ne
 80098ae:	4614      	movne	r4, r2
 80098b0:	4621      	mov	r1, r4
 80098b2:	4628      	mov	r0, r5
 80098b4:	e025      	b.n	8009902 <floor+0x9a>
 80098b6:	4f2d      	ldr	r7, [pc, #180]	; (800996c <floor+0x104>)
 80098b8:	4137      	asrs	r7, r6
 80098ba:	ea01 0307 	and.w	r3, r1, r7
 80098be:	4303      	orrs	r3, r0
 80098c0:	d01f      	beq.n	8009902 <floor+0x9a>
 80098c2:	a327      	add	r3, pc, #156	; (adr r3, 8009960 <floor+0xf8>)
 80098c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c8:	f7f6 fce8 	bl	800029c <__adddf3>
 80098cc:	2200      	movs	r2, #0
 80098ce:	2300      	movs	r3, #0
 80098d0:	f7f7 f92a 	bl	8000b28 <__aeabi_dcmpgt>
 80098d4:	2800      	cmp	r0, #0
 80098d6:	d0eb      	beq.n	80098b0 <floor+0x48>
 80098d8:	2c00      	cmp	r4, #0
 80098da:	bfbe      	ittt	lt
 80098dc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80098e0:	fa43 f606 	asrlt.w	r6, r3, r6
 80098e4:	19a4      	addlt	r4, r4, r6
 80098e6:	ea24 0407 	bic.w	r4, r4, r7
 80098ea:	2500      	movs	r5, #0
 80098ec:	e7e0      	b.n	80098b0 <floor+0x48>
 80098ee:	2e33      	cmp	r6, #51	; 0x33
 80098f0:	dd0b      	ble.n	800990a <floor+0xa2>
 80098f2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80098f6:	d104      	bne.n	8009902 <floor+0x9a>
 80098f8:	ee10 2a10 	vmov	r2, s0
 80098fc:	460b      	mov	r3, r1
 80098fe:	f7f6 fccd 	bl	800029c <__adddf3>
 8009902:	ec41 0b10 	vmov	d0, r0, r1
 8009906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800990a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800990e:	f04f 33ff 	mov.w	r3, #4294967295
 8009912:	fa23 f707 	lsr.w	r7, r3, r7
 8009916:	4207      	tst	r7, r0
 8009918:	d0f3      	beq.n	8009902 <floor+0x9a>
 800991a:	a311      	add	r3, pc, #68	; (adr r3, 8009960 <floor+0xf8>)
 800991c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009920:	f7f6 fcbc 	bl	800029c <__adddf3>
 8009924:	2200      	movs	r2, #0
 8009926:	2300      	movs	r3, #0
 8009928:	f7f7 f8fe 	bl	8000b28 <__aeabi_dcmpgt>
 800992c:	2800      	cmp	r0, #0
 800992e:	d0bf      	beq.n	80098b0 <floor+0x48>
 8009930:	2c00      	cmp	r4, #0
 8009932:	da02      	bge.n	800993a <floor+0xd2>
 8009934:	2e14      	cmp	r6, #20
 8009936:	d103      	bne.n	8009940 <floor+0xd8>
 8009938:	3401      	adds	r4, #1
 800993a:	ea25 0507 	bic.w	r5, r5, r7
 800993e:	e7b7      	b.n	80098b0 <floor+0x48>
 8009940:	2301      	movs	r3, #1
 8009942:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009946:	fa03 f606 	lsl.w	r6, r3, r6
 800994a:	4435      	add	r5, r6
 800994c:	4545      	cmp	r5, r8
 800994e:	bf38      	it	cc
 8009950:	18e4      	addcc	r4, r4, r3
 8009952:	e7f2      	b.n	800993a <floor+0xd2>
 8009954:	2500      	movs	r5, #0
 8009956:	462c      	mov	r4, r5
 8009958:	e7aa      	b.n	80098b0 <floor+0x48>
 800995a:	bf00      	nop
 800995c:	f3af 8000 	nop.w
 8009960:	8800759c 	.word	0x8800759c
 8009964:	7e37e43c 	.word	0x7e37e43c
 8009968:	bff00000 	.word	0xbff00000
 800996c:	000fffff 	.word	0x000fffff

08009970 <scalbn>:
 8009970:	b570      	push	{r4, r5, r6, lr}
 8009972:	ec55 4b10 	vmov	r4, r5, d0
 8009976:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800997a:	4606      	mov	r6, r0
 800997c:	462b      	mov	r3, r5
 800997e:	b9aa      	cbnz	r2, 80099ac <scalbn+0x3c>
 8009980:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009984:	4323      	orrs	r3, r4
 8009986:	d03b      	beq.n	8009a00 <scalbn+0x90>
 8009988:	4b31      	ldr	r3, [pc, #196]	; (8009a50 <scalbn+0xe0>)
 800998a:	4629      	mov	r1, r5
 800998c:	2200      	movs	r2, #0
 800998e:	ee10 0a10 	vmov	r0, s0
 8009992:	f7f6 fe39 	bl	8000608 <__aeabi_dmul>
 8009996:	4b2f      	ldr	r3, [pc, #188]	; (8009a54 <scalbn+0xe4>)
 8009998:	429e      	cmp	r6, r3
 800999a:	4604      	mov	r4, r0
 800999c:	460d      	mov	r5, r1
 800999e:	da12      	bge.n	80099c6 <scalbn+0x56>
 80099a0:	a327      	add	r3, pc, #156	; (adr r3, 8009a40 <scalbn+0xd0>)
 80099a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a6:	f7f6 fe2f 	bl	8000608 <__aeabi_dmul>
 80099aa:	e009      	b.n	80099c0 <scalbn+0x50>
 80099ac:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80099b0:	428a      	cmp	r2, r1
 80099b2:	d10c      	bne.n	80099ce <scalbn+0x5e>
 80099b4:	ee10 2a10 	vmov	r2, s0
 80099b8:	4620      	mov	r0, r4
 80099ba:	4629      	mov	r1, r5
 80099bc:	f7f6 fc6e 	bl	800029c <__adddf3>
 80099c0:	4604      	mov	r4, r0
 80099c2:	460d      	mov	r5, r1
 80099c4:	e01c      	b.n	8009a00 <scalbn+0x90>
 80099c6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80099ca:	460b      	mov	r3, r1
 80099cc:	3a36      	subs	r2, #54	; 0x36
 80099ce:	4432      	add	r2, r6
 80099d0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80099d4:	428a      	cmp	r2, r1
 80099d6:	dd0b      	ble.n	80099f0 <scalbn+0x80>
 80099d8:	ec45 4b11 	vmov	d1, r4, r5
 80099dc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8009a48 <scalbn+0xd8>
 80099e0:	f000 f83c 	bl	8009a5c <copysign>
 80099e4:	a318      	add	r3, pc, #96	; (adr r3, 8009a48 <scalbn+0xd8>)
 80099e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ea:	ec51 0b10 	vmov	r0, r1, d0
 80099ee:	e7da      	b.n	80099a6 <scalbn+0x36>
 80099f0:	2a00      	cmp	r2, #0
 80099f2:	dd08      	ble.n	8009a06 <scalbn+0x96>
 80099f4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80099f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80099fc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009a00:	ec45 4b10 	vmov	d0, r4, r5
 8009a04:	bd70      	pop	{r4, r5, r6, pc}
 8009a06:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009a0a:	da0d      	bge.n	8009a28 <scalbn+0xb8>
 8009a0c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009a10:	429e      	cmp	r6, r3
 8009a12:	ec45 4b11 	vmov	d1, r4, r5
 8009a16:	dce1      	bgt.n	80099dc <scalbn+0x6c>
 8009a18:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8009a40 <scalbn+0xd0>
 8009a1c:	f000 f81e 	bl	8009a5c <copysign>
 8009a20:	a307      	add	r3, pc, #28	; (adr r3, 8009a40 <scalbn+0xd0>)
 8009a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a26:	e7e0      	b.n	80099ea <scalbn+0x7a>
 8009a28:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009a2c:	3236      	adds	r2, #54	; 0x36
 8009a2e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009a32:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009a36:	4620      	mov	r0, r4
 8009a38:	4629      	mov	r1, r5
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	4b06      	ldr	r3, [pc, #24]	; (8009a58 <scalbn+0xe8>)
 8009a3e:	e7b2      	b.n	80099a6 <scalbn+0x36>
 8009a40:	c2f8f359 	.word	0xc2f8f359
 8009a44:	01a56e1f 	.word	0x01a56e1f
 8009a48:	8800759c 	.word	0x8800759c
 8009a4c:	7e37e43c 	.word	0x7e37e43c
 8009a50:	43500000 	.word	0x43500000
 8009a54:	ffff3cb0 	.word	0xffff3cb0
 8009a58:	3c900000 	.word	0x3c900000

08009a5c <copysign>:
 8009a5c:	ec51 0b10 	vmov	r0, r1, d0
 8009a60:	ee11 0a90 	vmov	r0, s3
 8009a64:	ee10 2a10 	vmov	r2, s0
 8009a68:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009a6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8009a70:	ea41 0300 	orr.w	r3, r1, r0
 8009a74:	ec43 2b10 	vmov	d0, r2, r3
 8009a78:	4770      	bx	lr
	...

08009a7c <_init>:
 8009a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a7e:	bf00      	nop
 8009a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a82:	bc08      	pop	{r3}
 8009a84:	469e      	mov	lr, r3
 8009a86:	4770      	bx	lr

08009a88 <_fini>:
 8009a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a8a:	bf00      	nop
 8009a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a8e:	bc08      	pop	{r3}
 8009a90:	469e      	mov	lr, r3
 8009a92:	4770      	bx	lr
